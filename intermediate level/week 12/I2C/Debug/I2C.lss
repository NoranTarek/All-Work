
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000466  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000978  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000561  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 28 02 	call	0x450	; 0x450 <main>
  64:	0c 94 31 02 	jmp	0x462	; 0x462 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_voidInitMaster>:
#include "I2C_Configuration.h"
#include "I2C_Interface.h"
#include "I2C_Private.h"

void TWI_voidInitMaster(u8 Copy_u8Address)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	TWBR= (u8) (((F_CPU/SCL_Clock)-16) / (2*TWI_PRESCALLER));
  78:	e0 e2       	ldi	r30, 0x20	; 32
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	82 e0       	ldi	r24, 0x02	; 2
  7e:	80 83       	st	Z, r24

	if (TWI_PRESCALLER==PRESCALLER_BY_1)
	{
		TWSR=0;
  80:	e1 e2       	ldi	r30, 0x21	; 33
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
	else if (TWI_PRESCALLER==PRESCALLER_BY_64)
	{
		TWSR=3;
	}

	if(Copy_u8Address != 0)
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	88 23       	and	r24, r24
  8a:	29 f0       	breq	.+10     	; 0x96 <TWI_voidInitMaster+0x2a>
	{
		TWAR = Copy_u8Address<<1;
  8c:	e2 e2       	ldi	r30, 0x22	; 34
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	88 0f       	add	r24, r24
  94:	80 83       	st	Z, r24
	else
	{
		/*Do nothing*/
	}

	SET_BIT(TWCR,TWCR_TWEA);
  96:	a6 e5       	ldi	r26, 0x56	; 86
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e6 e5       	ldi	r30, 0x56	; 86
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
  a4:	a6 e5       	ldi	r26, 0x56	; 86
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e6 e5       	ldi	r30, 0x56	; 86
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	8c 93       	st	X, r24
}
  b2:	0f 90       	pop	r0
  b4:	cf 91       	pop	r28
  b6:	df 91       	pop	r29
  b8:	08 95       	ret

000000ba <TWI_voidInitSlave>:

void TWI_voidInitSlave(u8 Copy_u8Address)
{
  ba:	df 93       	push	r29
  bc:	cf 93       	push	r28
  be:	0f 92       	push	r0
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
	TWAR = Copy_u8Address<<1;
  c6:	e2 e2       	ldi	r30, 0x22	; 34
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	88 0f       	add	r24, r24
  ce:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWCR_TWEA);
  d0:	a6 e5       	ldi	r26, 0x56	; 86
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e6 e5       	ldi	r30, 0x56	; 86
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 64       	ori	r24, 0x40	; 64
  dc:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWEN);
  de:	a6 e5       	ldi	r26, 0x56	; 86
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	e6 e5       	ldi	r30, 0x56	; 86
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	8c 93       	st	X, r24
}
  ec:	0f 90       	pop	r0
  ee:	cf 91       	pop	r28
  f0:	df 91       	pop	r29
  f2:	08 95       	ret

000000f4 <TWI_SendStartCondition>:

ES_t TWI_SendStartCondition(void)
{
  f4:	df 93       	push	r29
  f6:	cf 93       	push	r28
  f8:	0f 92       	push	r0
  fa:	cd b7       	in	r28, 0x3d	; 61
  fc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_OK;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,TWCR_TWSTA);
 102:	a6 e5       	ldi	r26, 0x56	; 86
 104:	b0 e0       	ldi	r27, 0x00	; 0
 106:	e6 e5       	ldi	r30, 0x56	; 86
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
 110:	a6 e5       	ldi	r26, 0x56	; 86
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e6 e5       	ldi	r30, 0x56	; 86
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	8c 93       	st	X, r24

	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 11e:	e6 e5       	ldi	r30, 0x56	; 86
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	dc f7       	brge	.-10     	; 0x11e <TWI_SendStartCondition+0x2a>

	if((TWSR & 0xF8) != START_ACK )
 128:	e1 e2       	ldi	r30, 0x21	; 33
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	90 70       	andi	r25, 0x00	; 0
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	91 05       	cpc	r25, r1
 13a:	09 f0       	breq	.+2      	; 0x13e <TWI_SendStartCondition+0x4a>
	{
		Local_ErrorState = ES_NOK;
 13c:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return Local_ErrorState;
 13e:	89 81       	ldd	r24, Y+1	; 0x01
}
 140:	0f 90       	pop	r0
 142:	cf 91       	pop	r28
 144:	df 91       	pop	r29
 146:	08 95       	ret

00000148 <TWI_SendRepeatedStart>:

ES_t TWI_SendRepeatedStart(void)
{
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_OK;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(TWCR,TWCR_TWSTA);
 156:	a6 e5       	ldi	r26, 0x56	; 86
 158:	b0 e0       	ldi	r27, 0x00	; 0
 15a:	e6 e5       	ldi	r30, 0x56	; 86
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 62       	ori	r24, 0x20	; 32
 162:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
 164:	a6 e5       	ldi	r26, 0x56	; 86
 166:	b0 e0       	ldi	r27, 0x00	; 0
 168:	e6 e5       	ldi	r30, 0x56	; 86
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	80 81       	ld	r24, Z
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	8c 93       	st	X, r24

	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 172:	e6 e5       	ldi	r30, 0x56	; 86
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	88 23       	and	r24, r24
 17a:	dc f7       	brge	.-10     	; 0x172 <TWI_SendRepeatedStart+0x2a>

	if((TWSR & 0xF8) != START_ACK )
 17c:	e1 e2       	ldi	r30, 0x21	; 33
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	90 70       	andi	r25, 0x00	; 0
 18a:	88 30       	cpi	r24, 0x08	; 8
 18c:	91 05       	cpc	r25, r1
 18e:	09 f0       	breq	.+2      	; 0x192 <TWI_SendRepeatedStart+0x4a>
	{
		Local_ErrorState = ES_NOK;
 190:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return Local_ErrorState;
 192:	89 81       	ldd	r24, Y+1	; 0x01
}
 194:	0f 90       	pop	r0
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <TWI_SendSlaveAddressWithWrite>:

ES_t TWI_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
 19c:	df 93       	push	r29
 19e:	cf 93       	push	r28
 1a0:	00 d0       	rcall	.+0      	; 0x1a2 <TWI_SendSlaveAddressWithWrite+0x6>
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	89 83       	std	Y+1, r24	; 0x01

	TWDR = (Copy_u8SlaveAddress<<1) ;
 1ac:	e3 e2       	ldi	r30, 0x23	; 35
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	8a 81       	ldd	r24, Y+2	; 0x02
 1b2:	88 0f       	add	r24, r24
 1b4:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
 1b6:	a3 e2       	ldi	r26, 0x23	; 35
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e3 e2       	ldi	r30, 0x23	; 35
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	8e 7f       	andi	r24, 0xFE	; 254
 1c2:	8c 93       	st	X, r24
	CLR_BIT(TWCR,TWCR_TWSTA);
 1c4:	a6 e5       	ldi	r26, 0x56	; 86
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	e6 e5       	ldi	r30, 0x56	; 86
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	8f 7d       	andi	r24, 0xDF	; 223
 1d0:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
 1d2:	a6 e5       	ldi	r26, 0x56	; 86
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e6 e5       	ldi	r30, 0x56	; 86
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 68       	ori	r24, 0x80	; 128
 1de:	8c 93       	st	X, r24
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 1e0:	e6 e5       	ldi	r30, 0x56	; 86
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	88 23       	and	r24, r24
 1e8:	dc f7       	brge	.-10     	; 0x1e0 <TWI_SendSlaveAddressWithWrite+0x44>

	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
 1ea:	e1 e2       	ldi	r30, 0x21	; 33
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 2f       	mov	r24, r24
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	88 7f       	andi	r24, 0xF8	; 248
 1f6:	90 70       	andi	r25, 0x00	; 0
 1f8:	88 31       	cpi	r24, 0x18	; 24
 1fa:	91 05       	cpc	r25, r1
 1fc:	09 f0       	breq	.+2      	; 0x200 <TWI_SendSlaveAddressWithWrite+0x64>
	{
		Local_ErrorState = ES_NOK;
 1fe:	19 82       	std	Y+1, r1	; 0x01
	else
	{

	}

	return Local_ErrorState;
 200:	89 81       	ldd	r24, Y+1	; 0x01
}
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <TWI_SendSlaveAddressWithRead>:

ES_t TWI_SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	00 d0       	rcall	.+0      	; 0x212 <TWI_SendSlaveAddressWithRead+0x6>
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = (Copy_u8SlaveAddress<<1) ;
 21c:	e3 e2       	ldi	r30, 0x23	; 35
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	8a 81       	ldd	r24, Y+2	; 0x02
 222:	88 0f       	add	r24, r24
 224:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
 226:	a3 e2       	ldi	r26, 0x23	; 35
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e3 e2       	ldi	r30, 0x23	; 35
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	80 81       	ld	r24, Z
 230:	81 60       	ori	r24, 0x01	; 1
 232:	8c 93       	st	X, r24
	CLR_BIT(TWCR,TWCR_TWSTA);
 234:	a6 e5       	ldi	r26, 0x56	; 86
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e6 e5       	ldi	r30, 0x56	; 86
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	8f 7d       	andi	r24, 0xDF	; 223
 240:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
 242:	a6 e5       	ldi	r26, 0x56	; 86
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e6 e5       	ldi	r30, 0x56	; 86
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	80 68       	ori	r24, 0x80	; 128
 24e:	8c 93       	st	X, r24
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 250:	e6 e5       	ldi	r30, 0x56	; 86
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	88 23       	and	r24, r24
 258:	dc f7       	brge	.-10     	; 0x250 <TWI_SendSlaveAddressWithRead+0x44>

	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK )
 25a:	e1 e2       	ldi	r30, 0x21	; 33
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	88 2f       	mov	r24, r24
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	88 7f       	andi	r24, 0xF8	; 248
 266:	90 70       	andi	r25, 0x00	; 0
 268:	88 31       	cpi	r24, 0x18	; 24
 26a:	91 05       	cpc	r25, r1
 26c:	09 f0       	breq	.+2      	; 0x270 <TWI_SendSlaveAddressWithRead+0x64>
	{
		Local_ErrorState = ES_NOK;
 26e:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return Local_ErrorState;
 270:	89 81       	ldd	r24, Y+1	; 0x01
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <TWI_MasterWriteDataByte>:

ES_t TWI_MasterWriteDataByte(u8 Copy_u8DataByte)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <TWI_MasterWriteDataByte+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Copy_u8DataByte;
 28c:	e3 e2       	ldi	r30, 0x23	; 35
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWCR_TWINT);
 294:	a6 e5       	ldi	r26, 0x56	; 86
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	e6 e5       	ldi	r30, 0x56	; 86
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 68       	ori	r24, 0x80	; 128
 2a0:	8c 93       	st	X, r24
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 2a2:	e6 e5       	ldi	r30, 0x56	; 86
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	88 23       	and	r24, r24
 2aa:	dc f7       	brge	.-10     	; 0x2a2 <TWI_MasterWriteDataByte+0x26>

	if((TWSR & 0xF8) !=  MSTR_WR_BYTE_ACK)
 2ac:	e1 e2       	ldi	r30, 0x21	; 33
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	88 2f       	mov	r24, r24
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	90 70       	andi	r25, 0x00	; 0
 2ba:	88 32       	cpi	r24, 0x28	; 40
 2bc:	91 05       	cpc	r25, r1
 2be:	09 f0       	breq	.+2      	; 0x2c2 <TWI_MasterWriteDataByte+0x46>
	{
		Local_ErrorState = ES_NOK;
 2c0:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return Local_ErrorState;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
}
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <TWI_MasterReadDataByte>:

ES_t TWI_MasterReadDataByte(u8 *Copy_pu8DataByte)
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <TWI_MasterReadDataByte+0x6>
 2d4:	0f 92       	push	r0
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	9b 83       	std	Y+3, r25	; 0x03
 2dc:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8DataByte != NULL)
 2e2:	8a 81       	ldd	r24, Y+2	; 0x02
 2e4:	9b 81       	ldd	r25, Y+3	; 0x03
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	f9 f0       	breq	.+62     	; 0x328 <TWI_MasterReadDataByte+0x5a>
	{
		SET_BIT(TWCR,TWCR_TWINT);
 2ea:	a6 e5       	ldi	r26, 0x56	; 86
 2ec:	b0 e0       	ldi	r27, 0x00	; 0
 2ee:	e6 e5       	ldi	r30, 0x56	; 86
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,TWCR_TWINT))==0);
 2f8:	e6 e5       	ldi	r30, 0x56	; 86
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	88 23       	and	r24, r24
 300:	dc f7       	brge	.-10     	; 0x2f8 <TWI_MasterReadDataByte+0x2a>

		if((TWSR & 0xF8) !=  MSTR_RD_BYTE_WITH_ACK)
 302:	e1 e2       	ldi	r30, 0x21	; 33
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	80 81       	ld	r24, Z
 308:	88 2f       	mov	r24, r24
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	88 7f       	andi	r24, 0xF8	; 248
 30e:	90 70       	andi	r25, 0x00	; 0
 310:	80 35       	cpi	r24, 0x50	; 80
 312:	91 05       	cpc	r25, r1
 314:	11 f0       	breq	.+4      	; 0x31a <TWI_MasterReadDataByte+0x4c>
		{
			Local_ErrorState = ES_NOK;
 316:	19 82       	std	Y+1, r1	; 0x01
 318:	09 c0       	rjmp	.+18     	; 0x32c <TWI_MasterReadDataByte+0x5e>
		}
		else
		{
			*Copy_pu8DataByte = TWDR;
 31a:	e3 e2       	ldi	r30, 0x23	; 35
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	ea 81       	ldd	r30, Y+2	; 0x02
 322:	fb 81       	ldd	r31, Y+3	; 0x03
 324:	80 83       	st	Z, r24
 326:	02 c0       	rjmp	.+4      	; 0x32c <TWI_MasterReadDataByte+0x5e>
		}
	}
	else
	{
		Local_ErrorState = ES_NULL_POINTER;
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

0000033a <TWI_SlaveWriteDataByte>:

ES_t TWI_SlaveWriteDataByte(u8 Copy_u8DataByte)
{
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	00 d0       	rcall	.+0      	; 0x340 <TWI_SlaveWriteDataByte+0x6>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	89 83       	std	Y+1, r24	; 0x01
	TWDR = Copy_u8DataByte;
 34a:	e3 e2       	ldi	r30, 0x23	; 35
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	80 83       	st	Z, r24
	SET_BIT(TWCR,TWCR_TWINT);
 352:	a6 e5       	ldi	r26, 0x56	; 86
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	e6 e5       	ldi	r30, 0x56	; 86
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	8c 93       	st	X, r24
	while((GET_BIT(TWCR,TWCR_TWINT))==0);
 360:	e6 e5       	ldi	r30, 0x56	; 86
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	88 23       	and	r24, r24
 368:	dc f7       	brge	.-10     	; 0x360 <TWI_SlaveWriteDataByte+0x26>

	if((TWSR & 0xF8) !=  SLAVE_BYTE_TRANSMITTED)
 36a:	e1 e2       	ldi	r30, 0x21	; 33
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	88 2f       	mov	r24, r24
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	90 70       	andi	r25, 0x00	; 0
 378:	88 3b       	cpi	r24, 0xB8	; 184
 37a:	91 05       	cpc	r25, r1
 37c:	09 f0       	breq	.+2      	; 0x380 <TWI_SlaveWriteDataByte+0x46>
	{
		Local_ErrorState = ES_NOK;
 37e:	19 82       	std	Y+1, r1	; 0x01
	}
	else
	{

	}
	return Local_ErrorState;
 380:	89 81       	ldd	r24, Y+1	; 0x01
}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	cf 91       	pop	r28
 388:	df 91       	pop	r29
 38a:	08 95       	ret

0000038c <TWI_SlaveReadDataByte>:

ES_t TWI_SlaveReadDataByte(u8 *Copy_pu8DataByte)
{
 38c:	df 93       	push	r29
 38e:	cf 93       	push	r28
 390:	00 d0       	rcall	.+0      	; 0x392 <TWI_SlaveReadDataByte+0x6>
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	9b 83       	std	Y+3, r25	; 0x03
 39a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_OK;
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8DataByte != NULL)
 3a0:	8a 81       	ldd	r24, Y+2	; 0x02
 3a2:	9b 81       	ldd	r25, Y+3	; 0x03
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	b1 f1       	breq	.+108    	; 0x414 <TWI_SlaveReadDataByte+0x88>
	{
		SET_BIT(TWCR,TWCR_TWINT);
 3a8:	a6 e5       	ldi	r26, 0x56	; 86
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	e6 e5       	ldi	r30, 0x56	; 86
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	80 81       	ld	r24, Z
 3b2:	80 68       	ori	r24, 0x80	; 128
 3b4:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,TWCR_TWINT))==0);
 3b6:	e6 e5       	ldi	r30, 0x56	; 86
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	80 81       	ld	r24, Z
 3bc:	88 23       	and	r24, r24
 3be:	dc f7       	brge	.-10     	; 0x3b6 <TWI_SlaveReadDataByte+0x2a>

		if((TWSR & 0xF8) !=  SLAVE_ADD_RCVD_WR_REQ)
 3c0:	e1 e2       	ldi	r30, 0x21	; 33
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	80 81       	ld	r24, Z
 3c6:	88 2f       	mov	r24, r24
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	88 7f       	andi	r24, 0xF8	; 248
 3cc:	90 70       	andi	r25, 0x00	; 0
 3ce:	80 36       	cpi	r24, 0x60	; 96
 3d0:	91 05       	cpc	r25, r1
 3d2:	09 f0       	breq	.+2      	; 0x3d6 <TWI_SlaveReadDataByte+0x4a>
		{
			Local_ErrorState = ES_NOK;
 3d4:	19 82       	std	Y+1, r1	; 0x01
		}
		SET_BIT(TWCR,TWCR_TWINT);
 3d6:	a6 e5       	ldi	r26, 0x56	; 86
 3d8:	b0 e0       	ldi	r27, 0x00	; 0
 3da:	e6 e5       	ldi	r30, 0x56	; 86
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	80 81       	ld	r24, Z
 3e0:	80 68       	ori	r24, 0x80	; 128
 3e2:	8c 93       	st	X, r24
		while((GET_BIT(TWCR,TWCR_TWINT))==0);
 3e4:	e6 e5       	ldi	r30, 0x56	; 86
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 23       	and	r24, r24
 3ec:	dc f7       	brge	.-10     	; 0x3e4 <TWI_SlaveReadDataByte+0x58>

		if((TWSR & 0xF8) !=  SLAVE_DATA_RECEIVED)
 3ee:	e1 e2       	ldi	r30, 0x21	; 33
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	88 2f       	mov	r24, r24
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	88 7f       	andi	r24, 0xF8	; 248
 3fa:	90 70       	andi	r25, 0x00	; 0
 3fc:	80 38       	cpi	r24, 0x80	; 128
 3fe:	91 05       	cpc	r25, r1
 400:	11 f0       	breq	.+4      	; 0x406 <TWI_SlaveReadDataByte+0x7a>
		{
			Local_ErrorState = ES_NOK;
 402:	19 82       	std	Y+1, r1	; 0x01
 404:	09 c0       	rjmp	.+18     	; 0x418 <TWI_SlaveReadDataByte+0x8c>
		}
		else
		{
			*Copy_pu8DataByte = TWDR;
 406:	e3 e2       	ldi	r30, 0x23	; 35
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	ea 81       	ldd	r30, Y+2	; 0x02
 40e:	fb 81       	ldd	r31, Y+3	; 0x03
 410:	80 83       	st	Z, r24
 412:	02 c0       	rjmp	.+4      	; 0x418 <TWI_SlaveReadDataByte+0x8c>
		}

	}
	else
	{
		Local_ErrorState = ES_NULL_POINTER;
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 418:	89 81       	ldd	r24, Y+1	; 0x01
}
 41a:	0f 90       	pop	r0
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	cf 91       	pop	r28
 422:	df 91       	pop	r29
 424:	08 95       	ret

00000426 <TWI_SendStopCondition>:


void TWI_SendStopCondition(void)
{
 426:	df 93       	push	r29
 428:	cf 93       	push	r28
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR, TWCR_TWSTO);
 42e:	a6 e5       	ldi	r26, 0x56	; 86
 430:	b0 e0       	ldi	r27, 0x00	; 0
 432:	e6 e5       	ldi	r30, 0x56	; 86
 434:	f0 e0       	ldi	r31, 0x00	; 0
 436:	80 81       	ld	r24, Z
 438:	80 61       	ori	r24, 0x10	; 16
 43a:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWCR_TWINT);
 43c:	a6 e5       	ldi	r26, 0x56	; 86
 43e:	b0 e0       	ldi	r27, 0x00	; 0
 440:	e6 e5       	ldi	r30, 0x56	; 86
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	80 81       	ld	r24, Z
 446:	80 68       	ori	r24, 0x80	; 128
 448:	8c 93       	st	X, r24
}
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <main>:
 *  Created on: Apr 17, 2025
 *      Author: mylap
 */

int main()
{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62

	return 0;
 458:	80 e0       	ldi	r24, 0x00	; 0
 45a:	90 e0       	ldi	r25, 0x00	; 0
}
 45c:	cf 91       	pop	r28
 45e:	df 91       	pop	r29
 460:	08 95       	ret

00000462 <_exit>:
 462:	f8 94       	cli

00000464 <__stop_program>:
 464:	ff cf       	rjmp	.-2      	; 0x464 <__stop_program>
