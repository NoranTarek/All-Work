
task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001b2  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000003a8  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000065b  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 d7 00 	jmp	0x1ae	; 0x1ae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define DDRB *((char*)0x37)
#define PORTB *((char*)0x38)
#define PINB *((char*)0x36)

int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	61 97       	sbiw	r28, 0x11	; 17
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0;
  96:	ea e3       	ldi	r30, 0x3A	; 58
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
	PORTA = 0xff;
  9c:	eb e3       	ldi	r30, 0x3B	; 59
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	80 83       	st	Z, r24
	int counter = 0;
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	19 82       	std	Y+1, r1	; 0x01
	char seg[] = {0x3f , 0x06 , 0x5B,
			      0x4f , 0x66 , 0x6D,
				  0x7d , 0x07 , 0x7f,
				  0x6f};
  a8:	ce 01       	movw	r24, r28
  aa:	03 96       	adiw	r24, 0x03	; 3
  ac:	9e 87       	std	Y+14, r25	; 0x0e
  ae:	8d 87       	std	Y+13, r24	; 0x0d
  b0:	e0 e6       	ldi	r30, 0x60	; 96
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	f8 8b       	std	Y+16, r31	; 0x10
  b6:	ef 87       	std	Y+15, r30	; 0x0f
  b8:	fa e0       	ldi	r31, 0x0A	; 10
  ba:	f9 8b       	std	Y+17, r31	; 0x11
  bc:	ef 85       	ldd	r30, Y+15	; 0x0f
  be:	f8 89       	ldd	r31, Y+16	; 0x10
  c0:	00 80       	ld	r0, Z
  c2:	8f 85       	ldd	r24, Y+15	; 0x0f
  c4:	98 89       	ldd	r25, Y+16	; 0x10
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	98 8b       	std	Y+16, r25	; 0x10
  ca:	8f 87       	std	Y+15, r24	; 0x0f
  cc:	ed 85       	ldd	r30, Y+13	; 0x0d
  ce:	fe 85       	ldd	r31, Y+14	; 0x0e
  d0:	00 82       	st	Z, r0
  d2:	8d 85       	ldd	r24, Y+13	; 0x0d
  d4:	9e 85       	ldd	r25, Y+14	; 0x0e
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	9e 87       	std	Y+14, r25	; 0x0e
  da:	8d 87       	std	Y+13, r24	; 0x0d
  dc:	99 89       	ldd	r25, Y+17	; 0x11
  de:	91 50       	subi	r25, 0x01	; 1
  e0:	99 8b       	std	Y+17, r25	; 0x11
  e2:	e9 89       	ldd	r30, Y+17	; 0x11
  e4:	ee 23       	and	r30, r30
  e6:	51 f7       	brne	.-44     	; 0xbc <main+0x3a>
	DDRB = 0xff;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 83       	st	Z, r24
	PORTB = 0;
  f0:	e8 e3       	ldi	r30, 0x38	; 56
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
	PORTB = seg[counter];
  f6:	a8 e3       	ldi	r26, 0x38	; 56
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	3a 81       	ldd	r19, Y+2	; 0x02
  fe:	ce 01       	movw	r24, r28
 100:	03 96       	adiw	r24, 0x03	; 3
 102:	fc 01       	movw	r30, r24
 104:	e2 0f       	add	r30, r18
 106:	f3 1f       	adc	r31, r19
 108:	80 81       	ld	r24, Z
 10a:	8c 93       	st	X, r24

	while(1)
	{
		if(((PINA>>0)&1) == 0)
 10c:	e9 e3       	ldi	r30, 0x39	; 57
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	81 70       	andi	r24, 0x01	; 1
 118:	90 70       	andi	r25, 0x00	; 0
 11a:	00 97       	sbiw	r24, 0x00	; 0
 11c:	f1 f4       	brne	.+60     	; 0x15a <main+0xd8>
		{
			if(counter < 9)
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	89 30       	cpi	r24, 0x09	; 9
 124:	91 05       	cpc	r25, r1
 126:	94 f7       	brge	.-28     	; 0x10c <main+0x8a>
			{
				counter += 1;
 128:	89 81       	ldd	r24, Y+1	; 0x01
 12a:	9a 81       	ldd	r25, Y+2	; 0x02
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	9a 83       	std	Y+2, r25	; 0x02
 130:	89 83       	std	Y+1, r24	; 0x01
				PORTB = seg[counter];
 132:	a8 e3       	ldi	r26, 0x38	; 56
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	29 81       	ldd	r18, Y+1	; 0x01
 138:	3a 81       	ldd	r19, Y+2	; 0x02
 13a:	ce 01       	movw	r24, r28
 13c:	03 96       	adiw	r24, 0x03	; 3
 13e:	fc 01       	movw	r30, r24
 140:	e2 0f       	add	r30, r18
 142:	f3 1f       	adc	r31, r19
 144:	80 81       	ld	r24, Z
 146:	8c 93       	st	X, r24
			}else{
				continue;
			}
			while(((PINA>>0)&1) == 0);
 148:	e9 e3       	ldi	r30, 0x39	; 57
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 70       	andi	r25, 0x00	; 0
 156:	00 97       	sbiw	r24, 0x00	; 0
 158:	b9 f3       	breq	.-18     	; 0x148 <main+0xc6>
		}if(((PINA>>1)&1) == 0)
 15a:	e9 e3       	ldi	r30, 0x39	; 57
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	86 95       	lsr	r24
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	81 70       	andi	r24, 0x01	; 1
 168:	90 70       	andi	r25, 0x00	; 0
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	79 f6       	brne	.-98     	; 0x10c <main+0x8a>
		{
			if(counter > 0)
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	18 16       	cp	r1, r24
 174:	19 06       	cpc	r1, r25
 176:	54 f6       	brge	.-108    	; 0x10c <main+0x8a>
			{
				counter -= 1;
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	9a 81       	ldd	r25, Y+2	; 0x02
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	9a 83       	std	Y+2, r25	; 0x02
 180:	89 83       	std	Y+1, r24	; 0x01
				PORTB = seg[counter];
 182:	a8 e3       	ldi	r26, 0x38	; 56
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	29 81       	ldd	r18, Y+1	; 0x01
 188:	3a 81       	ldd	r19, Y+2	; 0x02
 18a:	ce 01       	movw	r24, r28
 18c:	03 96       	adiw	r24, 0x03	; 3
 18e:	fc 01       	movw	r30, r24
 190:	e2 0f       	add	r30, r18
 192:	f3 1f       	adc	r31, r19
 194:	80 81       	ld	r24, Z
 196:	8c 93       	st	X, r24
			}else{
				continue;
			}
			while(((PINA>>1)&1) == 0);
 198:	e9 e3       	ldi	r30, 0x39	; 57
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	86 95       	lsr	r24
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	81 70       	andi	r24, 0x01	; 1
 1a6:	90 70       	andi	r25, 0x00	; 0
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	b1 f3       	breq	.-20     	; 0x198 <main+0x116>
 1ac:	af cf       	rjmp	.-162    	; 0x10c <main+0x8a>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
