
USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000240a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000240a  0000249e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800068  00800068  000024a6  2**0
                  ALLOC
  3 .stab         00002040  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dea  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000052d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005582  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000071cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008e64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009251  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009a1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 16 11 	jmp	0x222c	; 0x222c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a1 37       	cpi	r26, 0x71	; 113
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ea e0       	ldi	r30, 0x0A	; 10
      78:	f4 e2       	ldi	r31, 0x24	; 36
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c3 11 	call	0x2386	; 0x2386 <main>
      8a:	0c 94 03 12 	jmp	0x2406	; 0x2406 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cc 11 	jmp	0x2398	; 0x2398 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 11 	jmp	0x23b0	; 0x23b0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f4 11 	jmp	0x23e8	; 0x23e8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 dc 11 	jmp	0x23b8	; 0x23b8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f8 11 	jmp	0x23f0	; 0x23f0 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
     b50:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b5a:	e7 e3       	ldi	r30, 0x37	; 55
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b62:	e4 e3       	ldi	r30, 0x34	; 52
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b6a:	e1 e3       	ldi	r30, 0x31	; 49
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	8f ef       	ldi	r24, 0xFF	; 255
     b70:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b72:	eb e3       	ldi	r30, 0x3B	; 59
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b78:	e8 e3       	ldi	r30, 0x38	; 56
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b7e:	e5 e3       	ldi	r30, 0x35	; 53
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b84:	e2 e3       	ldi	r30, 0x32	; 50
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
}
     b90:	0f 90       	pop	r0
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <DIO_enuSetPortDirection+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <DIO_enuSetPortDirection+0x8>
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     baa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	a8 f5       	brcc	.+106    	; 0xc1c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	28 2f       	mov	r18, r24
     bb6:	30 e0       	ldi	r19, 0x00	; 0
     bb8:	3d 83       	std	Y+5, r19	; 0x05
     bba:	2c 83       	std	Y+4, r18	; 0x04
     bbc:	8c 81       	ldd	r24, Y+4	; 0x04
     bbe:	9d 81       	ldd	r25, Y+5	; 0x05
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 05       	cpc	r25, r1
     bc4:	d1 f0       	breq	.+52     	; 0xbfa <DIO_enuSetPortDirection+0x62>
     bc6:	2c 81       	ldd	r18, Y+4	; 0x04
     bc8:	3d 81       	ldd	r19, Y+5	; 0x05
     bca:	22 30       	cpi	r18, 0x02	; 2
     bcc:	31 05       	cpc	r19, r1
     bce:	2c f4       	brge	.+10     	; 0xbda <DIO_enuSetPortDirection+0x42>
     bd0:	8c 81       	ldd	r24, Y+4	; 0x04
     bd2:	9d 81       	ldd	r25, Y+5	; 0x05
     bd4:	00 97       	sbiw	r24, 0x00	; 0
     bd6:	61 f0       	breq	.+24     	; 0xbf0 <DIO_enuSetPortDirection+0x58>
     bd8:	1e c0       	rjmp	.+60     	; 0xc16 <DIO_enuSetPortDirection+0x7e>
     bda:	2c 81       	ldd	r18, Y+4	; 0x04
     bdc:	3d 81       	ldd	r19, Y+5	; 0x05
     bde:	22 30       	cpi	r18, 0x02	; 2
     be0:	31 05       	cpc	r19, r1
     be2:	81 f0       	breq	.+32     	; 0xc04 <DIO_enuSetPortDirection+0x6c>
     be4:	8c 81       	ldd	r24, Y+4	; 0x04
     be6:	9d 81       	ldd	r25, Y+5	; 0x05
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	91 05       	cpc	r25, r1
     bec:	81 f0       	breq	.+32     	; 0xc0e <DIO_enuSetPortDirection+0x76>
     bee:	13 c0       	rjmp	.+38     	; 0xc16 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     bf0:	ea e3       	ldi	r30, 0x3A	; 58
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	8b 81       	ldd	r24, Y+3	; 0x03
     bf6:	80 83       	st	Z, r24
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     bfa:	e7 e3       	ldi	r30, 0x37	; 55
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	80 83       	st	Z, r24
     c02:	09 c0       	rjmp	.+18     	; 0xc16 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     c04:	e4 e3       	ldi	r30, 0x34	; 52
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	8b 81       	ldd	r24, Y+3	; 0x03
     c0a:	80 83       	st	Z, r24
     c0c:	04 c0       	rjmp	.+8      	; 0xc16 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     c0e:	e1 e3       	ldi	r30, 0x31	; 49
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	8b 81       	ldd	r24, Y+3	; 0x03
     c14:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	89 83       	std	Y+1, r24	; 0x01
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c1c:	83 e0       	ldi	r24, 0x03	; 3
     c1e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c20:	89 81       	ldd	r24, Y+1	; 0x01
}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <DIO_enuSetPortValue+0x6>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <DIO_enuSetPortValue+0x8>
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	8a 83       	std	Y+2, r24	; 0x02
     c42:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c44:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	84 30       	cpi	r24, 0x04	; 4
     c4a:	a8 f5       	brcc	.+106    	; 0xcb6 <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
     c4c:	8a 81       	ldd	r24, Y+2	; 0x02
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	3d 83       	std	Y+5, r19	; 0x05
     c54:	2c 83       	std	Y+4, r18	; 0x04
     c56:	8c 81       	ldd	r24, Y+4	; 0x04
     c58:	9d 81       	ldd	r25, Y+5	; 0x05
     c5a:	81 30       	cpi	r24, 0x01	; 1
     c5c:	91 05       	cpc	r25, r1
     c5e:	d1 f0       	breq	.+52     	; 0xc94 <DIO_enuSetPortValue+0x62>
     c60:	2c 81       	ldd	r18, Y+4	; 0x04
     c62:	3d 81       	ldd	r19, Y+5	; 0x05
     c64:	22 30       	cpi	r18, 0x02	; 2
     c66:	31 05       	cpc	r19, r1
     c68:	2c f4       	brge	.+10     	; 0xc74 <DIO_enuSetPortValue+0x42>
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	9d 81       	ldd	r25, Y+5	; 0x05
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	61 f0       	breq	.+24     	; 0xc8a <DIO_enuSetPortValue+0x58>
     c72:	1e c0       	rjmp	.+60     	; 0xcb0 <DIO_enuSetPortValue+0x7e>
     c74:	2c 81       	ldd	r18, Y+4	; 0x04
     c76:	3d 81       	ldd	r19, Y+5	; 0x05
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	81 f0       	breq	.+32     	; 0xc9e <DIO_enuSetPortValue+0x6c>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	83 30       	cpi	r24, 0x03	; 3
     c84:	91 05       	cpc	r25, r1
     c86:	81 f0       	breq	.+32     	; 0xca8 <DIO_enuSetPortValue+0x76>
     c88:	13 c0       	rjmp	.+38     	; 0xcb0 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     c8a:	eb e3       	ldi	r30, 0x3B	; 59
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	80 83       	st	Z, r24
     c92:	0e c0       	rjmp	.+28     	; 0xcb0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     c94:	e8 e3       	ldi	r30, 0x38	; 56
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	8b 81       	ldd	r24, Y+3	; 0x03
     c9a:	80 83       	st	Z, r24
     c9c:	09 c0       	rjmp	.+18     	; 0xcb0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     c9e:	e5 e3       	ldi	r30, 0x35	; 53
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	8b 81       	ldd	r24, Y+3	; 0x03
     ca4:	80 83       	st	Z, r24
     ca6:	04 c0       	rjmp	.+8      	; 0xcb0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     ca8:	e2 e3       	ldi	r30, 0x32	; 50
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	8b 81       	ldd	r24, Y+3	; 0x03
     cae:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	02 c0       	rjmp	.+4      	; 0xcba <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     cba:	89 81       	ldd	r24, Y+1	; 0x01
}
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	08 95       	ret

00000ccc <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
     ccc:	df 93       	push	r29
     cce:	cf 93       	push	r28
     cd0:	00 d0       	rcall	.+0      	; 0xcd2 <DIO_enuTogPort+0x6>
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <DIO_enuTogPort+0x8>
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     cda:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	84 30       	cpi	r24, 0x04	; 4
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <DIO_enuTogPort+0x18>
     ce2:	41 c0       	rjmp	.+130    	; 0xd66 <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
     ce4:	8a 81       	ldd	r24, Y+2	; 0x02
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3c 83       	std	Y+4, r19	; 0x04
     cec:	2b 83       	std	Y+3, r18	; 0x03
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	9c 81       	ldd	r25, Y+4	; 0x04
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	e9 f0       	breq	.+58     	; 0xd32 <DIO_enuTogPort+0x66>
     cf8:	2b 81       	ldd	r18, Y+3	; 0x03
     cfa:	3c 81       	ldd	r19, Y+4	; 0x04
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	2c f4       	brge	.+10     	; 0xd0c <DIO_enuTogPort+0x40>
     d02:	8b 81       	ldd	r24, Y+3	; 0x03
     d04:	9c 81       	ldd	r25, Y+4	; 0x04
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	61 f0       	breq	.+24     	; 0xd22 <DIO_enuTogPort+0x56>
     d0a:	2a c0       	rjmp	.+84     	; 0xd60 <DIO_enuTogPort+0x94>
     d0c:	2b 81       	ldd	r18, Y+3	; 0x03
     d0e:	3c 81       	ldd	r19, Y+4	; 0x04
     d10:	22 30       	cpi	r18, 0x02	; 2
     d12:	31 05       	cpc	r19, r1
     d14:	b1 f0       	breq	.+44     	; 0xd42 <DIO_enuTogPort+0x76>
     d16:	8b 81       	ldd	r24, Y+3	; 0x03
     d18:	9c 81       	ldd	r25, Y+4	; 0x04
     d1a:	83 30       	cpi	r24, 0x03	; 3
     d1c:	91 05       	cpc	r25, r1
     d1e:	c9 f0       	breq	.+50     	; 0xd52 <DIO_enuTogPort+0x86>
     d20:	1f c0       	rjmp	.+62     	; 0xd60 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
     d22:	ab e3       	ldi	r26, 0x3B	; 59
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	eb e3       	ldi	r30, 0x3B	; 59
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	80 95       	com	r24
     d2e:	8c 93       	st	X, r24
     d30:	17 c0       	rjmp	.+46     	; 0xd60 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
     d32:	a8 e3       	ldi	r26, 0x38	; 56
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e8 e3       	ldi	r30, 0x38	; 56
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 95       	com	r24
     d3e:	8c 93       	st	X, r24
     d40:	0f c0       	rjmp	.+30     	; 0xd60 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
     d42:	a5 e3       	ldi	r26, 0x35	; 53
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e5 e3       	ldi	r30, 0x35	; 53
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 95       	com	r24
     d4e:	8c 93       	st	X, r24
     d50:	07 c0       	rjmp	.+14     	; 0xd60 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
     d52:	a2 e3       	ldi	r26, 0x32	; 50
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e2 e3       	ldi	r30, 0x32	; 50
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 95       	com	r24
     d5e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	02 c0       	rjmp	.+4      	; 0xd6a <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d6c:	0f 90       	pop	r0
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
     d7a:	df 93       	push	r29
     d7c:	cf 93       	push	r28
     d7e:	00 d0       	rcall	.+0      	; 0xd80 <DIO_enuGetPortValue+0x6>
     d80:	00 d0       	rcall	.+0      	; 0xd82 <DIO_enuGetPortValue+0x8>
     d82:	00 d0       	rcall	.+0      	; 0xd84 <DIO_enuGetPortValue+0xa>
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
     d88:	8a 83       	std	Y+2, r24	; 0x02
     d8a:	7c 83       	std	Y+4, r23	; 0x04
     d8c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d8e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	9c 81       	ldd	r25, Y+4	; 0x04
     d94:	00 97       	sbiw	r24, 0x00	; 0
     d96:	09 f4       	brne	.+2      	; 0xd9a <DIO_enuGetPortValue+0x20>
     d98:	43 c0       	rjmp	.+134    	; 0xe20 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	84 30       	cpi	r24, 0x04	; 4
     d9e:	e8 f5       	brcc	.+122    	; 0xe1a <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	28 2f       	mov	r18, r24
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	3e 83       	std	Y+6, r19	; 0x06
     da8:	2d 83       	std	Y+5, r18	; 0x05
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	91 05       	cpc	r25, r1
     db2:	e1 f0       	breq	.+56     	; 0xdec <DIO_enuGetPortValue+0x72>
     db4:	2d 81       	ldd	r18, Y+5	; 0x05
     db6:	3e 81       	ldd	r19, Y+6	; 0x06
     db8:	22 30       	cpi	r18, 0x02	; 2
     dba:	31 05       	cpc	r19, r1
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <DIO_enuGetPortValue+0x4e>
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	00 97       	sbiw	r24, 0x00	; 0
     dc4:	61 f0       	breq	.+24     	; 0xdde <DIO_enuGetPortValue+0x64>
     dc6:	26 c0       	rjmp	.+76     	; 0xe14 <DIO_enuGetPortValue+0x9a>
     dc8:	2d 81       	ldd	r18, Y+5	; 0x05
     dca:	3e 81       	ldd	r19, Y+6	; 0x06
     dcc:	22 30       	cpi	r18, 0x02	; 2
     dce:	31 05       	cpc	r19, r1
     dd0:	a1 f0       	breq	.+40     	; 0xdfa <DIO_enuGetPortValue+0x80>
     dd2:	8d 81       	ldd	r24, Y+5	; 0x05
     dd4:	9e 81       	ldd	r25, Y+6	; 0x06
     dd6:	83 30       	cpi	r24, 0x03	; 3
     dd8:	91 05       	cpc	r25, r1
     dda:	b1 f0       	breq	.+44     	; 0xe08 <DIO_enuGetPortValue+0x8e>
     ddc:	1b c0       	rjmp	.+54     	; 0xe14 <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
     dde:	e9 e3       	ldi	r30, 0x39	; 57
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	eb 81       	ldd	r30, Y+3	; 0x03
     de6:	fc 81       	ldd	r31, Y+4	; 0x04
     de8:	80 83       	st	Z, r24
     dea:	14 c0       	rjmp	.+40     	; 0xe14 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
     dec:	e6 e3       	ldi	r30, 0x36	; 54
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	eb 81       	ldd	r30, Y+3	; 0x03
     df4:	fc 81       	ldd	r31, Y+4	; 0x04
     df6:	80 83       	st	Z, r24
     df8:	0d c0       	rjmp	.+26     	; 0xe14 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
     dfa:	e3 e3       	ldi	r30, 0x33	; 51
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	80 83       	st	Z, r24
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
     e08:	e0 e3       	ldi	r30, 0x30	; 48
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	eb 81       	ldd	r30, Y+3	; 0x03
     e10:	fc 81       	ldd	r31, Y+4	; 0x04
     e12:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
     e1a:	83 e0       	ldi	r24, 0x03	; 3
     e1c:	89 83       	std	Y+1, r24	; 0x01
     e1e:	02 c0       	rjmp	.+4      	; 0xe24 <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e24:	89 81       	ldd	r24, Y+1	; 0x01
}
     e26:	26 96       	adiw	r28, 0x06	; 6
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	08 95       	ret

00000e38 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
     e38:	df 93       	push	r29
     e3a:	cf 93       	push	r28
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <DIO_enuSetPinDirection+0x6>
     e3e:	00 d0       	rcall	.+0      	; 0xe40 <DIO_enuSetPinDirection+0x8>
     e40:	00 d0       	rcall	.+0      	; 0xe42 <DIO_enuSetPinDirection+0xa>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	8a 83       	std	Y+2, r24	; 0x02
     e48:	6b 83       	std	Y+3, r22	; 0x03
     e4a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e4c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	08 f0       	brcs	.+2      	; 0xe56 <DIO_enuSetPinDirection+0x1e>
     e54:	d1 c0       	rjmp	.+418    	; 0xff8 <DIO_enuSetPinDirection+0x1c0>
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <DIO_enuSetPinDirection+0x26>
     e5c:	cd c0       	rjmp	.+410    	; 0xff8 <DIO_enuSetPinDirection+0x1c0>
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	08 f0       	brcs	.+2      	; 0xe66 <DIO_enuSetPinDirection+0x2e>
     e64:	c9 c0       	rjmp	.+402    	; 0xff8 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	3e 83       	std	Y+6, r19	; 0x06
     e6e:	2d 83       	std	Y+5, r18	; 0x05
     e70:	6d 81       	ldd	r22, Y+5	; 0x05
     e72:	7e 81       	ldd	r23, Y+6	; 0x06
     e74:	61 30       	cpi	r22, 0x01	; 1
     e76:	71 05       	cpc	r23, r1
     e78:	09 f4       	brne	.+2      	; 0xe7c <DIO_enuSetPinDirection+0x44>
     e7a:	41 c0       	rjmp	.+130    	; 0xefe <DIO_enuSetPinDirection+0xc6>
     e7c:	8d 81       	ldd	r24, Y+5	; 0x05
     e7e:	9e 81       	ldd	r25, Y+6	; 0x06
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	91 05       	cpc	r25, r1
     e84:	34 f4       	brge	.+12     	; 0xe92 <DIO_enuSetPinDirection+0x5a>
     e86:	2d 81       	ldd	r18, Y+5	; 0x05
     e88:	3e 81       	ldd	r19, Y+6	; 0x06
     e8a:	21 15       	cp	r18, r1
     e8c:	31 05       	cpc	r19, r1
     e8e:	71 f0       	breq	.+28     	; 0xeac <DIO_enuSetPinDirection+0x74>
     e90:	b0 c0       	rjmp	.+352    	; 0xff2 <DIO_enuSetPinDirection+0x1ba>
     e92:	6d 81       	ldd	r22, Y+5	; 0x05
     e94:	7e 81       	ldd	r23, Y+6	; 0x06
     e96:	62 30       	cpi	r22, 0x02	; 2
     e98:	71 05       	cpc	r23, r1
     e9a:	09 f4       	brne	.+2      	; 0xe9e <DIO_enuSetPinDirection+0x66>
     e9c:	59 c0       	rjmp	.+178    	; 0xf50 <DIO_enuSetPinDirection+0x118>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_enuSetPinDirection+0x72>
     ea8:	7c c0       	rjmp	.+248    	; 0xfa2 <DIO_enuSetPinDirection+0x16a>
     eaa:	a3 c0       	rjmp	.+326    	; 0xff2 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     eac:	aa e3       	ldi	r26, 0x3A	; 58
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	ea e3       	ldi	r30, 0x3A	; 58
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_enuSetPinDirection+0x90>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	2a 95       	dec	r18
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_enuSetPinDirection+0x8c>
     ecc:	80 95       	com	r24
     ece:	84 23       	and	r24, r20
     ed0:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
     ed2:	aa e3       	ldi	r26, 0x3A	; 58
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ea e3       	ldi	r30, 0x3A	; 58
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	88 2f       	mov	r24, r24
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	b9 01       	movw	r22, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_enuSetPinDirection+0xba>
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	8a 95       	dec	r24
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_enuSetPinDirection+0xb6>
     ef6:	cb 01       	movw	r24, r22
     ef8:	84 2b       	or	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	7a c0       	rjmp	.+244    	; 0xff2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     efe:	a7 e3       	ldi	r26, 0x37	; 55
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e7 e3       	ldi	r30, 0x37	; 55
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_enuSetPinDirection+0xe2>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	2a 95       	dec	r18
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_enuSetPinDirection+0xde>
     f1e:	80 95       	com	r24
     f20:	84 23       	and	r24, r20
     f22:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
     f24:	a7 e3       	ldi	r26, 0x37	; 55
     f26:	b0 e0       	ldi	r27, 0x00	; 0
     f28:	e7 e3       	ldi	r30, 0x37	; 55
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	48 2f       	mov	r20, r24
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	88 2f       	mov	r24, r24
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	b9 01       	movw	r22, r18
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <DIO_enuSetPinDirection+0x10c>
     f40:	66 0f       	add	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	8a 95       	dec	r24
     f46:	e2 f7       	brpl	.-8      	; 0xf40 <DIO_enuSetPinDirection+0x108>
     f48:	cb 01       	movw	r24, r22
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	51 c0       	rjmp	.+162    	; 0xff2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f50:	a4 e3       	ldi	r26, 0x34	; 52
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e3       	ldi	r30, 0x34	; 52
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_enuSetPinDirection+0x134>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	2a 95       	dec	r18
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_enuSetPinDirection+0x130>
     f70:	80 95       	com	r24
     f72:	84 23       	and	r24, r20
     f74:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
     f76:	a4 e3       	ldi	r26, 0x34	; 52
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e4 e3       	ldi	r30, 0x34	; 52
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	b9 01       	movw	r22, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_enuSetPinDirection+0x15e>
     f92:	66 0f       	add	r22, r22
     f94:	77 1f       	adc	r23, r23
     f96:	8a 95       	dec	r24
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_enuSetPinDirection+0x15a>
     f9a:	cb 01       	movw	r24, r22
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	28 c0       	rjmp	.+80     	; 0xff2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     fa2:	a1 e3       	ldi	r26, 0x31	; 49
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e1 e3       	ldi	r30, 0x31	; 49
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <DIO_enuSetPinDirection+0x186>
     fba:	88 0f       	add	r24, r24
     fbc:	99 1f       	adc	r25, r25
     fbe:	2a 95       	dec	r18
     fc0:	e2 f7       	brpl	.-8      	; 0xfba <DIO_enuSetPinDirection+0x182>
     fc2:	80 95       	com	r24
     fc4:	84 23       	and	r24, r20
     fc6:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
     fc8:	a1 e3       	ldi	r26, 0x31	; 49
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e1 e3       	ldi	r30, 0x31	; 49
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	48 2f       	mov	r20, r24
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8b 81       	ldd	r24, Y+3	; 0x03
     fdc:	88 2f       	mov	r24, r24
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <DIO_enuSetPinDirection+0x1b0>
     fe4:	66 0f       	add	r22, r22
     fe6:	77 1f       	adc	r23, r23
     fe8:	8a 95       	dec	r24
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <DIO_enuSetPinDirection+0x1ac>
     fec:	cb 01       	movw	r24, r22
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	89 83       	std	Y+1, r24	; 0x01
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
     ffe:	26 96       	adiw	r28, 0x06	; 6
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <DIO_enuSetPinValue+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <DIO_enuSetPinValue+0x8>
    1018:	00 d0       	rcall	.+0      	; 0x101a <DIO_enuSetPinValue+0xa>
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	8a 83       	std	Y+2, r24	; 0x02
    1020:	6b 83       	std	Y+3, r22	; 0x03
    1022:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1024:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	84 30       	cpi	r24, 0x04	; 4
    102a:	08 f0       	brcs	.+2      	; 0x102e <DIO_enuSetPinValue+0x1e>
    102c:	d1 c0       	rjmp	.+418    	; 0x11d0 <DIO_enuSetPinValue+0x1c0>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	08 f0       	brcs	.+2      	; 0x1036 <DIO_enuSetPinValue+0x26>
    1034:	cd c0       	rjmp	.+410    	; 0x11d0 <DIO_enuSetPinValue+0x1c0>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	82 30       	cpi	r24, 0x02	; 2
    103a:	08 f0       	brcs	.+2      	; 0x103e <DIO_enuSetPinValue+0x2e>
    103c:	c9 c0       	rjmp	.+402    	; 0x11d0 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3e 83       	std	Y+6, r19	; 0x06
    1046:	2d 83       	std	Y+5, r18	; 0x05
    1048:	6d 81       	ldd	r22, Y+5	; 0x05
    104a:	7e 81       	ldd	r23, Y+6	; 0x06
    104c:	61 30       	cpi	r22, 0x01	; 1
    104e:	71 05       	cpc	r23, r1
    1050:	09 f4       	brne	.+2      	; 0x1054 <DIO_enuSetPinValue+0x44>
    1052:	41 c0       	rjmp	.+130    	; 0x10d6 <DIO_enuSetPinValue+0xc6>
    1054:	8d 81       	ldd	r24, Y+5	; 0x05
    1056:	9e 81       	ldd	r25, Y+6	; 0x06
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	91 05       	cpc	r25, r1
    105c:	34 f4       	brge	.+12     	; 0x106a <DIO_enuSetPinValue+0x5a>
    105e:	2d 81       	ldd	r18, Y+5	; 0x05
    1060:	3e 81       	ldd	r19, Y+6	; 0x06
    1062:	21 15       	cp	r18, r1
    1064:	31 05       	cpc	r19, r1
    1066:	71 f0       	breq	.+28     	; 0x1084 <DIO_enuSetPinValue+0x74>
    1068:	b0 c0       	rjmp	.+352    	; 0x11ca <DIO_enuSetPinValue+0x1ba>
    106a:	6d 81       	ldd	r22, Y+5	; 0x05
    106c:	7e 81       	ldd	r23, Y+6	; 0x06
    106e:	62 30       	cpi	r22, 0x02	; 2
    1070:	71 05       	cpc	r23, r1
    1072:	09 f4       	brne	.+2      	; 0x1076 <DIO_enuSetPinValue+0x66>
    1074:	59 c0       	rjmp	.+178    	; 0x1128 <DIO_enuSetPinValue+0x118>
    1076:	8d 81       	ldd	r24, Y+5	; 0x05
    1078:	9e 81       	ldd	r25, Y+6	; 0x06
    107a:	83 30       	cpi	r24, 0x03	; 3
    107c:	91 05       	cpc	r25, r1
    107e:	09 f4       	brne	.+2      	; 0x1082 <DIO_enuSetPinValue+0x72>
    1080:	7c c0       	rjmp	.+248    	; 0x117a <DIO_enuSetPinValue+0x16a>
    1082:	a3 c0       	rjmp	.+326    	; 0x11ca <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1084:	ab e3       	ldi	r26, 0x3B	; 59
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	eb e3       	ldi	r30, 0x3B	; 59
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_enuSetPinValue+0x90>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	2a 95       	dec	r18
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_enuSetPinValue+0x8c>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	b9 01       	movw	r22, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_enuSetPinValue+0xba>
    10c6:	66 0f       	add	r22, r22
    10c8:	77 1f       	adc	r23, r23
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_enuSetPinValue+0xb6>
    10ce:	cb 01       	movw	r24, r22
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	7a c0       	rjmp	.+244    	; 0x11ca <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    10d6:	a8 e3       	ldi	r26, 0x38	; 56
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e8 e3       	ldi	r30, 0x38	; 56
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_enuSetPinValue+0xe2>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	2a 95       	dec	r18
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_enuSetPinValue+0xde>
    10f6:	80 95       	com	r24
    10f8:	84 23       	and	r24, r20
    10fa:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    10fc:	a8 e3       	ldi	r26, 0x38	; 56
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e8 e3       	ldi	r30, 0x38	; 56
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	88 2f       	mov	r24, r24
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	b9 01       	movw	r22, r18
    1116:	02 c0       	rjmp	.+4      	; 0x111c <DIO_enuSetPinValue+0x10c>
    1118:	66 0f       	add	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	8a 95       	dec	r24
    111e:	e2 f7       	brpl	.-8      	; 0x1118 <DIO_enuSetPinValue+0x108>
    1120:	cb 01       	movw	r24, r22
    1122:	84 2b       	or	r24, r20
    1124:	8c 93       	st	X, r24
    1126:	51 c0       	rjmp	.+162    	; 0x11ca <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1128:	a5 e3       	ldi	r26, 0x35	; 53
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e5 e3       	ldi	r30, 0x35	; 53
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <DIO_enuSetPinValue+0x134>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	2a 95       	dec	r18
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <DIO_enuSetPinValue+0x130>
    1148:	80 95       	com	r24
    114a:	84 23       	and	r24, r20
    114c:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    114e:	a5 e3       	ldi	r26, 0x35	; 53
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e5 e3       	ldi	r30, 0x35	; 53
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8c 81       	ldd	r24, Y+4	; 0x04
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	b9 01       	movw	r22, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_enuSetPinValue+0x15e>
    116a:	66 0f       	add	r22, r22
    116c:	77 1f       	adc	r23, r23
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_enuSetPinValue+0x15a>
    1172:	cb 01       	movw	r24, r22
    1174:	84 2b       	or	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	28 c0       	rjmp	.+80     	; 0x11ca <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    117a:	a2 e3       	ldi	r26, 0x32	; 50
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e2 e3       	ldi	r30, 0x32	; 50
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_enuSetPinValue+0x186>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	2a 95       	dec	r18
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_enuSetPinValue+0x182>
    119a:	80 95       	com	r24
    119c:	84 23       	and	r24, r20
    119e:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    11a0:	a2 e3       	ldi	r26, 0x32	; 50
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e2 e3       	ldi	r30, 0x32	; 50
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8c 81       	ldd	r24, Y+4	; 0x04
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	b9 01       	movw	r22, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_enuSetPinValue+0x1b0>
    11bc:	66 0f       	add	r22, r22
    11be:	77 1f       	adc	r23, r23
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_enuSetPinValue+0x1ac>
    11c4:	cb 01       	movw	r24, r22
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d6:	26 96       	adiw	r28, 0x06	; 6
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_enuTogPin+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_enuTogPin+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	84 30       	cpi	r24, 0x04	; 4
    1200:	08 f0       	brcs	.+2      	; 0x1204 <DIO_enuTogPin+0x1c>
    1202:	75 c0       	rjmp	.+234    	; 0x12ee <DIO_enuTogPin+0x106>
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	88 30       	cpi	r24, 0x08	; 8
    1208:	08 f0       	brcs	.+2      	; 0x120c <DIO_enuTogPin+0x24>
    120a:	71 c0       	rjmp	.+226    	; 0x12ee <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	3d 83       	std	Y+5, r19	; 0x05
    1214:	2c 83       	std	Y+4, r18	; 0x04
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	9d 81       	ldd	r25, Y+5	; 0x05
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	91 05       	cpc	r25, r1
    121e:	49 f1       	breq	.+82     	; 0x1272 <DIO_enuTogPin+0x8a>
    1220:	2c 81       	ldd	r18, Y+4	; 0x04
    1222:	3d 81       	ldd	r19, Y+5	; 0x05
    1224:	22 30       	cpi	r18, 0x02	; 2
    1226:	31 05       	cpc	r19, r1
    1228:	2c f4       	brge	.+10     	; 0x1234 <DIO_enuTogPin+0x4c>
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	61 f0       	breq	.+24     	; 0x124a <DIO_enuTogPin+0x62>
    1232:	5a c0       	rjmp	.+180    	; 0x12e8 <DIO_enuTogPin+0x100>
    1234:	2c 81       	ldd	r18, Y+4	; 0x04
    1236:	3d 81       	ldd	r19, Y+5	; 0x05
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	71 f1       	breq	.+92     	; 0x129a <DIO_enuTogPin+0xb2>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	83 30       	cpi	r24, 0x03	; 3
    1244:	91 05       	cpc	r25, r1
    1246:	e9 f1       	breq	.+122    	; 0x12c2 <DIO_enuTogPin+0xda>
    1248:	4f c0       	rjmp	.+158    	; 0x12e8 <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    124a:	aa e3       	ldi	r26, 0x3A	; 58
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	ea e3       	ldi	r30, 0x3A	; 58
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <DIO_enuTogPin+0x80>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <DIO_enuTogPin+0x7c>
    126c:	84 27       	eor	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	3b c0       	rjmp	.+118    	; 0x12e8 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1272:	a7 e3       	ldi	r26, 0x37	; 55
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e7 e3       	ldi	r30, 0x37	; 55
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <DIO_enuTogPin+0xa8>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <DIO_enuTogPin+0xa4>
    1294:	84 27       	eor	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    129a:	a4 e3       	ldi	r26, 0x34	; 52
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e4 e3       	ldi	r30, 0x34	; 52
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enuTogPin+0xd0>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enuTogPin+0xcc>
    12bc:	84 27       	eor	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	13 c0       	rjmp	.+38     	; 0x12e8 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    12c2:	a1 e3       	ldi	r26, 0x31	; 49
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e1 e3       	ldi	r30, 0x31	; 49
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enuTogPin+0xf8>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_enuTogPin+0xf4>
    12e4:	84 27       	eor	r24, r20
    12e6:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    12ee:	83 e0       	ldi	r24, 0x03	; 3
    12f0:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12f4:	0f 90       	pop	r0
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	0f 90       	pop	r0
    12fe:	cf 91       	pop	r28
    1300:	df 91       	pop	r29
    1302:	08 95       	ret

00001304 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    1304:	df 93       	push	r29
    1306:	cf 93       	push	r28
    1308:	cd b7       	in	r28, 0x3d	; 61
    130a:	de b7       	in	r29, 0x3e	; 62
    130c:	27 97       	sbiw	r28, 0x07	; 7
    130e:	0f b6       	in	r0, 0x3f	; 63
    1310:	f8 94       	cli
    1312:	de bf       	out	0x3e, r29	; 62
    1314:	0f be       	out	0x3f, r0	; 63
    1316:	cd bf       	out	0x3d, r28	; 61
    1318:	8a 83       	std	Y+2, r24	; 0x02
    131a:	6b 83       	std	Y+3, r22	; 0x03
    131c:	5d 83       	std	Y+5, r21	; 0x05
    131e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1320:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1322:	8c 81       	ldd	r24, Y+4	; 0x04
    1324:	9d 81       	ldd	r25, Y+5	; 0x05
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	09 f4       	brne	.+2      	; 0x132c <DIO_enuGetPinValue+0x28>
    132a:	7e c0       	rjmp	.+252    	; 0x1428 <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	84 30       	cpi	r24, 0x04	; 4
    1330:	08 f0       	brcs	.+2      	; 0x1334 <DIO_enuGetPinValue+0x30>
    1332:	77 c0       	rjmp	.+238    	; 0x1422 <DIO_enuGetPinValue+0x11e>
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	88 30       	cpi	r24, 0x08	; 8
    1338:	08 f0       	brcs	.+2      	; 0x133c <DIO_enuGetPinValue+0x38>
    133a:	73 c0       	rjmp	.+230    	; 0x1422 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3f 83       	std	Y+7, r19	; 0x07
    1344:	2e 83       	std	Y+6, r18	; 0x06
    1346:	4e 81       	ldd	r20, Y+6	; 0x06
    1348:	5f 81       	ldd	r21, Y+7	; 0x07
    134a:	41 30       	cpi	r20, 0x01	; 1
    134c:	51 05       	cpc	r21, r1
    134e:	59 f1       	breq	.+86     	; 0x13a6 <DIO_enuGetPinValue+0xa2>
    1350:	8e 81       	ldd	r24, Y+6	; 0x06
    1352:	9f 81       	ldd	r25, Y+7	; 0x07
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_enuGetPinValue+0x62>
    135a:	2e 81       	ldd	r18, Y+6	; 0x06
    135c:	3f 81       	ldd	r19, Y+7	; 0x07
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	69 f0       	breq	.+26     	; 0x137e <DIO_enuGetPinValue+0x7a>
    1364:	5b c0       	rjmp	.+182    	; 0x141c <DIO_enuGetPinValue+0x118>
    1366:	4e 81       	ldd	r20, Y+6	; 0x06
    1368:	5f 81       	ldd	r21, Y+7	; 0x07
    136a:	42 30       	cpi	r20, 0x02	; 2
    136c:	51 05       	cpc	r21, r1
    136e:	79 f1       	breq	.+94     	; 0x13ce <DIO_enuGetPinValue+0xca>
    1370:	8e 81       	ldd	r24, Y+6	; 0x06
    1372:	9f 81       	ldd	r25, Y+7	; 0x07
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <DIO_enuGetPinValue+0x78>
    137a:	3d c0       	rjmp	.+122    	; 0x13f6 <DIO_enuGetPinValue+0xf2>
    137c:	4f c0       	rjmp	.+158    	; 0x141c <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    137e:	e9 e3       	ldi	r30, 0x39	; 57
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <DIO_enuGetPinValue+0x92>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <DIO_enuGetPinValue+0x8e>
    139a:	ca 01       	movw	r24, r20
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	ec 81       	ldd	r30, Y+4	; 0x04
    13a0:	fd 81       	ldd	r31, Y+5	; 0x05
    13a2:	80 83       	st	Z, r24
    13a4:	3b c0       	rjmp	.+118    	; 0x141c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    13a6:	e6 e3       	ldi	r30, 0x36	; 54
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <DIO_enuGetPinValue+0xba>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <DIO_enuGetPinValue+0xb6>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	ec 81       	ldd	r30, Y+4	; 0x04
    13c8:	fd 81       	ldd	r31, Y+5	; 0x05
    13ca:	80 83       	st	Z, r24
    13cc:	27 c0       	rjmp	.+78     	; 0x141c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    13ce:	e3 e3       	ldi	r30, 0x33	; 51
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a9 01       	movw	r20, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <DIO_enuGetPinValue+0xe2>
    13e2:	55 95       	asr	r21
    13e4:	47 95       	ror	r20
    13e6:	8a 95       	dec	r24
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <DIO_enuGetPinValue+0xde>
    13ea:	ca 01       	movw	r24, r20
    13ec:	81 70       	andi	r24, 0x01	; 1
    13ee:	ec 81       	ldd	r30, Y+4	; 0x04
    13f0:	fd 81       	ldd	r31, Y+5	; 0x05
    13f2:	80 83       	st	Z, r24
    13f4:	13 c0       	rjmp	.+38     	; 0x141c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    13f6:	e0 e3       	ldi	r30, 0x30	; 48
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_enuGetPinValue+0x10a>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_enuGetPinValue+0x106>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	ec 81       	ldd	r30, Y+4	; 0x04
    1418:	fd 81       	ldd	r31, Y+5	; 0x05
    141a:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01
    1420:	05 c0       	rjmp	.+10     	; 0x142c <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1422:	83 e0       	ldi	r24, 0x03	; 3
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    142c:	89 81       	ldd	r24, Y+1	; 0x01
}
    142e:	27 96       	adiw	r28, 0x07	; 7
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	cf 91       	pop	r28
    143c:	df 91       	pop	r29
    143e:	08 95       	ret

00001440 <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    1440:	df 93       	push	r29
    1442:	cf 93       	push	r28
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	e9 97       	sbiw	r28, 0x39	; 57
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = ES_NOK;
    1454:	19 ae       	std	Y+57, r1	; 0x39
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	61 e0       	ldi	r22, 0x01	; 1
    145a:	41 e0       	ldi	r20, 0x01	; 1
    145c:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	64 e0       	ldi	r22, 0x04	; 4
    1464:	41 e0       	ldi	r20, 0x01	; 1
    1466:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	67 e0       	ldi	r22, 0x07	; 7
    146e:	41 e0       	ldi	r20, 0x01	; 1
    1470:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    1474:	83 e0       	ldi	r24, 0x03	; 3
    1476:	63 e0       	ldi	r22, 0x03	; 3
    1478:	41 e0       	ldi	r20, 0x01	; 1
    147a:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    147e:	83 e0       	ldi	r24, 0x03	; 3
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	41 e0       	ldi	r20, 0x01	; 1
    1484:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    1488:	82 e0       	ldi	r24, 0x02	; 2
    148a:	67 e0       	ldi	r22, 0x07	; 7
    148c:	41 e0       	ldi	r20, 0x01	; 1
    148e:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    1492:	82 e0       	ldi	r24, 0x02	; 2
    1494:	65 e0       	ldi	r22, 0x05	; 5
    1496:	41 e0       	ldi	r20, 0x01	; 1
    1498:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	ac e0       	ldi	r26, 0x0C	; 12
    14a2:	b2 e4       	ldi	r27, 0x42	; 66
    14a4:	8d ab       	std	Y+53, r24	; 0x35
    14a6:	9e ab       	std	Y+54, r25	; 0x36
    14a8:	af ab       	std	Y+55, r26	; 0x37
    14aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6d a9       	ldd	r22, Y+53	; 0x35
    14ae:	7e a9       	ldd	r23, Y+54	; 0x36
    14b0:	8f a9       	ldd	r24, Y+55	; 0x37
    14b2:	98 ad       	ldd	r25, Y+56	; 0x38
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a e7       	ldi	r20, 0x7A	; 122
    14ba:	53 e4       	ldi	r21, 0x43	; 67
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	89 ab       	std	Y+49, r24	; 0x31
    14c6:	9a ab       	std	Y+50, r25	; 0x32
    14c8:	ab ab       	std	Y+51, r26	; 0x33
    14ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14cc:	69 a9       	ldd	r22, Y+49	; 0x31
    14ce:	7a a9       	ldd	r23, Y+50	; 0x32
    14d0:	8b a9       	ldd	r24, Y+51	; 0x33
    14d2:	9c a9       	ldd	r25, Y+52	; 0x34
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <LCD_enuInit+0xae>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	98 ab       	std	Y+48, r25	; 0x30
    14ea:	8f a7       	std	Y+47, r24	; 0x2f
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    14ee:	69 a9       	ldd	r22, Y+49	; 0x31
    14f0:	7a a9       	ldd	r23, Y+50	; 0x32
    14f2:	8b a9       	ldd	r24, Y+51	; 0x33
    14f4:	9c a9       	ldd	r25, Y+52	; 0x34
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6d a9       	ldd	r22, Y+53	; 0x35
    1508:	7e a9       	ldd	r23, Y+54	; 0x36
    150a:	8f a9       	ldd	r24, Y+55	; 0x37
    150c:	98 ad       	ldd	r25, Y+56	; 0x38
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	98 ab       	std	Y+48, r25	; 0x30
    152c:	8f a7       	std	Y+47, r24	; 0x2f
    152e:	0f c0       	rjmp	.+30     	; 0x154e <LCD_enuInit+0x10e>
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9e a7       	std	Y+46, r25	; 0x2e
    1536:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1538:	8d a5       	ldd	r24, Y+45	; 0x2d
    153a:	9e a5       	ldd	r25, Y+46	; 0x2e
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_enuInit+0xfc>
    1540:	9e a7       	std	Y+46, r25	; 0x2e
    1542:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8f a5       	ldd	r24, Y+47	; 0x2f
    1546:	98 a9       	ldd	r25, Y+48	; 0x30
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	98 ab       	std	Y+48, r25	; 0x30
    154c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1550:	98 a9       	ldd	r25, Y+48	; 0x30
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <LCD_enuInit+0xf0>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	69 a9       	ldd	r22, Y+49	; 0x31
    155a:	7a a9       	ldd	r23, Y+50	; 0x32
    155c:	8b a9       	ldd	r24, Y+51	; 0x33
    155e:	9c a9       	ldd	r25, Y+52	; 0x34
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	98 ab       	std	Y+48, r25	; 0x30
    156a:	8f a7       	std	Y+47, r24	; 0x2f
    156c:	8f a5       	ldd	r24, Y+47	; 0x2f
    156e:	98 a9       	ldd	r25, Y+48	; 0x30
    1570:	9c a7       	std	Y+44, r25	; 0x2c
    1572:	8b a7       	std	Y+43, r24	; 0x2b
    1574:	8b a5       	ldd	r24, Y+43	; 0x2b
    1576:	9c a5       	ldd	r25, Y+44	; 0x2c
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <LCD_enuInit+0x138>
    157c:	9c a7       	std	Y+44, r25	; 0x2c
    157e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	41 e0       	ldi	r20, 0x01	; 1
    1586:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	65 e0       	ldi	r22, 0x05	; 5
    158e:	41 e0       	ldi	r20, 0x01	; 1
    1590:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    1594:	81 e0       	ldi	r24, 0x01	; 1
    1596:	62 e0       	ldi	r22, 0x02	; 2
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	60 e0       	ldi	r22, 0x00	; 0
    15a2:	41 e0       	ldi	r20, 0x01	; 1
    15a4:	0e 94 1c 07 	call	0xe38	; 0xe38 <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    15a8:	88 e3       	ldi	r24, 0x38	; 56
    15aa:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_invidSendCommend>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	a0 e8       	ldi	r26, 0x80	; 128
    15b4:	bf e3       	ldi	r27, 0x3F	; 63
    15b6:	8f a3       	std	Y+39, r24	; 0x27
    15b8:	98 a7       	std	Y+40, r25	; 0x28
    15ba:	a9 a7       	std	Y+41, r26	; 0x29
    15bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15be:	6f a1       	ldd	r22, Y+39	; 0x27
    15c0:	78 a5       	ldd	r23, Y+40	; 0x28
    15c2:	89 a5       	ldd	r24, Y+41	; 0x29
    15c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	4a e7       	ldi	r20, 0x7A	; 122
    15cc:	53 e4       	ldi	r21, 0x43	; 67
    15ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	8b a3       	std	Y+35, r24	; 0x23
    15d8:	9c a3       	std	Y+36, r25	; 0x24
    15da:	ad a3       	std	Y+37, r26	; 0x25
    15dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15de:	6b a1       	ldd	r22, Y+35	; 0x23
    15e0:	7c a1       	ldd	r23, Y+36	; 0x24
    15e2:	8d a1       	ldd	r24, Y+37	; 0x25
    15e4:	9e a1       	ldd	r25, Y+38	; 0x26
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	40 e8       	ldi	r20, 0x80	; 128
    15ec:	5f e3       	ldi	r21, 0x3F	; 63
    15ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f2:	88 23       	and	r24, r24
    15f4:	2c f4       	brge	.+10     	; 0x1600 <LCD_enuInit+0x1c0>
		__ticks = 1;
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9a a3       	std	Y+34, r25	; 0x22
    15fc:	89 a3       	std	Y+33, r24	; 0x21
    15fe:	3f c0       	rjmp	.+126    	; 0x167e <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    1600:	6b a1       	ldd	r22, Y+35	; 0x23
    1602:	7c a1       	ldd	r23, Y+36	; 0x24
    1604:	8d a1       	ldd	r24, Y+37	; 0x25
    1606:	9e a1       	ldd	r25, Y+38	; 0x26
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	3f ef       	ldi	r19, 0xFF	; 255
    160c:	4f e7       	ldi	r20, 0x7F	; 127
    160e:	57 e4       	ldi	r21, 0x47	; 71
    1610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1614:	18 16       	cp	r1, r24
    1616:	4c f5       	brge	.+82     	; 0x166a <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1618:	6f a1       	ldd	r22, Y+39	; 0x27
    161a:	78 a5       	ldd	r23, Y+40	; 0x28
    161c:	89 a5       	ldd	r24, Y+41	; 0x29
    161e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	51 e4       	ldi	r21, 0x41	; 65
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	bc 01       	movw	r22, r24
    1632:	cd 01       	movw	r24, r26
    1634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	9a a3       	std	Y+34, r25	; 0x22
    163e:	89 a3       	std	Y+33, r24	; 0x21
    1640:	0f c0       	rjmp	.+30     	; 0x1660 <LCD_enuInit+0x220>
    1642:	89 e1       	ldi	r24, 0x19	; 25
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	98 a3       	std	Y+32, r25	; 0x20
    1648:	8f 8f       	std	Y+31, r24	; 0x1f
    164a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164c:	98 a1       	ldd	r25, Y+32	; 0x20
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	f1 f7       	brne	.-4      	; 0x164e <LCD_enuInit+0x20e>
    1652:	98 a3       	std	Y+32, r25	; 0x20
    1654:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1656:	89 a1       	ldd	r24, Y+33	; 0x21
    1658:	9a a1       	ldd	r25, Y+34	; 0x22
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	9a a3       	std	Y+34, r25	; 0x22
    165e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1660:	89 a1       	ldd	r24, Y+33	; 0x21
    1662:	9a a1       	ldd	r25, Y+34	; 0x22
    1664:	00 97       	sbiw	r24, 0x00	; 0
    1666:	69 f7       	brne	.-38     	; 0x1642 <LCD_enuInit+0x202>
    1668:	14 c0       	rjmp	.+40     	; 0x1692 <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    166a:	6b a1       	ldd	r22, Y+35	; 0x23
    166c:	7c a1       	ldd	r23, Y+36	; 0x24
    166e:	8d a1       	ldd	r24, Y+37	; 0x25
    1670:	9e a1       	ldd	r25, Y+38	; 0x26
    1672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1676:	dc 01       	movw	r26, r24
    1678:	cb 01       	movw	r24, r22
    167a:	9a a3       	std	Y+34, r25	; 0x22
    167c:	89 a3       	std	Y+33, r24	; 0x21
    167e:	89 a1       	ldd	r24, Y+33	; 0x21
    1680:	9a a1       	ldd	r25, Y+34	; 0x22
    1682:	9e 8f       	std	Y+30, r25	; 0x1e
    1684:	8d 8f       	std	Y+29, r24	; 0x1d
    1686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1688:	9e 8d       	ldd	r25, Y+30	; 0x1e
    168a:	01 97       	sbiw	r24, 0x01	; 1
    168c:	f1 f7       	brne	.-4      	; 0x168a <LCD_enuInit+0x24a>
    168e:	9e 8f       	std	Y+30, r25	; 0x1e
    1690:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    1692:	8f e0       	ldi	r24, 0x0F	; 15
    1694:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_invidSendCommend>
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e8       	ldi	r26, 0x80	; 128
    169e:	bf e3       	ldi	r27, 0x3F	; 63
    16a0:	89 8f       	std	Y+25, r24	; 0x19
    16a2:	9a 8f       	std	Y+26, r25	; 0x1a
    16a4:	ab 8f       	std	Y+27, r26	; 0x1b
    16a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a8:	69 8d       	ldd	r22, Y+25	; 0x19
    16aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	4a e7       	ldi	r20, 0x7A	; 122
    16b6:	53 e4       	ldi	r21, 0x43	; 67
    16b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	8d 8b       	std	Y+21, r24	; 0x15
    16c2:	9e 8b       	std	Y+22, r25	; 0x16
    16c4:	af 8b       	std	Y+23, r26	; 0x17
    16c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16c8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ca:	7e 89       	ldd	r23, Y+22	; 0x16
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	40 e8       	ldi	r20, 0x80	; 128
    16d6:	5f e3       	ldi	r21, 0x3F	; 63
    16d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16dc:	88 23       	and	r24, r24
    16de:	2c f4       	brge	.+10     	; 0x16ea <LCD_enuInit+0x2aa>
		__ticks = 1;
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	9c 8b       	std	Y+20, r25	; 0x14
    16e6:	8b 8b       	std	Y+19, r24	; 0x13
    16e8:	3f c0       	rjmp	.+126    	; 0x1768 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    16ea:	6d 89       	ldd	r22, Y+21	; 0x15
    16ec:	7e 89       	ldd	r23, Y+22	; 0x16
    16ee:	8f 89       	ldd	r24, Y+23	; 0x17
    16f0:	98 8d       	ldd	r25, Y+24	; 0x18
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	3f ef       	ldi	r19, 0xFF	; 255
    16f6:	4f e7       	ldi	r20, 0x7F	; 127
    16f8:	57 e4       	ldi	r21, 0x47	; 71
    16fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16fe:	18 16       	cp	r1, r24
    1700:	4c f5       	brge	.+82     	; 0x1754 <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1702:	69 8d       	ldd	r22, Y+25	; 0x19
    1704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	40 e2       	ldi	r20, 0x20	; 32
    1710:	51 e4       	ldi	r21, 0x41	; 65
    1712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	bc 01       	movw	r22, r24
    171c:	cd 01       	movw	r24, r26
    171e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
    172a:	0f c0       	rjmp	.+30     	; 0x174a <LCD_enuInit+0x30a>
    172c:	89 e1       	ldi	r24, 0x19	; 25
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9a 8b       	std	Y+18, r25	; 0x12
    1732:	89 8b       	std	Y+17, r24	; 0x11
    1734:	89 89       	ldd	r24, Y+17	; 0x11
    1736:	9a 89       	ldd	r25, Y+18	; 0x12
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCD_enuInit+0x2f8>
    173c:	9a 8b       	std	Y+18, r25	; 0x12
    173e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1740:	8b 89       	ldd	r24, Y+19	; 0x13
    1742:	9c 89       	ldd	r25, Y+20	; 0x14
    1744:	01 97       	sbiw	r24, 0x01	; 1
    1746:	9c 8b       	std	Y+20, r25	; 0x14
    1748:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174a:	8b 89       	ldd	r24, Y+19	; 0x13
    174c:	9c 89       	ldd	r25, Y+20	; 0x14
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	69 f7       	brne	.-38     	; 0x172c <LCD_enuInit+0x2ec>
    1752:	14 c0       	rjmp	.+40     	; 0x177c <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1754:	6d 89       	ldd	r22, Y+21	; 0x15
    1756:	7e 89       	ldd	r23, Y+22	; 0x16
    1758:	8f 89       	ldd	r24, Y+23	; 0x17
    175a:	98 8d       	ldd	r25, Y+24	; 0x18
    175c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1760:	dc 01       	movw	r26, r24
    1762:	cb 01       	movw	r24, r22
    1764:	9c 8b       	std	Y+20, r25	; 0x14
    1766:	8b 8b       	std	Y+19, r24	; 0x13
    1768:	8b 89       	ldd	r24, Y+19	; 0x13
    176a:	9c 89       	ldd	r25, Y+20	; 0x14
    176c:	98 8b       	std	Y+16, r25	; 0x10
    176e:	8f 87       	std	Y+15, r24	; 0x0f
    1770:	8f 85       	ldd	r24, Y+15	; 0x0f
    1772:	98 89       	ldd	r25, Y+16	; 0x10
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_enuInit+0x334>
    1778:	98 8b       	std	Y+16, r25	; 0x10
    177a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_invidSendCommend>
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e4       	ldi	r27, 0x40	; 64
    178a:	8b 87       	std	Y+11, r24	; 0x0b
    178c:	9c 87       	std	Y+12, r25	; 0x0c
    178e:	ad 87       	std	Y+13, r26	; 0x0d
    1790:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1792:	6b 85       	ldd	r22, Y+11	; 0x0b
    1794:	7c 85       	ldd	r23, Y+12	; 0x0c
    1796:	8d 85       	ldd	r24, Y+13	; 0x0d
    1798:	9e 85       	ldd	r25, Y+14	; 0x0e
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	4a e7       	ldi	r20, 0x7A	; 122
    17a0:	53 e4       	ldi	r21, 0x43	; 67
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	8f 83       	std	Y+7, r24	; 0x07
    17ac:	98 87       	std	Y+8, r25	; 0x08
    17ae:	a9 87       	std	Y+9, r26	; 0x09
    17b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b2:	6f 81       	ldd	r22, Y+7	; 0x07
    17b4:	78 85       	ldd	r23, Y+8	; 0x08
    17b6:	89 85       	ldd	r24, Y+9	; 0x09
    17b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e8       	ldi	r20, 0x80	; 128
    17c0:	5f e3       	ldi	r21, 0x3F	; 63
    17c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c6:	88 23       	and	r24, r24
    17c8:	2c f4       	brge	.+10     	; 0x17d4 <LCD_enuInit+0x394>
		__ticks = 1;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	9e 83       	std	Y+6, r25	; 0x06
    17d0:	8d 83       	std	Y+5, r24	; 0x05
    17d2:	3f c0       	rjmp	.+126    	; 0x1852 <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    17d4:	6f 81       	ldd	r22, Y+7	; 0x07
    17d6:	78 85       	ldd	r23, Y+8	; 0x08
    17d8:	89 85       	ldd	r24, Y+9	; 0x09
    17da:	9a 85       	ldd	r25, Y+10	; 0x0a
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	3f ef       	ldi	r19, 0xFF	; 255
    17e0:	4f e7       	ldi	r20, 0x7F	; 127
    17e2:	57 e4       	ldi	r21, 0x47	; 71
    17e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e8:	18 16       	cp	r1, r24
    17ea:	4c f5       	brge	.+82     	; 0x183e <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e2       	ldi	r20, 0x20	; 32
    17fa:	51 e4       	ldi	r21, 0x41	; 65
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	9e 83       	std	Y+6, r25	; 0x06
    1812:	8d 83       	std	Y+5, r24	; 0x05
    1814:	0f c0       	rjmp	.+30     	; 0x1834 <LCD_enuInit+0x3f4>
    1816:	89 e1       	ldi	r24, 0x19	; 25
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <LCD_enuInit+0x3e2>
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	9e 83       	std	Y+6, r25	; 0x06
    1832:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	8d 81       	ldd	r24, Y+5	; 0x05
    1836:	9e 81       	ldd	r25, Y+6	; 0x06
    1838:	00 97       	sbiw	r24, 0x00	; 0
    183a:	69 f7       	brne	.-38     	; 0x1816 <LCD_enuInit+0x3d6>
    183c:	14 c0       	rjmp	.+40     	; 0x1866 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    183e:	6f 81       	ldd	r22, Y+7	; 0x07
    1840:	78 85       	ldd	r23, Y+8	; 0x08
    1842:	89 85       	ldd	r24, Y+9	; 0x09
    1844:	9a 85       	ldd	r25, Y+10	; 0x0a
    1846:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	9e 83       	std	Y+6, r25	; 0x06
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	9a 81       	ldd	r25, Y+2	; 0x02
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	f1 f7       	brne	.-4      	; 0x185e <LCD_enuInit+0x41e>
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1866:	86 e0       	ldi	r24, 0x06	; 6
    1868:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <LCD_invidSendCommend>


	return Local_u8ErrorState;
    186c:	89 ad       	ldd	r24, Y+57	; 0x39
}
    186e:	e9 96       	adiw	r28, 0x39	; 57
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	cf 91       	pop	r28
    187c:	df 91       	pop	r29
    187e:	08 95       	ret

00001880 <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	00 d0       	rcall	.+0      	; 0x1886 <LCD_enuDisplayChar+0x6>
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
    188a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    188c:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT,RS_PIN , DIO_u8HIGH);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	61 e0       	ldi	r22, 0x01	; 1
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Data);
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_Latch>
	Local_u8ErrorState = ES_OK;
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	00 d0       	rcall	.+0      	; 0x18b4 <LCD_enuSendCommand+0x6>
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    18ba:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Command);
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <LCD_Latch>
	Local_u8ErrorState =ES_OK;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorState;
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <LCD_Latch>:

static void LCD_Latch(u8 Copy_u8Data)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	6d 97       	sbiw	r28, 0x1d	; 29
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
		DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    18f2:	80 e0       	ldi	r24, 0x00	; 0
    18f4:	64 e0       	ldi	r22, 0x04	; 4
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	67 e0       	ldi	r22, 0x07	; 7
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		//write Data
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1906:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1908:	98 2f       	mov	r25, r24
    190a:	99 1f       	adc	r25, r25
    190c:	99 27       	eor	r25, r25
    190e:	99 1f       	adc	r25, r25
    1910:	83 e0       	ldi	r24, 0x03	; 3
    1912:	63 e0       	ldi	r22, 0x03	; 3
    1914:	49 2f       	mov	r20, r25
    1916:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    191a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191c:	82 95       	swap	r24
    191e:	86 95       	lsr	r24
    1920:	86 95       	lsr	r24
    1922:	83 70       	andi	r24, 0x03	; 3
    1924:	98 2f       	mov	r25, r24
    1926:	91 70       	andi	r25, 0x01	; 1
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	49 2f       	mov	r20, r25
    192e:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1932:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1934:	82 95       	swap	r24
    1936:	86 95       	lsr	r24
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	98 2f       	mov	r25, r24
    193c:	91 70       	andi	r25, 0x01	; 1
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	67 e0       	ldi	r22, 0x07	; 7
    1942:	49 2f       	mov	r20, r25
    1944:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194a:	82 95       	swap	r24
    194c:	8f 70       	andi	r24, 0x0F	; 15
    194e:	98 2f       	mov	r25, r24
    1950:	91 70       	andi	r25, 0x01	; 1
    1952:	82 e0       	ldi	r24, 0x02	; 2
    1954:	65 e0       	ldi	r22, 0x05	; 5
    1956:	49 2f       	mov	r20, r25
    1958:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>

	#if LCD_MODE == EIGHT_BIT

		DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	86 95       	lsr	r24
    1960:	86 95       	lsr	r24
    1962:	86 95       	lsr	r24
    1964:	98 2f       	mov	r25, r24
    1966:	91 70       	andi	r25, 0x01	; 1
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	62 e0       	ldi	r22, 0x02	; 2
    196c:	49 2f       	mov	r20, r25
    196e:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1972:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1974:	86 95       	lsr	r24
    1976:	86 95       	lsr	r24
    1978:	98 2f       	mov	r25, r24
    197a:	91 70       	andi	r25, 0x01	; 1
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	49 2f       	mov	r20, r25
    1982:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1988:	86 95       	lsr	r24
    198a:	98 2f       	mov	r25, r24
    198c:	91 70       	andi	r25, 0x01	; 1
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	49 2f       	mov	r20, r25
    1994:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	98 2f       	mov	r25, r24
    199c:	91 70       	andi	r25, 0x01	; 1
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	49 2f       	mov	r20, r25
    19a4:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	#elif LCD_MODE == FOUR_BIT

	#endif

		// Enable latch
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	67 e0       	ldi	r22, 0x07	; 7
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e2       	ldi	r26, 0x20	; 32
    19b8:	b1 e4       	ldi	r27, 0x41	; 65
    19ba:	89 8f       	std	Y+25, r24	; 0x19
    19bc:	9a 8f       	std	Y+26, r25	; 0x1a
    19be:	ab 8f       	std	Y+27, r26	; 0x1b
    19c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	69 8d       	ldd	r22, Y+25	; 0x19
    19c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	53 e4       	ldi	r21, 0x43	; 67
    19d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	8d 8b       	std	Y+21, r24	; 0x15
    19dc:	9e 8b       	std	Y+22, r25	; 0x16
    19de:	af 8b       	std	Y+23, r26	; 0x17
    19e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e2:	6d 89       	ldd	r22, Y+21	; 0x15
    19e4:	7e 89       	ldd	r23, Y+22	; 0x16
    19e6:	8f 89       	ldd	r24, Y+23	; 0x17
    19e8:	98 8d       	ldd	r25, Y+24	; 0x18
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_Latch+0x128>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	9c 8b       	std	Y+20, r25	; 0x14
    1a00:	8b 8b       	std	Y+19, r24	; 0x13
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <LCD_Latch+0x1a6>
	else if (__tmp > 65535)
    1a04:	6d 89       	ldd	r22, Y+21	; 0x15
    1a06:	7e 89       	ldd	r23, Y+22	; 0x16
    1a08:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <LCD_Latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_Latch+0x188>
    1a46:	89 e1       	ldi	r24, 0x19	; 25
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
    1a4e:	89 89       	ldd	r24, Y+17	; 0x11
    1a50:	9a 89       	ldd	r25, Y+18	; 0x12
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_Latch+0x176>
    1a56:	9a 8b       	std	Y+18, r25	; 0x12
    1a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	9c 8b       	std	Y+20, r25	; 0x14
    1a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8b 89       	ldd	r24, Y+19	; 0x13
    1a66:	9c 89       	ldd	r25, Y+20	; 0x14
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_Latch+0x16a>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <LCD_Latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a70:	7e 89       	ldd	r23, Y+22	; 0x16
    1a72:	8f 89       	ldd	r24, Y+23	; 0x17
    1a74:	98 8d       	ldd	r25, Y+24	; 0x18
    1a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	9c 8b       	std	Y+20, r25	; 0x14
    1a80:	8b 8b       	std	Y+19, r24	; 0x13
    1a82:	8b 89       	ldd	r24, Y+19	; 0x13
    1a84:	9c 89       	ldd	r25, Y+20	; 0x14
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
    1a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8c:	98 89       	ldd	r25, Y+16	; 0x10
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_Latch+0x1b2>
    1a92:	98 8b       	std	Y+16, r25	; 0x10
    1a94:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	67 e0       	ldi	r22, 0x07	; 7
    1a9a:	40 e0       	ldi	r20, 0x00	; 0
    1a9c:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 e2       	ldi	r26, 0x20	; 32
    1aa6:	b1 e4       	ldi	r27, 0x41	; 65
    1aa8:	8b 87       	std	Y+11, r24	; 0x0b
    1aaa:	9c 87       	std	Y+12, r25	; 0x0c
    1aac:	ad 87       	std	Y+13, r26	; 0x0d
    1aae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ab2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ab4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ab6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a e7       	ldi	r20, 0x7A	; 122
    1abe:	53 e4       	ldi	r21, 0x43	; 67
    1ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8f 83       	std	Y+7, r24	; 0x07
    1aca:	98 87       	std	Y+8, r25	; 0x08
    1acc:	a9 87       	std	Y+9, r26	; 0x09
    1ace:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ad0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad2:	78 85       	ldd	r23, Y+8	; 0x08
    1ad4:	89 85       	ldd	r24, Y+9	; 0x09
    1ad6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	40 e8       	ldi	r20, 0x80	; 128
    1ade:	5f e3       	ldi	r21, 0x3F	; 63
    1ae0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae4:	88 23       	and	r24, r24
    1ae6:	2c f4       	brge	.+10     	; 0x1af2 <LCD_Latch+0x216>
		__ticks = 1;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	9e 83       	std	Y+6, r25	; 0x06
    1aee:	8d 83       	std	Y+5, r24	; 0x05
    1af0:	3f c0       	rjmp	.+126    	; 0x1b70 <LCD_Latch+0x294>
	else if (__tmp > 65535)
    1af2:	6f 81       	ldd	r22, Y+7	; 0x07
    1af4:	78 85       	ldd	r23, Y+8	; 0x08
    1af6:	89 85       	ldd	r24, Y+9	; 0x09
    1af8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	4f e7       	ldi	r20, 0x7F	; 127
    1b00:	57 e4       	ldi	r21, 0x47	; 71
    1b02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b06:	18 16       	cp	r1, r24
    1b08:	4c f5       	brge	.+82     	; 0x1b5c <LCD_Latch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	40 e2       	ldi	r20, 0x20	; 32
    1b18:	51 e4       	ldi	r21, 0x41	; 65
    1b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	bc 01       	movw	r22, r24
    1b24:	cd 01       	movw	r24, r26
    1b26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	9e 83       	std	Y+6, r25	; 0x06
    1b30:	8d 83       	std	Y+5, r24	; 0x05
    1b32:	0f c0       	rjmp	.+30     	; 0x1b52 <LCD_Latch+0x276>
    1b34:	89 e1       	ldi	r24, 0x19	; 25
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
    1b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	f1 f7       	brne	.-4      	; 0x1b40 <LCD_Latch+0x264>
    1b44:	9c 83       	std	Y+4, r25	; 0x04
    1b46:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	01 97       	sbiw	r24, 0x01	; 1
    1b4e:	9e 83       	std	Y+6, r25	; 0x06
    1b50:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	9e 81       	ldd	r25, Y+6	; 0x06
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f7       	brne	.-38     	; 0x1b34 <LCD_Latch+0x258>
    1b5a:	14 c0       	rjmp	.+40     	; 0x1b84 <LCD_Latch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	9e 83       	std	Y+6, r25	; 0x06
    1b6e:	8d 83       	std	Y+5, r24	; 0x05
    1b70:	8d 81       	ldd	r24, Y+5	; 0x05
    1b72:	9e 81       	ldd	r25, Y+6	; 0x06
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_Latch+0x2a0>
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(10);
}
    1b84:	6d 96       	adiw	r28, 0x1d	; 29
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	cf 91       	pop	r28
    1b92:	df 91       	pop	r29
    1b94:	08 95       	ret

00001b96 <LCD_invidSendCommend>:
inline static void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1b96:	df 93       	push	r29
    1b98:	cf 93       	push	r28
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
    1b9e:	2f 97       	sbiw	r28, 0x0f	; 15
    1ba0:	0f b6       	in	r0, 0x3f	; 63
    1ba2:	f8 94       	cli
    1ba4:	de bf       	out	0x3e, r29	; 62
    1ba6:	0f be       	out	0x3f, r0	; 63
    1ba8:	cd bf       	out	0x3d, r28	; 61
    1baa:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	61 e0       	ldi	r22, 0x01	; 1
    1bb0:	40 e0       	ldi	r20, 0x00	; 0
    1bb2:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	64 e0       	ldi	r22, 0x04	; 4
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	67 e0       	ldi	r22, 0x07	; 7
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1bca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bcc:	98 2f       	mov	r25, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	99 27       	eor	r25, r25
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	83 e0       	ldi	r24, 0x03	; 3
    1bd6:	63 e0       	ldi	r22, 0x03	; 3
    1bd8:	49 2f       	mov	r20, r25
    1bda:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be0:	82 95       	swap	r24
    1be2:	86 95       	lsr	r24
    1be4:	86 95       	lsr	r24
    1be6:	83 70       	andi	r24, 0x03	; 3
    1be8:	98 2f       	mov	r25, r24
    1bea:	91 70       	andi	r25, 0x01	; 1
    1bec:	83 e0       	ldi	r24, 0x03	; 3
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	49 2f       	mov	r20, r25
    1bf2:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf8:	82 95       	swap	r24
    1bfa:	86 95       	lsr	r24
    1bfc:	87 70       	andi	r24, 0x07	; 7
    1bfe:	98 2f       	mov	r25, r24
    1c00:	91 70       	andi	r25, 0x01	; 1
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	67 e0       	ldi	r22, 0x07	; 7
    1c06:	49 2f       	mov	r20, r25
    1c08:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0e:	82 95       	swap	r24
    1c10:	8f 70       	andi	r24, 0x0F	; 15
    1c12:	98 2f       	mov	r25, r24
    1c14:	91 70       	andi	r25, 0x01	; 1
    1c16:	82 e0       	ldi	r24, 0x02	; 2
    1c18:	65 e0       	ldi	r22, 0x05	; 5
    1c1a:	49 2f       	mov	r20, r25
    1c1c:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	86 95       	lsr	r24
    1c24:	86 95       	lsr	r24
    1c26:	86 95       	lsr	r24
    1c28:	98 2f       	mov	r25, r24
    1c2a:	91 70       	andi	r25, 0x01	; 1
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	62 e0       	ldi	r22, 0x02	; 2
    1c30:	49 2f       	mov	r20, r25
    1c32:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    1c36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c38:	86 95       	lsr	r24
    1c3a:	86 95       	lsr	r24
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	91 70       	andi	r25, 0x01	; 1
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	65 e0       	ldi	r22, 0x05	; 5
    1c44:	49 2f       	mov	r20, r25
    1c46:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    1c4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4c:	86 95       	lsr	r24
    1c4e:	98 2f       	mov	r25, r24
    1c50:	91 70       	andi	r25, 0x01	; 1
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	62 e0       	ldi	r22, 0x02	; 2
    1c56:	49 2f       	mov	r20, r25
    1c58:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    1c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5e:	98 2f       	mov	r25, r24
    1c60:	91 70       	andi	r25, 0x01	; 1
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	60 e0       	ldi	r22, 0x00	; 0
    1c66:	49 2f       	mov	r20, r25
    1c68:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	67 e0       	ldi	r22, 0x07	; 7
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e2       	ldi	r26, 0x20	; 32
    1c7c:	b1 e4       	ldi	r27, 0x41	; 65
    1c7e:	8b 87       	std	Y+11, r24	; 0x0b
    1c80:	9c 87       	std	Y+12, r25	; 0x0c
    1c82:	ad 87       	std	Y+13, r26	; 0x0d
    1c84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	8f 83       	std	Y+7, r24	; 0x07
    1ca0:	98 87       	std	Y+8, r25	; 0x08
    1ca2:	a9 87       	std	Y+9, r26	; 0x09
    1ca4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca8:	78 85       	ldd	r23, Y+8	; 0x08
    1caa:	89 85       	ldd	r24, Y+9	; 0x09
    1cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    1cc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cca:	78 85       	ldd	r23, Y+8	; 0x08
    1ccc:	89 85       	ldd	r24, Y+9	; 0x09
    1cce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ce4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ce6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_invidSendCommend+0x192>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_invidSendCommend+0x180>
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_invidSendCommend+0x174>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	9e 83       	std	Y+6, r25	; 0x06
    1d44:	8d 83       	std	Y+5, r24	; 0x05
    1d46:	8d 81       	ldd	r24, Y+5	; 0x05
    1d48:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_invidSendCommend+0x1bc>
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	67 e0       	ldi	r22, 0x07	; 7
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 08 08 	call	0x1010	; 0x1010 <DIO_enuSetPinValue>
}
    1d64:	2f 96       	adiw	r28, 0x0f	; 15
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <USART_voidInit>:
static void (* USART_pvNotificationFunc)(void)= NULL;
static u8 USART_u8State= IDLE ;


void USART_voidInit (void)
{
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <USART_voidInit+0x6>
    1d7c:	0f 92       	push	r0
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0 ;
    1d82:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
    1d84:	83 e3       	ldi	r24, 0x33	; 51
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	9a 83       	std	Y+2, r25	; 0x02
    1d8a:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(Local_u16UBRR >> 8) ;
    1d8c:	e0 e4       	ldi	r30, 0x40	; 64
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	9a 81       	ldd	r25, Y+2	; 0x02
    1d94:	89 2f       	mov	r24, r25
    1d96:	99 27       	eor	r25, r25
    1d98:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR ;
    1d9a:	e9 e2       	ldi	r30, 0x29	; 41
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	80 83       	st	Z, r24

	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
    1da2:	ab e2       	ldi	r26, 0x2B	; 43
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	eb e2       	ldi	r30, 0x2B	; 43
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	80 81       	ld	r24, Z
    1dac:	8d 7f       	andi	r24, 0xFD	; 253
    1dae:	8c 93       	st	X, r24
		#error "Wrong USART_MODE or USART_SYSTEM_SPEED config"
	#endif


	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
    1db0:	ab e2       	ldi	r26, 0x2B	; 43
    1db2:	b0 e0       	ldi	r27, 0x00	; 0
    1db4:	eb e2       	ldi	r30, 0x2B	; 43
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 81       	ld	r24, Z
    1dba:	8e 7f       	andi	r24, 0xFE	; 254
    1dbc:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_MPCM config"
	#endif

	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	8f 7b       	andi	r24, 0xBF	; 191
    1dc2:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_MODE config"
	#endif

	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	8f 7e       	andi	r24, 0xEF	; 239
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	8f 7d       	andi	r24, 0xDF	; 223
    1dce:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_PARITY_MODE config"
	#endif

	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	87 7f       	andi	r24, 0xF7	; 247
    1dd4:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	82 60       	ori	r24, 0x02	; 2
    1dda:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	84 60       	ori	r24, 0x04	; 4
    1de0:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
    1de2:	aa e2       	ldi	r26, 0x2A	; 42
    1de4:	b0 e0       	ldi	r27, 0x00	; 0
    1de6:	ea e2       	ldi	r30, 0x2A	; 42
    1de8:	f0 e0       	ldi	r31, 0x00	; 0
    1dea:	80 81       	ld	r24, Z
    1dec:	8b 7f       	andi	r24, 0xFB	; 251
    1dee:	8c 93       	st	X, r24
		#else
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	80 68       	ori	r24, 0x80	; 128
    1df4:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC = Local_u8UCSRC ;
    1df6:	e0 e4       	ldi	r30, 0x40	; 64
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	80 83       	st	Z, r24

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    1dfe:	aa e2       	ldi	r26, 0x2A	; 42
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	ea e2       	ldi	r30, 0x2A	; 42
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	8f 77       	andi	r24, 0x7F	; 127
    1e0a:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    1e0c:	aa e2       	ldi	r26, 0x2A	; 42
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	ea e2       	ldi	r30, 0x2A	; 42
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	8f 7b       	andi	r24, 0xBF	; 191
    1e18:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
    1e1a:	aa e2       	ldi	r26, 0x2A	; 42
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	ea e2       	ldi	r30, 0x2A	; 42
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	8f 7d       	andi	r24, 0xDF	; 223
    1e26:	8c 93       	st	X, r24
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
    1e28:	aa e2       	ldi	r26, 0x2A	; 42
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ea e2       	ldi	r30, 0x2A	; 42
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 61       	ori	r24, 0x10	; 16
    1e34:	8c 93       	st	X, r24
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
    1e36:	aa e2       	ldi	r26, 0x2A	; 42
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	ea e2       	ldi	r30, 0x2A	; 42
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	88 60       	ori	r24, 0x08	; 8
    1e42:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	cf 91       	pop	r28
    1e4c:	df 91       	pop	r29
    1e4e:	08 95       	ret

00001e50 <USART_u8SendData>:

u8 USART_u8SendData (u8 Copy_u8Data)
{
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	00 d0       	rcall	.+0      	; 0x1e56 <USART_u8SendData+0x6>
    1e56:	00 d0       	rcall	.+0      	; 0x1e58 <USART_u8SendData+0x8>
    1e58:	00 d0       	rcall	.+0      	; 0x1e5a <USART_u8SendData+0xa>
    1e5a:	cd b7       	in	r28, 0x3d	; 61
    1e5c:	de b7       	in	r29, 0x3e	; 62
    1e5e:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    1e64:	19 82       	std	Y+1, r1	; 0x01
    1e66:	1a 82       	std	Y+2, r1	; 0x02
    1e68:	1b 82       	std	Y+3, r1	; 0x03
    1e6a:	1c 82       	std	Y+4, r1	; 0x04
	if (USART_u8State == IDLE)
    1e6c:	80 91 6e 00 	lds	r24, 0x006E
    1e70:	88 23       	and	r24, r24
    1e72:	e9 f5       	brne	.+122    	; 0x1eee <USART_u8SendData+0x9e>
	{
		USART_u8State = BUSY ;
    1e74:	82 e0       	ldi	r24, 0x02	; 2
    1e76:	80 93 6e 00 	sts	0x006E, r24
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <USART_u8SendData+0x42>
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++ ;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	ab 81       	ldd	r26, Y+3	; 0x03
    1e82:	bc 81       	ldd	r27, Y+4	; 0x04
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	a1 1d       	adc	r26, r1
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	89 83       	std	Y+1, r24	; 0x01
    1e8c:	9a 83       	std	Y+2, r25	; 0x02
    1e8e:	ab 83       	std	Y+3, r26	; 0x03
    1e90:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (USART_u8State == IDLE)
	{
		USART_u8State = BUSY ;
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1e92:	eb e2       	ldi	r30, 0x2B	; 43
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	82 95       	swap	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	87 70       	andi	r24, 0x07	; 7
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	81 70       	andi	r24, 0x01	; 1
    1ea4:	90 70       	andi	r25, 0x00	; 0
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	61 f4       	brne	.+24     	; 0x1ec2 <USART_u8SendData+0x72>
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	ab 81       	ldd	r26, Y+3	; 0x03
    1eb0:	bc 81       	ldd	r27, Y+4	; 0x04
    1eb2:	80 31       	cpi	r24, 0x10	; 16
    1eb4:	27 e2       	ldi	r18, 0x27	; 39
    1eb6:	92 07       	cpc	r25, r18
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	a2 07       	cpc	r26, r18
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	b2 07       	cpc	r27, r18
    1ec0:	e9 f6       	brne	.-70     	; 0x1e7c <USART_u8SendData+0x2c>
		{
			Local_u32TimeoutCounter++ ;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec6:	ab 81       	ldd	r26, Y+3	; 0x03
    1ec8:	bc 81       	ldd	r27, Y+4	; 0x04
    1eca:	80 31       	cpi	r24, 0x10	; 16
    1ecc:	27 e2       	ldi	r18, 0x27	; 39
    1ece:	92 07       	cpc	r25, r18
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	a2 07       	cpc	r26, r18
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	b2 07       	cpc	r27, r18
    1ed8:	19 f4       	brne	.+6      	; 0x1ee0 <USART_u8SendData+0x90>
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
    1eda:	83 e0       	ldi	r24, 0x03	; 3
    1edc:	8d 83       	std	Y+5, r24	; 0x05
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <USART_u8SendData+0x98>
		else
			UDR = Copy_u8Data ;
    1ee0:	ec e2       	ldi	r30, 0x2C	; 44
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee6:	80 83       	st	Z, r24

		USART_u8State = IDLE ;
    1ee8:	10 92 6e 00 	sts	0x006E, r1
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <USART_u8SendData+0xa0>
	}
	else
	{
		Local_u8ErrorState = ES_NOK ;
    1eee:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState ;
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1ef2:	26 96       	adiw	r28, 0x06	; 6
    1ef4:	0f b6       	in	r0, 0x3f	; 63
    1ef6:	f8 94       	cli
    1ef8:	de bf       	out	0x3e, r29	; 62
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	cd bf       	out	0x3d, r28	; 61
    1efe:	cf 91       	pop	r28
    1f00:	df 91       	pop	r29
    1f02:	08 95       	ret

00001f04 <USART_u8RecevieData>:

u8 USART_u8RecevieData (u8 * Copy_u8ReceviedData)
{
    1f04:	df 93       	push	r29
    1f06:	cf 93       	push	r28
    1f08:	cd b7       	in	r28, 0x3d	; 61
    1f0a:	de b7       	in	r29, 0x3e	; 62
    1f0c:	27 97       	sbiw	r28, 0x07	; 7
    1f0e:	0f b6       	in	r0, 0x3f	; 63
    1f10:	f8 94       	cli
    1f12:	de bf       	out	0x3e, r29	; 62
    1f14:	0f be       	out	0x3f, r0	; 63
    1f16:	cd bf       	out	0x3d, r28	; 61
    1f18:	9f 83       	std	Y+7, r25	; 0x07
    1f1a:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState ;
	u32 Local_u32TimeoutCounter = 0 ;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
    1f1e:	1a 82       	std	Y+2, r1	; 0x02
    1f20:	1b 82       	std	Y+3, r1	; 0x03
    1f22:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_u8ReceviedData != NULL)
    1f24:	8e 81       	ldd	r24, Y+6	; 0x06
    1f26:	9f 81       	ldd	r25, Y+7	; 0x07
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	09 f4       	brne	.+2      	; 0x1f2e <USART_u8RecevieData+0x2a>
    1f2c:	3e c0       	rjmp	.+124    	; 0x1faa <USART_u8RecevieData+0xa6>
	{
		if (USART_u8State == IDLE)
    1f2e:	80 91 6e 00 	lds	r24, 0x006E
    1f32:	88 23       	and	r24, r24
    1f34:	c1 f5       	brne	.+112    	; 0x1fa6 <USART_u8RecevieData+0xa2>
		{
			USART_u8State = BUSY ;
    1f36:	82 e0       	ldi	r24, 0x02	; 2
    1f38:	80 93 6e 00 	sts	0x006E, r24
    1f3c:	0b c0       	rjmp	.+22     	; 0x1f54 <USART_u8RecevieData+0x50>

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
				Local_u32TimeoutCounter++ ;
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	9a 81       	ldd	r25, Y+2	; 0x02
    1f42:	ab 81       	ldd	r26, Y+3	; 0x03
    1f44:	bc 81       	ldd	r27, Y+4	; 0x04
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	a1 1d       	adc	r26, r1
    1f4a:	b1 1d       	adc	r27, r1
    1f4c:	89 83       	std	Y+1, r24	; 0x01
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	ab 83       	std	Y+3, r26	; 0x03
    1f52:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1f54:	eb e2       	ldi	r30, 0x2B	; 43
    1f56:	f0 e0       	ldi	r31, 0x00	; 0
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 23       	and	r24, r24
    1f5c:	64 f0       	brlt	.+24     	; 0x1f76 <USART_u8RecevieData+0x72>
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	9a 81       	ldd	r25, Y+2	; 0x02
    1f62:	ab 81       	ldd	r26, Y+3	; 0x03
    1f64:	bc 81       	ldd	r27, Y+4	; 0x04
    1f66:	80 31       	cpi	r24, 0x10	; 16
    1f68:	27 e2       	ldi	r18, 0x27	; 39
    1f6a:	92 07       	cpc	r25, r18
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	a2 07       	cpc	r26, r18
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	b2 07       	cpc	r27, r18
    1f74:	21 f7       	brne	.-56     	; 0x1f3e <USART_u8RecevieData+0x3a>
				Local_u32TimeoutCounter++ ;

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7a:	ab 81       	ldd	r26, Y+3	; 0x03
    1f7c:	bc 81       	ldd	r27, Y+4	; 0x04
    1f7e:	80 31       	cpi	r24, 0x10	; 16
    1f80:	27 e2       	ldi	r18, 0x27	; 39
    1f82:	92 07       	cpc	r25, r18
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	a2 07       	cpc	r26, r18
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	b2 07       	cpc	r27, r18
    1f8c:	19 f4       	brne	.+6      	; 0x1f94 <USART_u8RecevieData+0x90>
				Local_u8ErrorState = ES_OUT_OF_RANGE ;
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	8d 83       	std	Y+5, r24	; 0x05
    1f92:	06 c0       	rjmp	.+12     	; 0x1fa0 <USART_u8RecevieData+0x9c>
			else
				*Copy_u8ReceviedData = UDR ;
    1f94:	ec e2       	ldi	r30, 0x2C	; 44
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	ee 81       	ldd	r30, Y+6	; 0x06
    1f9c:	ff 81       	ldd	r31, Y+7	; 0x07
    1f9e:	80 83       	st	Z, r24

			USART_u8State = IDLE ;
    1fa0:	10 92 6e 00 	sts	0x006E, r1
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <USART_u8RecevieData+0xaa>
		}
		else
			Local_u8ErrorState = ES_NOK ;
    1fa6:	1d 82       	std	Y+5, r1	; 0x05
    1fa8:	02 c0       	rjmp	.+4      	; 0x1fae <USART_u8RecevieData+0xaa>
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    1faa:	82 e0       	ldi	r24, 0x02	; 2
    1fac:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    1fae:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1fb0:	27 96       	adiw	r28, 0x07	; 7
    1fb2:	0f b6       	in	r0, 0x3f	; 63
    1fb4:	f8 94       	cli
    1fb6:	de bf       	out	0x3e, r29	; 62
    1fb8:	0f be       	out	0x3f, r0	; 63
    1fba:	cd bf       	out	0x3d, r28	; 61
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <USART_u8SendStringSynch>:

u8 USART_u8SendStringSynch (const u8 * Copy_pchString)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
    1fca:	28 97       	sbiw	r28, 0x08	; 8
    1fcc:	0f b6       	in	r0, 0x3f	; 63
    1fce:	f8 94       	cli
    1fd0:	de bf       	out	0x3e, r29	; 62
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	cd bf       	out	0x3d, r28	; 61
    1fd6:	9f 83       	std	Y+7, r25	; 0x07
    1fd8:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    1fde:	19 82       	std	Y+1, r1	; 0x01
    1fe0:	1a 82       	std	Y+2, r1	; 0x02
    1fe2:	1b 82       	std	Y+3, r1	; 0x03
    1fe4:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    1fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	41 f1       	breq	.+80     	; 0x203e <USART_u8SendStringSynch+0x7c>
    1fee:	1c c0       	rjmp	.+56     	; 0x2028 <USART_u8SendStringSynch+0x66>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    1ff0:	29 81       	ldd	r18, Y+1	; 0x01
    1ff2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	e2 0f       	add	r30, r18
    1ffc:	f3 1f       	adc	r31, r19
    1ffe:	80 81       	ld	r24, Z
    2000:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <USART_u8SendData>
    2004:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	9a 81       	ldd	r25, Y+2	; 0x02
    200a:	ab 81       	ldd	r26, Y+3	; 0x03
    200c:	bc 81       	ldd	r27, Y+4	; 0x04
    200e:	01 96       	adiw	r24, 0x01	; 1
    2010:	a1 1d       	adc	r26, r1
    2012:	b1 1d       	adc	r27, r1
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	9a 83       	std	Y+2, r25	; 0x02
    2018:	ab 83       	std	Y+3, r26	; 0x03
    201a:	bc 83       	std	Y+4, r27	; 0x04
			if (Local_u8ErrorState != ES_OK)
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	19 f0       	breq	.+6      	; 0x2028 <USART_u8SendStringSynch+0x66>
				return Local_u8ErrorState ;
    2022:	8d 81       	ldd	r24, Y+5	; 0x05
    2024:	88 87       	std	Y+8, r24	; 0x08
    2026:	0f c0       	rjmp	.+30     	; 0x2046 <USART_u8SendStringSynch+0x84>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    2028:	29 81       	ldd	r18, Y+1	; 0x01
    202a:	3a 81       	ldd	r19, Y+2	; 0x02
    202c:	8e 81       	ldd	r24, Y+6	; 0x06
    202e:	9f 81       	ldd	r25, Y+7	; 0x07
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	80 81       	ld	r24, Z
    2038:	88 23       	and	r24, r24
    203a:	d1 f6       	brne	.-76     	; 0x1ff0 <USART_u8SendStringSynch+0x2e>
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <USART_u8SendStringSynch+0x80>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    2042:	8d 81       	ldd	r24, Y+5	; 0x05
    2044:	88 87       	std	Y+8, r24	; 0x08
    2046:	88 85       	ldd	r24, Y+8	; 0x08
}
    2048:	28 96       	adiw	r28, 0x08	; 8
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <USART_u8SendStringAsynch>:

u8   USART_u8SendStringAsynch (const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <USART_u8SendStringAsynch+0x6>
    2060:	00 d0       	rcall	.+0      	; 0x2062 <USART_u8SendStringAsynch+0x8>
    2062:	0f 92       	push	r0
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	9b 83       	std	Y+3, r25	; 0x03
    206a:	8a 83       	std	Y+2, r24	; 0x02
    206c:	7d 83       	std	Y+5, r23	; 0x05
    206e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    2074:	80 91 6e 00 	lds	r24, 0x006E
    2078:	88 23       	and	r24, r24
    207a:	99 f5       	brne	.+102    	; 0x20e2 <USART_u8SendStringAsynch+0x88>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	61 f1       	breq	.+88     	; 0x20dc <USART_u8SendStringAsynch+0x82>
    2084:	8c 81       	ldd	r24, Y+4	; 0x04
    2086:	9d 81       	ldd	r25, Y+5	; 0x05
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	41 f1       	breq	.+80     	; 0x20dc <USART_u8SendStringAsynch+0x82>
		{
			USART_u8State = BUSY ;
    208c:	82 e0       	ldi	r24, 0x02	; 2
    208e:	80 93 6e 00 	sts	0x006E, r24

			USART_pu8SendData = Copy_pchString ;
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	90 93 69 00 	sts	0x0069, r25
    209a:	80 93 68 00 	sts	0x0068, r24
			USART_pvNotificationFunc = NotificationFunc ;
    209e:	8c 81       	ldd	r24, Y+4	; 0x04
    20a0:	9d 81       	ldd	r25, Y+5	; 0x05
    20a2:	90 93 6d 00 	sts	0x006D, r25
    20a6:	80 93 6c 00 	sts	0x006C, r24
			USART_u8Index = 0 ;
    20aa:	10 92 70 00 	sts	0x0070, r1
			UDR = USART_pu8SendData[USART_u8Index] ;
    20ae:	ac e2       	ldi	r26, 0x2C	; 44
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	20 91 68 00 	lds	r18, 0x0068
    20b6:	30 91 69 00 	lds	r19, 0x0069
    20ba:	80 91 70 00 	lds	r24, 0x0070
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	f9 01       	movw	r30, r18
    20c4:	e8 0f       	add	r30, r24
    20c6:	f9 1f       	adc	r31, r25
    20c8:	80 81       	ld	r24, Z
    20ca:	8c 93       	st	X, r24
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    20cc:	aa e2       	ldi	r26, 0x2A	; 42
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	ea e2       	ldi	r30, 0x2A	; 42
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 64       	ori	r24, 0x40	; 64
    20d8:	8c 93       	st	X, r24
    20da:	04 c0       	rjmp	.+8      	; 0x20e4 <USART_u8SendStringAsynch+0x8a>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	89 83       	std	Y+1, r24	; 0x01
    20e0:	01 c0       	rjmp	.+2      	; 0x20e4 <USART_u8SendStringAsynch+0x8a>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    20e2:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	0f 90       	pop	r0
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	08 95       	ret

000020f6 <USART_u8ReceiveBufferSynch>:

u8 USART_u8ReceiveBufferSynch (u8 *Copy_pchString , u32 Copy_u32BufferSize)
{
    20f6:	df 93       	push	r29
    20f8:	cf 93       	push	r28
    20fa:	cd b7       	in	r28, 0x3d	; 61
    20fc:	de b7       	in	r29, 0x3e	; 62
    20fe:	2c 97       	sbiw	r28, 0x0c	; 12
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	de bf       	out	0x3e, r29	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	cd bf       	out	0x3d, r28	; 61
    210a:	9f 83       	std	Y+7, r25	; 0x07
    210c:	8e 83       	std	Y+6, r24	; 0x06
    210e:	48 87       	std	Y+8, r20	; 0x08
    2110:	59 87       	std	Y+9, r21	; 0x09
    2112:	6a 87       	std	Y+10, r22	; 0x0a
    2114:	7b 87       	std	Y+11, r23	; 0x0b
	u8 Local_u8ErrorState = ES_OK ;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    211a:	19 82       	std	Y+1, r1	; 0x01
    211c:	1a 82       	std	Y+2, r1	; 0x02
    211e:	1b 82       	std	Y+3, r1	; 0x03
    2120:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	49 f1       	breq	.+82     	; 0x217c <USART_u8ReceiveBufferSynch+0x86>
    212a:	1a c0       	rjmp	.+52     	; 0x2160 <USART_u8ReceiveBufferSynch+0x6a>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    212c:	29 81       	ldd	r18, Y+1	; 0x01
    212e:	3a 81       	ldd	r19, Y+2	; 0x02
    2130:	8e 81       	ldd	r24, Y+6	; 0x06
    2132:	9f 81       	ldd	r25, Y+7	; 0x07
    2134:	82 0f       	add	r24, r18
    2136:	93 1f       	adc	r25, r19
    2138:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <USART_u8RecevieData>
    213c:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	9a 81       	ldd	r25, Y+2	; 0x02
    2142:	ab 81       	ldd	r26, Y+3	; 0x03
    2144:	bc 81       	ldd	r27, Y+4	; 0x04
    2146:	01 96       	adiw	r24, 0x01	; 1
    2148:	a1 1d       	adc	r26, r1
    214a:	b1 1d       	adc	r27, r1
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	9a 83       	std	Y+2, r25	; 0x02
    2150:	ab 83       	std	Y+3, r26	; 0x03
    2152:	bc 83       	std	Y+4, r27	; 0x04

			if (Local_u8ErrorState != ES_OK)
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	81 30       	cpi	r24, 0x01	; 1
    2158:	19 f0       	breq	.+6      	; 0x2160 <USART_u8ReceiveBufferSynch+0x6a>
				return Local_u8ErrorState ;
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	8c 87       	std	Y+12, r24	; 0x0c
    215e:	12 c0       	rjmp	.+36     	; 0x2184 <USART_u8ReceiveBufferSynch+0x8e>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    2160:	29 81       	ldd	r18, Y+1	; 0x01
    2162:	3a 81       	ldd	r19, Y+2	; 0x02
    2164:	4b 81       	ldd	r20, Y+3	; 0x03
    2166:	5c 81       	ldd	r21, Y+4	; 0x04
    2168:	88 85       	ldd	r24, Y+8	; 0x08
    216a:	99 85       	ldd	r25, Y+9	; 0x09
    216c:	aa 85       	ldd	r26, Y+10	; 0x0a
    216e:	bb 85       	ldd	r27, Y+11	; 0x0b
    2170:	28 17       	cp	r18, r24
    2172:	39 07       	cpc	r19, r25
    2174:	4a 07       	cpc	r20, r26
    2176:	5b 07       	cpc	r21, r27
    2178:	c8 f2       	brcs	.-78     	; 0x212c <USART_u8ReceiveBufferSynch+0x36>
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <USART_u8ReceiveBufferSynch+0x8a>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	8c 87       	std	Y+12, r24	; 0x0c
    2184:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2186:	2c 96       	adiw	r28, 0x0c	; 12
    2188:	0f b6       	in	r0, 0x3f	; 63
    218a:	f8 94       	cli
    218c:	de bf       	out	0x3e, r29	; 62
    218e:	0f be       	out	0x3f, r0	; 63
    2190:	cd bf       	out	0x3d, r28	; 61
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <USART_u8ReceiveBufferAsynch>:

u8 USART_u8ReceiveBufferAsynch (u8 *Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	29 97       	sbiw	r28, 0x09	; 9
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	9b 83       	std	Y+3, r25	; 0x03
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	4c 83       	std	Y+4, r20	; 0x04
    21b2:	5d 83       	std	Y+5, r21	; 0x05
    21b4:	6e 83       	std	Y+6, r22	; 0x06
    21b6:	7f 83       	std	Y+7, r23	; 0x07
    21b8:	39 87       	std	Y+9, r19	; 0x09
    21ba:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = ES_OK ;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    21c0:	80 91 6e 00 	lds	r24, 0x006E
    21c4:	88 23       	and	r24, r24
    21c6:	39 f5       	brne	.+78     	; 0x2216 <USART_u8ReceiveBufferAsynch+0x7e>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	01 f1       	breq	.+64     	; 0x2210 <USART_u8ReceiveBufferAsynch+0x78>
    21d0:	88 85       	ldd	r24, Y+8	; 0x08
    21d2:	99 85       	ldd	r25, Y+9	; 0x09
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	e1 f0       	breq	.+56     	; 0x2210 <USART_u8ReceiveBufferAsynch+0x78>
		{
			USART_u8State = BUSY ;
    21d8:	82 e0       	ldi	r24, 0x02	; 2
    21da:	80 93 6e 00 	sts	0x006E, r24

			USART_pu8ReceiveData = Copy_pchString ;
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	90 93 6b 00 	sts	0x006B, r25
    21e6:	80 93 6a 00 	sts	0x006A, r24
			USART_pvNotificationFunc = NotificationFunc ;
    21ea:	88 85       	ldd	r24, Y+8	; 0x08
    21ec:	99 85       	ldd	r25, Y+9	; 0x09
    21ee:	90 93 6d 00 	sts	0x006D, r25
    21f2:	80 93 6c 00 	sts	0x006C, r24
			USART_u8BufferSize = Copy_u32BufferSize;
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	80 93 6f 00 	sts	0x006F, r24

			USART_u8Index = 0 ;
    21fc:	10 92 70 00 	sts	0x0070, r1

			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    2200:	aa e2       	ldi	r26, 0x2A	; 42
    2202:	b0 e0       	ldi	r27, 0x00	; 0
    2204:	ea e2       	ldi	r30, 0x2A	; 42
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	80 81       	ld	r24, Z
    220a:	80 68       	ori	r24, 0x80	; 128
    220c:	8c 93       	st	X, r24
    220e:	04 c0       	rjmp	.+8      	; 0x2218 <USART_u8ReceiveBufferAsynch+0x80>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    2210:	82 e0       	ldi	r24, 0x02	; 2
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	01 c0       	rjmp	.+2      	; 0x2218 <USART_u8ReceiveBufferAsynch+0x80>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    2216:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    2218:	89 81       	ldd	r24, Y+1	; 0x01
}
    221a:	29 96       	adiw	r28, 0x09	; 9
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <__vector_13>:


void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    222c:	1f 92       	push	r1
    222e:	0f 92       	push	r0
    2230:	0f b6       	in	r0, 0x3f	; 63
    2232:	0f 92       	push	r0
    2234:	11 24       	eor	r1, r1
    2236:	2f 93       	push	r18
    2238:	3f 93       	push	r19
    223a:	4f 93       	push	r20
    223c:	5f 93       	push	r21
    223e:	6f 93       	push	r22
    2240:	7f 93       	push	r23
    2242:	8f 93       	push	r24
    2244:	9f 93       	push	r25
    2246:	af 93       	push	r26
    2248:	bf 93       	push	r27
    224a:	ef 93       	push	r30
    224c:	ff 93       	push	r31
    224e:	df 93       	push	r29
    2250:	cf 93       	push	r28
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
	USART_pu8ReceiveData[USART_u8Index] = UDR ;
    2256:	20 91 6a 00 	lds	r18, 0x006A
    225a:	30 91 6b 00 	lds	r19, 0x006B
    225e:	80 91 70 00 	lds	r24, 0x0070
    2262:	88 2f       	mov	r24, r24
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	d9 01       	movw	r26, r18
    2268:	a8 0f       	add	r26, r24
    226a:	b9 1f       	adc	r27, r25
    226c:	ec e2       	ldi	r30, 0x2C	; 44
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	8c 93       	st	X, r24
	USART_u8Index++ ;
    2274:	80 91 70 00 	lds	r24, 0x0070
    2278:	8f 5f       	subi	r24, 0xFF	; 255
    227a:	80 93 70 00 	sts	0x0070, r24

	if (USART_u8Index == USART_u8BufferSize)
    227e:	90 91 70 00 	lds	r25, 0x0070
    2282:	80 91 6f 00 	lds	r24, 0x006F
    2286:	98 17       	cp	r25, r24
    2288:	81 f4       	brne	.+32     	; 0x22aa <__vector_13+0x7e>
	{
		USART_u8Index=0;
    228a:	10 92 70 00 	sts	0x0070, r1
		USART_u8State = IDLE ;
    228e:	10 92 6e 00 	sts	0x006E, r1
		USART_pvNotificationFunc() ;
    2292:	e0 91 6c 00 	lds	r30, 0x006C
    2296:	f0 91 6d 00 	lds	r31, 0x006D
    229a:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    229c:	aa e2       	ldi	r26, 0x2A	; 42
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e2       	ldi	r30, 0x2A	; 42
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8f 77       	andi	r24, 0x7F	; 127
    22a8:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Noting*/
	}
}
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	ff 91       	pop	r31
    22b0:	ef 91       	pop	r30
    22b2:	bf 91       	pop	r27
    22b4:	af 91       	pop	r26
    22b6:	9f 91       	pop	r25
    22b8:	8f 91       	pop	r24
    22ba:	7f 91       	pop	r23
    22bc:	6f 91       	pop	r22
    22be:	5f 91       	pop	r21
    22c0:	4f 91       	pop	r20
    22c2:	3f 91       	pop	r19
    22c4:	2f 91       	pop	r18
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	0f 90       	pop	r0
    22cc:	1f 90       	pop	r1
    22ce:	18 95       	reti

000022d0 <__vector_15>:

void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    22d0:	1f 92       	push	r1
    22d2:	0f 92       	push	r0
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	0f 92       	push	r0
    22d8:	11 24       	eor	r1, r1
    22da:	2f 93       	push	r18
    22dc:	3f 93       	push	r19
    22de:	4f 93       	push	r20
    22e0:	5f 93       	push	r21
    22e2:	6f 93       	push	r22
    22e4:	7f 93       	push	r23
    22e6:	8f 93       	push	r24
    22e8:	9f 93       	push	r25
    22ea:	af 93       	push	r26
    22ec:	bf 93       	push	r27
    22ee:	ef 93       	push	r30
    22f0:	ff 93       	push	r31
    22f2:	df 93       	push	r29
    22f4:	cf 93       	push	r28
    22f6:	cd b7       	in	r28, 0x3d	; 61
    22f8:	de b7       	in	r29, 0x3e	; 62
	USART_u8Index++ ;
    22fa:	80 91 70 00 	lds	r24, 0x0070
    22fe:	8f 5f       	subi	r24, 0xFF	; 255
    2300:	80 93 70 00 	sts	0x0070, r24

	if (USART_pu8SendData[USART_u8Index] == '\0')
    2304:	20 91 68 00 	lds	r18, 0x0068
    2308:	30 91 69 00 	lds	r19, 0x0069
    230c:	80 91 70 00 	lds	r24, 0x0070
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	f9 01       	movw	r30, r18
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	80 81       	ld	r24, Z
    231c:	88 23       	and	r24, r24
    231e:	89 f4       	brne	.+34     	; 0x2342 <__vector_15+0x72>
	{
		USART_u8Index=0;
    2320:	10 92 70 00 	sts	0x0070, r1
		USART_u8State = IDLE ;
    2324:	10 92 6e 00 	sts	0x006E, r1
		USART_pvNotificationFunc() ;
    2328:	e0 91 6c 00 	lds	r30, 0x006C
    232c:	f0 91 6d 00 	lds	r31, 0x006D
    2330:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    2332:	aa e2       	ldi	r26, 0x2A	; 42
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	ea e2       	ldi	r30, 0x2A	; 42
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	8f 7b       	andi	r24, 0xBF	; 191
    233e:	8c 93       	st	X, r24
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <__vector_15+0x90>
	}
	else
	{
		UDR = USART_pu8SendData[USART_u8Index] ;
    2342:	ac e2       	ldi	r26, 0x2C	; 44
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	20 91 68 00 	lds	r18, 0x0068
    234a:	30 91 69 00 	lds	r19, 0x0069
    234e:	80 91 70 00 	lds	r24, 0x0070
    2352:	88 2f       	mov	r24, r24
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	f9 01       	movw	r30, r18
    2358:	e8 0f       	add	r30, r24
    235a:	f9 1f       	adc	r31, r25
    235c:	80 81       	ld	r24, Z
    235e:	8c 93       	st	X, r24
	}
}
    2360:	cf 91       	pop	r28
    2362:	df 91       	pop	r29
    2364:	ff 91       	pop	r31
    2366:	ef 91       	pop	r30
    2368:	bf 91       	pop	r27
    236a:	af 91       	pop	r26
    236c:	9f 91       	pop	r25
    236e:	8f 91       	pop	r24
    2370:	7f 91       	pop	r23
    2372:	6f 91       	pop	r22
    2374:	5f 91       	pop	r21
    2376:	4f 91       	pop	r20
    2378:	3f 91       	pop	r19
    237a:	2f 91       	pop	r18
    237c:	0f 90       	pop	r0
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	0f 90       	pop	r0
    2382:	1f 90       	pop	r1
    2384:	18 95       	reti

00002386 <main>:
#include "DIO_int.h"
#include "LCD_int.h"
#include "USART_Interface.h"

int main()
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62

	return 0;
    238e:	80 e0       	ldi	r24, 0x00	; 0
    2390:	90 e0       	ldi	r25, 0x00	; 0
}
    2392:	cf 91       	pop	r28
    2394:	df 91       	pop	r29
    2396:	08 95       	ret

00002398 <__prologue_saves__>:
    2398:	2f 92       	push	r2
    239a:	3f 92       	push	r3
    239c:	4f 92       	push	r4
    239e:	5f 92       	push	r5
    23a0:	6f 92       	push	r6
    23a2:	7f 92       	push	r7
    23a4:	8f 92       	push	r8
    23a6:	9f 92       	push	r9
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ef 92       	push	r14
    23b2:	ff 92       	push	r15
    23b4:	0f 93       	push	r16
    23b6:	1f 93       	push	r17
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	ca 1b       	sub	r28, r26
    23c2:	db 0b       	sbc	r29, r27
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	09 94       	ijmp

000023d0 <__epilogue_restores__>:
    23d0:	2a 88       	ldd	r2, Y+18	; 0x12
    23d2:	39 88       	ldd	r3, Y+17	; 0x11
    23d4:	48 88       	ldd	r4, Y+16	; 0x10
    23d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    23d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    23da:	7d 84       	ldd	r7, Y+13	; 0x0d
    23dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    23de:	9b 84       	ldd	r9, Y+11	; 0x0b
    23e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    23e2:	b9 84       	ldd	r11, Y+9	; 0x09
    23e4:	c8 84       	ldd	r12, Y+8	; 0x08
    23e6:	df 80       	ldd	r13, Y+7	; 0x07
    23e8:	ee 80       	ldd	r14, Y+6	; 0x06
    23ea:	fd 80       	ldd	r15, Y+5	; 0x05
    23ec:	0c 81       	ldd	r16, Y+4	; 0x04
    23ee:	1b 81       	ldd	r17, Y+3	; 0x03
    23f0:	aa 81       	ldd	r26, Y+2	; 0x02
    23f2:	b9 81       	ldd	r27, Y+1	; 0x01
    23f4:	ce 0f       	add	r28, r30
    23f6:	d1 1d       	adc	r29, r1
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	ed 01       	movw	r28, r26
    2404:	08 95       	ret

00002406 <_exit>:
    2406:	f8 94       	cli

00002408 <__stop_program>:
    2408:	ff cf       	rjmp	.-2      	; 0x2408 <__stop_program>
