
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000073e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000a  00800060  00800060  000007b2  2**0
                  ALLOC
  2 .stab         00000aa4  00000000  00000000  000007b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000782  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 36       	cpi	r26, 0x6A	; 106
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 03 	call	0x69e	; 0x69e <main>
  74:	0c 94 9d 03 	jmp	0x73a	; 0x73a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
static u8 ADC_u8State= IDLE ;

//=====================================================================================================================

void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	#if ADC_VREF == AREF
		CLR_BIT(ADMUX , ADMUX_REFS0) ;
		CLR_BIT(ADMUX , ADMUX_REFS1) ;

	#elif ADC_VREF == AVCC
		SET_BIT(ADMUX , ADMUX_REFS0) ;
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8c 93       	st	X, r24
		CLR_BIT(ADMUX , ADMUX_REFS1) ;
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8c 93       	st	X, r24
	#endif


	/*Set Left Adjust Result*/
	#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			CLR_BIT(ADMUX , ADMUX_ADLAR) ;
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	8c 93       	st	X, r24
		#error "Wrong ADC_ADJUSTMENT config"

	#endif

	/*Set Prescaler Value*/
	ADSAR &= ADC_PRE_MASK ;
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 7f       	andi	r24, 0xF8	; 248
  ba:	8c 93       	st	X, r24
	ADSAR |= ADC_PRESCALLER ;
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	87 60       	ori	r24, 0x07	; 7
  c8:	8c 93       	st	X, r24

	/*Enable ADC Peripheral*/
	#if ADC_STATUS == ADC_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADEN) ;
	#elif ADC_STATUS == ADC_ENABLE
		SET_BIT(ADSAR , ADSAR_ADEN) ;
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 68       	ori	r24, 0x80	; 128
  d6:	8c 93       	st	X, r24

	/*Enable ADC Interrupt*/
	#if INT_STATUS == INT_DISABLE
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
	#elif INT_STATUS == INT_ENABLE
		SET_BIT(ADSAR , ADSAR_ADIE) ;
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 60       	ori	r24, 0x08	; 8
  e4:	8c 93       	st	X, r24
	#else
	#error "Wrong INT_STATUS config"
	#endif

}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_voidEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidEnable (void)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADEN) ;
  f4:	a6 e2       	ldi	r26, 0x26	; 38
  f6:	b0 e0       	ldi	r27, 0x00	; 0
  f8:	e6 e2       	ldi	r30, 0x26	; 38
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	80 81       	ld	r24, Z
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	8c 93       	st	X, r24
}
 102:	cf 91       	pop	r28
 104:	df 91       	pop	r29
 106:	08 95       	ret

00000108 <ADC_voidDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidDisable (void)
{
 108:	df 93       	push	r29
 10a:	cf 93       	push	r28
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADEN) ;
 110:	a6 e2       	ldi	r26, 0x26	; 38
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e6 e2       	ldi	r30, 0x26	; 38
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8f 77       	andi	r24, 0x7F	; 127
 11c:	8c 93       	st	X, r24
}
 11e:	cf 91       	pop	r28
 120:	df 91       	pop	r29
 122:	08 95       	ret

00000124 <ADC_voidInterruptEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptEnable (void)
{
 124:	df 93       	push	r29
 126:	cf 93       	push	r28
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADSAR , ADSAR_ADIE) ;
 12c:	a6 e2       	ldi	r26, 0x26	; 38
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e6 e2       	ldi	r30, 0x26	; 38
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 60       	ori	r24, 0x08	; 8
 138:	8c 93       	st	X, r24
}
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <ADC_voidInterruptDisable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void ADC_voidInterruptDisable (void)
{
 140:	df 93       	push	r29
 142:	cf 93       	push	r28
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(ADSAR , ADSAR_ADIE) ;
 148:	a6 e2       	ldi	r26, 0x26	; 38
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e6 e2       	ldi	r30, 0x26	; 38
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	8c 93       	st	X, r24
}
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <ADC_u8SetPrescaler>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t ADC_u8SetPrescaler (u8 Copy_u8Prescaler)
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	00 d0       	rcall	.+0      	; 0x162 <ADC_u8SetPrescaler+0x6>
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_OK ;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8Prescaler < 8)
 16c:	8a 81       	ldd	r24, Y+2	; 0x02
 16e:	88 30       	cpi	r24, 0x08	; 8
 170:	78 f4       	brcc	.+30     	; 0x190 <ADC_u8SetPrescaler+0x34>
	{
		/*Set Prescaler Value*/
		ADSAR &= ADC_PRE_MASK ;
 172:	a6 e2       	ldi	r26, 0x26	; 38
 174:	b0 e0       	ldi	r27, 0x00	; 0
 176:	e6 e2       	ldi	r30, 0x26	; 38
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	8c 93       	st	X, r24
		ADSAR |= Copy_u8Prescaler ;
 180:	a6 e2       	ldi	r26, 0x26	; 38
 182:	b0 e0       	ldi	r27, 0x00	; 0
 184:	e6 e2       	ldi	r30, 0x26	; 38
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	90 81       	ld	r25, Z
 18a:	8a 81       	ldd	r24, Y+2	; 0x02
 18c:	89 2b       	or	r24, r25
 18e:	8c 93       	st	X, r24
	}

	return Local_u8ErrorState ;
 190:	89 81       	ldd	r24, Y+1	; 0x01
}
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <ADC_u8GetResultSync>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t ADC_u8GetResultSync(u8 Copy_u8Channel,u16 *Copy_pu16Result )
{
 19c:	df 93       	push	r29
 19e:	cf 93       	push	r28
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	28 97       	sbiw	r28, 0x08	; 8
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	8e 83       	std	Y+6, r24	; 0x06
 1b2:	78 87       	std	Y+8, r23	; 0x08
 1b4:	6f 83       	std	Y+7, r22	; 0x07
	ES_t Local_u8ErrorState = ES_OK ;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
 1ba:	19 82       	std	Y+1, r1	; 0x01
 1bc:	1a 82       	std	Y+2, r1	; 0x02
 1be:	1b 82       	std	Y+3, r1	; 0x03
 1c0:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_pu16Result != NULL)
 1c2:	8f 81       	ldd	r24, Y+7	; 0x07
 1c4:	98 85       	ldd	r25, Y+8	; 0x08
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	09 f4       	brne	.+2      	; 0x1cc <ADC_u8GetResultSync+0x30>
 1ca:	75 c0       	rjmp	.+234    	; 0x2b6 <ADC_u8GetResultSync+0x11a>
	{
		if (ADC_u8State == IDLE)
 1cc:	80 91 64 00 	lds	r24, 0x0064
 1d0:	88 23       	and	r24, r24
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <ADC_u8GetResultSync+0x3a>
 1d4:	6d c0       	rjmp	.+218    	; 0x2b0 <ADC_u8GetResultSync+0x114>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	80 93 64 00 	sts	0x0064, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
 1dc:	a7 e2       	ldi	r26, 0x27	; 39
 1de:	b0 e0       	ldi	r27, 0x00	; 0
 1e0:	e7 e2       	ldi	r30, 0x27	; 39
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 7e       	andi	r24, 0xE0	; 224
 1e8:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
 1ea:	a7 e2       	ldi	r26, 0x27	; 39
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e7 e2       	ldi	r30, 0x27	; 39
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	90 81       	ld	r25, Z
 1f4:	8e 81       	ldd	r24, Y+6	; 0x06
 1f6:	89 2b       	or	r24, r25
 1f8:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
 1fa:	a6 e2       	ldi	r26, 0x26	; 38
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e6 e2       	ldi	r30, 0x26	; 38
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 64       	ori	r24, 0x40	; 64
 206:	8c 93       	st	X, r24
 208:	0b c0       	rjmp	.+22     	; 0x220 <ADC_u8GetResultSync+0x84>

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
			{
				Local_u32TimeoutCounter++ ;
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	9a 81       	ldd	r25, Y+2	; 0x02
 20e:	ab 81       	ldd	r26, Y+3	; 0x03
 210:	bc 81       	ldd	r27, Y+4	; 0x04
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	a1 1d       	adc	r26, r1
 216:	b1 1d       	adc	r27, r1
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	9a 83       	std	Y+2, r25	; 0x02
 21c:	ab 83       	std	Y+3, r26	; 0x03
 21e:	bc 83       	std	Y+4, r27	; 0x04

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;

			/*Waiting until the conversion is complete*/
			while (((GET_BIT(ADSAR , ADSAR_ADIF)) == 0) && (Local_u32TimeoutCounter < ADC_TIMEOUT))
 220:	e6 e2       	ldi	r30, 0x26	; 38
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	88 2f       	mov	r24, r24
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	80 71       	andi	r24, 0x10	; 16
 22c:	90 70       	andi	r25, 0x00	; 0
 22e:	95 95       	asr	r25
 230:	87 95       	ror	r24
 232:	95 95       	asr	r25
 234:	87 95       	ror	r24
 236:	95 95       	asr	r25
 238:	87 95       	ror	r24
 23a:	95 95       	asr	r25
 23c:	87 95       	ror	r24
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	61 f4       	brne	.+24     	; 0x25a <ADC_u8GetResultSync+0xbe>
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	ab 81       	ldd	r26, Y+3	; 0x03
 248:	bc 81       	ldd	r27, Y+4	; 0x04
 24a:	80 35       	cpi	r24, 0x50	; 80
 24c:	23 ec       	ldi	r18, 0xC3	; 195
 24e:	92 07       	cpc	r25, r18
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	a2 07       	cpc	r26, r18
 254:	20 e0       	ldi	r18, 0x00	; 0
 256:	b2 07       	cpc	r27, r18
 258:	c0 f2       	brcs	.-80     	; 0x20a <ADC_u8GetResultSync+0x6e>
			{
				Local_u32TimeoutCounter++ ;
			}
			if (Local_u32TimeoutCounter == ADC_TIMEOUT)
 25a:	89 81       	ldd	r24, Y+1	; 0x01
 25c:	9a 81       	ldd	r25, Y+2	; 0x02
 25e:	ab 81       	ldd	r26, Y+3	; 0x03
 260:	bc 81       	ldd	r27, Y+4	; 0x04
 262:	80 35       	cpi	r24, 0x50	; 80
 264:	23 ec       	ldi	r18, 0xC3	; 195
 266:	92 07       	cpc	r25, r18
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	a2 07       	cpc	r26, r18
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	b2 07       	cpc	r27, r18
 270:	19 f4       	brne	.+6      	; 0x278 <ADC_u8GetResultSync+0xdc>
			{
				Local_u8ErrorState = ES_OUT_OF_RANGE ;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	8d 83       	std	Y+5, r24	; 0x05
 276:	19 c0       	rjmp	.+50     	; 0x2aa <ADC_u8GetResultSync+0x10e>
			}
			else
			{
				/*Clear the interrupt flag*/
				SET_BIT(ADSAR , ADSAR_ADIF) ;
 278:	a6 e2       	ldi	r26, 0x26	; 38
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e6 e2       	ldi	r30, 0x26	; 38
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	80 61       	ori	r24, 0x10	; 16
 284:	8c 93       	st	X, r24

				/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					*Copy_pu16Result = (ADCL|(ADCH << 8))  ;
 286:	e4 e2       	ldi	r30, 0x24	; 36
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	28 2f       	mov	r18, r24
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	e5 e2       	ldi	r30, 0x25	; 37
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	88 2f       	mov	r24, r24
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	98 2f       	mov	r25, r24
 29c:	88 27       	eor	r24, r24
 29e:	82 2b       	or	r24, r18
 2a0:	93 2b       	or	r25, r19
 2a2:	ef 81       	ldd	r30, Y+7	; 0x07
 2a4:	f8 85       	ldd	r31, Y+8	; 0x08
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24

				#endif
			}

			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
 2aa:	10 92 64 00 	sts	0x0064, r1
 2ae:	05 c0       	rjmp	.+10     	; 0x2ba <ADC_u8GetResultSync+0x11e>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
 2b0:	83 e0       	ldi	r24, 0x03	; 3
 2b2:	8d 83       	std	Y+5, r24	; 0x05
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <ADC_u8GetResultSync+0x11e>


	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_u8ErrorState ;
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
}
 2bc:	28 96       	adiw	r28, 0x08	; 8
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	f8 94       	cli
 2c2:	de bf       	out	0x3e, r29	; 62
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	cd bf       	out	0x3d, r28	; 61
 2c8:	cf 91       	pop	r28
 2ca:	df 91       	pop	r29
 2cc:	08 95       	ret

000002ce <ADC_u8StartConversionAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t ADC_u8StartConversionAsynch (u8 Copy_u8Channel , u16 *Copy_pu16Result , void (*Copy_pvNotificationFunc)(void))
{
 2ce:	df 93       	push	r29
 2d0:	cf 93       	push	r28
 2d2:	00 d0       	rcall	.+0      	; 0x2d4 <ADC_u8StartConversionAsynch+0x6>
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <ADC_u8StartConversionAsynch+0x8>
 2d6:	00 d0       	rcall	.+0      	; 0x2d8 <ADC_u8StartConversionAsynch+0xa>
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	8a 83       	std	Y+2, r24	; 0x02
 2de:	7c 83       	std	Y+4, r23	; 0x04
 2e0:	6b 83       	std	Y+3, r22	; 0x03
 2e2:	5e 83       	std	Y+6, r21	; 0x06
 2e4:	4d 83       	std	Y+5, r20	; 0x05
	ES_t Local_u8ErrorState = ES_OK ;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_pu16Result != NULL) && (Copy_pvNotificationFunc != NULL))
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	d1 f1       	breq	.+116    	; 0x366 <ADC_u8StartConversionAsynch+0x98>
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	b1 f1       	breq	.+108    	; 0x366 <ADC_u8StartConversionAsynch+0x98>
	{
		if (ADC_u8State == IDLE)
 2fa:	80 91 64 00 	lds	r24, 0x0064
 2fe:	88 23       	and	r24, r24
 300:	79 f5       	brne	.+94     	; 0x360 <ADC_u8StartConversionAsynch+0x92>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 93 64 00 	sts	0x0064, r24

			/*Set ISR State*/
			ADC_u8ISRState = SINGLE_CHANNEL_ASYNCH ;
 308:	10 92 65 00 	sts	0x0065, r1

			/*Initialize the global result pointer*/
			ADC_pu16AsynchConversionResult = Copy_pu16Result;
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	9c 81       	ldd	r25, Y+4	; 0x04
 310:	90 93 61 00 	sts	0x0061, r25
 314:	80 93 60 00 	sts	0x0060, r24

			/*Initialize the global notification function pointer*/
			ADC_pvNotificationFunc= Copy_pvNotificationFunc;
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	90 93 63 00 	sts	0x0063, r25
 320:	80 93 62 00 	sts	0x0062, r24

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
 324:	a7 e2       	ldi	r26, 0x27	; 39
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e7 e2       	ldi	r30, 0x27	; 39
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	80 7e       	andi	r24, 0xE0	; 224
 330:	8c 93       	st	X, r24
			ADMUX |= Copy_u8Channel ;
 332:	a7 e2       	ldi	r26, 0x27	; 39
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e7 e2       	ldi	r30, 0x27	; 39
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	90 81       	ld	r25, Z
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	89 2b       	or	r24, r25
 340:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
 342:	a6 e2       	ldi	r26, 0x26	; 38
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	e6 e2       	ldi	r30, 0x26	; 38
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 64       	ori	r24, 0x40	; 64
 34e:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
 350:	a6 e2       	ldi	r26, 0x26	; 38
 352:	b0 e0       	ldi	r27, 0x00	; 0
 354:	e6 e2       	ldi	r30, 0x26	; 38
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	88 60       	ori	r24, 0x08	; 8
 35c:	8c 93       	st	X, r24
 35e:	05 c0       	rjmp	.+10     	; 0x36a <ADC_u8StartConversionAsynch+0x9c>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	89 83       	std	Y+1, r24	; 0x01
 364:	02 c0       	rjmp	.+4      	; 0x36a <ADC_u8StartConversionAsynch+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8ErrorState ;
 36a:	89 81       	ldd	r24, Y+1	; 0x01
}
 36c:	26 96       	adiw	r28, 0x06	; 6
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <ADC_u8StartChainAsynch>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

ES_t ADC_u8StartChainAsynch(Chain_t *Copy_Chain)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	00 d0       	rcall	.+0      	; 0x384 <ADC_u8StartChainAsynch+0x6>
 384:	0f 92       	push	r0
 386:	cd b7       	in	r28, 0x3d	; 61
 388:	de b7       	in	r29, 0x3e	; 62
 38a:	9b 83       	std	Y+3, r25	; 0x03
 38c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_u8ErrorState = ES_OK ;
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_Chain != NULL) && (Copy_Chain->Channel != NULL) && (Copy_Chain->NotificationFunc != NULL) && (Copy_Chain->Result))
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	9b 81       	ldd	r25, Y+3	; 0x03
 396:	00 97       	sbiw	r24, 0x00	; 0
 398:	09 f4       	brne	.+2      	; 0x39c <ADC_u8StartChainAsynch+0x1e>
 39a:	6b c0       	rjmp	.+214    	; 0x472 <ADC_u8StartChainAsynch+0xf4>
 39c:	ea 81       	ldd	r30, Y+2	; 0x02
 39e:	fb 81       	ldd	r31, Y+3	; 0x03
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	09 f4       	brne	.+2      	; 0x3aa <ADC_u8StartChainAsynch+0x2c>
 3a8:	64 c0       	rjmp	.+200    	; 0x472 <ADC_u8StartChainAsynch+0xf4>
 3aa:	ea 81       	ldd	r30, Y+2	; 0x02
 3ac:	fb 81       	ldd	r31, Y+3	; 0x03
 3ae:	85 81       	ldd	r24, Z+5	; 0x05
 3b0:	96 81       	ldd	r25, Z+6	; 0x06
 3b2:	00 97       	sbiw	r24, 0x00	; 0
 3b4:	09 f4       	brne	.+2      	; 0x3b8 <ADC_u8StartChainAsynch+0x3a>
 3b6:	5d c0       	rjmp	.+186    	; 0x472 <ADC_u8StartChainAsynch+0xf4>
 3b8:	ea 81       	ldd	r30, Y+2	; 0x02
 3ba:	fb 81       	ldd	r31, Y+3	; 0x03
 3bc:	82 81       	ldd	r24, Z+2	; 0x02
 3be:	93 81       	ldd	r25, Z+3	; 0x03
 3c0:	00 97       	sbiw	r24, 0x00	; 0
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <ADC_u8StartChainAsynch+0x48>
 3c4:	56 c0       	rjmp	.+172    	; 0x472 <ADC_u8StartChainAsynch+0xf4>
	{
		if (ADC_u8State == IDLE)
 3c6:	80 91 64 00 	lds	r24, 0x0064
 3ca:	88 23       	and	r24, r24
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <ADC_u8StartChainAsynch+0x52>
 3ce:	4e c0       	rjmp	.+156    	; 0x46c <ADC_u8StartChainAsynch+0xee>
		{
			/*ADC is now Busy*/
			ADC_u8State = BUSY ;
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	80 93 64 00 	sts	0x0064, r24

			/*Set ISR State*/
			ADC_u8ISRState = CHAIN_CHANNEL_ASYNCH ;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 65 00 	sts	0x0065, r24

			/*Assign the ADC data globally*/
			ADC_pu16AsynchConversionResult = Copy_Chain->Result ;
 3dc:	ea 81       	ldd	r30, Y+2	; 0x02
 3de:	fb 81       	ldd	r31, Y+3	; 0x03
 3e0:	82 81       	ldd	r24, Z+2	; 0x02
 3e2:	93 81       	ldd	r25, Z+3	; 0x03
 3e4:	90 93 61 00 	sts	0x0061, r25
 3e8:	80 93 60 00 	sts	0x0060, r24
			ADC_pu8ChainChannel = Copy_Chain->Channel ;
 3ec:	ea 81       	ldd	r30, Y+2	; 0x02
 3ee:	fb 81       	ldd	r31, Y+3	; 0x03
 3f0:	80 81       	ld	r24, Z
 3f2:	91 81       	ldd	r25, Z+1	; 0x01
 3f4:	90 93 67 00 	sts	0x0067, r25
 3f8:	80 93 66 00 	sts	0x0066, r24
			ADC_u8ChainSize = Copy_Chain->Size ;
 3fc:	ea 81       	ldd	r30, Y+2	; 0x02
 3fe:	fb 81       	ldd	r31, Y+3	; 0x03
 400:	84 81       	ldd	r24, Z+4	; 0x04
 402:	80 93 68 00 	sts	0x0068, r24
			ADC_pvNotificationFunc = Copy_Chain->NotificationFunc ;
 406:	ea 81       	ldd	r30, Y+2	; 0x02
 408:	fb 81       	ldd	r31, Y+3	; 0x03
 40a:	85 81       	ldd	r24, Z+5	; 0x05
 40c:	96 81       	ldd	r25, Z+6	; 0x06
 40e:	90 93 63 00 	sts	0x0063, r25
 412:	80 93 62 00 	sts	0x0062, r24

			/*Set Index to first element*/
			ADC_u8Index = 0 ;
 416:	10 92 69 00 	sts	0x0069, r1

			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
 41a:	a7 e2       	ldi	r26, 0x27	; 39
 41c:	b0 e0       	ldi	r27, 0x00	; 0
 41e:	e7 e2       	ldi	r30, 0x27	; 39
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	80 7e       	andi	r24, 0xE0	; 224
 426:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
 428:	a7 e2       	ldi	r26, 0x27	; 39
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e7 e2       	ldi	r30, 0x27	; 39
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	40 81       	ld	r20, Z
 432:	20 91 66 00 	lds	r18, 0x0066
 436:	30 91 67 00 	lds	r19, 0x0067
 43a:	80 91 69 00 	lds	r24, 0x0069
 43e:	88 2f       	mov	r24, r24
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	f9 01       	movw	r30, r18
 444:	e8 0f       	add	r30, r24
 446:	f9 1f       	adc	r31, r25
 448:	80 81       	ld	r24, Z
 44a:	84 2b       	or	r24, r20
 44c:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
 44e:	a6 e2       	ldi	r26, 0x26	; 38
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	e6 e2       	ldi	r30, 0x26	; 38
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	80 64       	ori	r24, 0x40	; 64
 45a:	8c 93       	st	X, r24

			/*ADC Conversion Complete Interrupt Enable*/
			SET_BIT(ADSAR , ADSAR_ADIE) ;
 45c:	a6 e2       	ldi	r26, 0x26	; 38
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	e6 e2       	ldi	r30, 0x26	; 38
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	88 60       	ori	r24, 0x08	; 8
 468:	8c 93       	st	X, r24
 46a:	05 c0       	rjmp	.+10     	; 0x476 <ADC_u8StartChainAsynch+0xf8>
		}
		else
		{
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	89 83       	std	Y+1, r24	; 0x01
 470:	02 c0       	rjmp	.+4      	; 0x476 <ADC_u8StartChainAsynch+0xf8>
		}

	}
	else
	{
		Local_u8ErrorState = ES_NULL_POINTER ;
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState ;
 476:	89 81       	ldd	r24, Y+1	; 0x01
}
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	cf 91       	pop	r28
 480:	df 91       	pop	r29
 482:	08 95       	ret

00000484 <__vector_16>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

/* ISR for ADC conversion complete */
void __vector_16 (void)  __attribute__((signal)) ;
void __vector_16 (void)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
 4a6:	df 93       	push	r29
 4a8:	cf 93       	push	r28
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	if (ADC_u8ISRState == SINGLE_CHANNEL_ASYNCH)
 4ae:	80 91 65 00 	lds	r24, 0x0065
 4b2:	88 23       	and	r24, r24
 4b4:	19 f5       	brne	.+70     	; 0x4fc <__vector_16+0x78>
	{
		/*Return Conversion Result*/
				#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
					* ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
 4b6:	a0 91 60 00 	lds	r26, 0x0060
 4ba:	b0 91 61 00 	lds	r27, 0x0061
 4be:	e4 e2       	ldi	r30, 0x24	; 36
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	28 2f       	mov	r18, r24
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	e5 e2       	ldi	r30, 0x25	; 37
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	98 2f       	mov	r25, r24
 4d4:	88 27       	eor	r24, r24
 4d6:	82 2b       	or	r24, r18
 4d8:	93 2b       	or	r25, r19
 4da:	8d 93       	st	X+, r24
 4dc:	9c 93       	st	X, r25
					#error "Wrong ADC_ADJUSTMENT config"

				#endif

		/*ADC is IDLE*/
		ADC_u8State = IDLE ;
 4de:	10 92 64 00 	sts	0x0064, r1

		/*Call Notification Function*/
		ADC_pvNotificationFunc() ;
 4e2:	e0 91 62 00 	lds	r30, 0x0062
 4e6:	f0 91 63 00 	lds	r31, 0x0063
 4ea:	09 95       	icall

		/*Disable the Conversion Complete Interrupt*/
		CLR_BIT(ADSAR , ADSAR_ADIE) ;
 4ec:	a6 e2       	ldi	r26, 0x26	; 38
 4ee:	b0 e0       	ldi	r27, 0x00	; 0
 4f0:	e6 e2       	ldi	r30, 0x26	; 38
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	80 81       	ld	r24, Z
 4f6:	87 7f       	andi	r24, 0xF7	; 247
 4f8:	8c 93       	st	X, r24
 4fa:	50 c0       	rjmp	.+160    	; 0x59c <__vector_16+0x118>
	}
	else
	{
		/*Return Conversion Result*/
		#if ADC_ADJUSTMENT == RIGHT_ADJUSTMENT
			*ADC_pu16AsynchConversionResult = (ADCL|(ADCH << 8))  ;
 4fc:	a0 91 60 00 	lds	r26, 0x0060
 500:	b0 91 61 00 	lds	r27, 0x0061
 504:	e4 e2       	ldi	r30, 0x24	; 36
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	28 2f       	mov	r18, r24
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	e5 e2       	ldi	r30, 0x25	; 37
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	98 2f       	mov	r25, r24
 51a:	88 27       	eor	r24, r24
 51c:	82 2b       	or	r24, r18
 51e:	93 2b       	or	r25, r19
 520:	11 96       	adiw	r26, 0x01	; 1
 522:	9c 93       	st	X, r25
 524:	8e 93       	st	-X, r24
			#error "Wrong ADC_ADJUSTMENT config"

		#endif

		/*Increment Data index of the chain*/
		ADC_u8Index++ ;
 526:	80 91 69 00 	lds	r24, 0x0069
 52a:	8f 5f       	subi	r24, 0xFF	; 255
 52c:	80 93 69 00 	sts	0x0069, r24

		if (ADC_u8Index == ADC_u8ChainSize)
 530:	90 91 69 00 	lds	r25, 0x0069
 534:	80 91 68 00 	lds	r24, 0x0068
 538:	98 17       	cp	r25, r24
 53a:	79 f4       	brne	.+30     	; 0x55a <__vector_16+0xd6>
		{
			/*ADC is IDLE*/
			ADC_u8State = IDLE ;
 53c:	10 92 64 00 	sts	0x0064, r1

			/*Call Notification Function*/
			ADC_pvNotificationFunc() ;
 540:	e0 91 62 00 	lds	r30, 0x0062
 544:	f0 91 63 00 	lds	r31, 0x0063
 548:	09 95       	icall

			/*Disable the Conversion Complete Interrupt*/
			CLR_BIT(ADSAR , ADSAR_ADIE) ;
 54a:	a6 e2       	ldi	r26, 0x26	; 38
 54c:	b0 e0       	ldi	r27, 0x00	; 0
 54e:	e6 e2       	ldi	r30, 0x26	; 38
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	87 7f       	andi	r24, 0xF7	; 247
 556:	8c 93       	st	X, r24
 558:	21 c0       	rjmp	.+66     	; 0x59c <__vector_16+0x118>
		}
		else
		{
			/*Set required channel*/
			ADMUX &= ADC_CH_MASK ;
 55a:	a7 e2       	ldi	r26, 0x27	; 39
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e7 e2       	ldi	r30, 0x27	; 39
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	80 7e       	andi	r24, 0xE0	; 224
 566:	8c 93       	st	X, r24
			ADMUX |= ADC_pu8ChainChannel[ADC_u8Index] ;
 568:	a7 e2       	ldi	r26, 0x27	; 39
 56a:	b0 e0       	ldi	r27, 0x00	; 0
 56c:	e7 e2       	ldi	r30, 0x27	; 39
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	40 81       	ld	r20, Z
 572:	20 91 66 00 	lds	r18, 0x0066
 576:	30 91 67 00 	lds	r19, 0x0067
 57a:	80 91 69 00 	lds	r24, 0x0069
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	f9 01       	movw	r30, r18
 584:	e8 0f       	add	r30, r24
 586:	f9 1f       	adc	r31, r25
 588:	80 81       	ld	r24, Z
 58a:	84 2b       	or	r24, r20
 58c:	8c 93       	st	X, r24

			/*Start Conversion*/
			SET_BIT(ADSAR , ADSAR_ADSC) ;
 58e:	a6 e2       	ldi	r26, 0x26	; 38
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	e6 e2       	ldi	r30, 0x26	; 38
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 64       	ori	r24, 0x40	; 64
 59a:	8c 93       	st	X, r24
		}
	}
}
 59c:	cf 91       	pop	r28
 59e:	df 91       	pop	r29
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <MAPPING_u32GetOutput>:

#include "stdTypes.h"
#include "MAPPING.h"

u32 MAPPING_u32GetOutput (MAPPING_CONFIG * mapping_config)
{
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	df 93       	push	r29
 5cc:	cf 93       	push	r28
 5ce:	00 d0       	rcall	.+0      	; 0x5d0 <MAPPING_u32GetOutput+0xe>
 5d0:	00 d0       	rcall	.+0      	; 0x5d2 <MAPPING_u32GetOutput+0x10>
 5d2:	00 d0       	rcall	.+0      	; 0x5d4 <MAPPING_u32GetOutput+0x12>
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
 5d8:	9e 83       	std	Y+6, r25	; 0x06
 5da:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32OutputValue ;
	Local_u32OutputValue = ((((mapping_config->Copy_u32InputValue - mapping_config->Copy_u32InputMin) * (mapping_config->Copy_u32OutputMax - mapping_config->Copy_u32OutputMin)) / (mapping_config->Copy_u32InputMax - mapping_config->Copy_u32InputMin)) + mapping_config->Copy_u32OutputMin) ;
 5dc:	ed 81       	ldd	r30, Y+5	; 0x05
 5de:	fe 81       	ldd	r31, Y+6	; 0x06
 5e0:	20 89       	ldd	r18, Z+16	; 0x10
 5e2:	31 89       	ldd	r19, Z+17	; 0x11
 5e4:	42 89       	ldd	r20, Z+18	; 0x12
 5e6:	53 89       	ldd	r21, Z+19	; 0x13
 5e8:	ed 81       	ldd	r30, Y+5	; 0x05
 5ea:	fe 81       	ldd	r31, Y+6	; 0x06
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	a2 81       	ldd	r26, Z+2	; 0x02
 5f2:	b3 81       	ldd	r27, Z+3	; 0x03
 5f4:	79 01       	movw	r14, r18
 5f6:	8a 01       	movw	r16, r20
 5f8:	e8 1a       	sub	r14, r24
 5fa:	f9 0a       	sbc	r15, r25
 5fc:	0a 0b       	sbc	r16, r26
 5fe:	1b 0b       	sbc	r17, r27
 600:	ed 81       	ldd	r30, Y+5	; 0x05
 602:	fe 81       	ldd	r31, Y+6	; 0x06
 604:	24 85       	ldd	r18, Z+12	; 0x0c
 606:	35 85       	ldd	r19, Z+13	; 0x0d
 608:	46 85       	ldd	r20, Z+14	; 0x0e
 60a:	57 85       	ldd	r21, Z+15	; 0x0f
 60c:	ed 81       	ldd	r30, Y+5	; 0x05
 60e:	fe 81       	ldd	r31, Y+6	; 0x06
 610:	80 85       	ldd	r24, Z+8	; 0x08
 612:	91 85       	ldd	r25, Z+9	; 0x09
 614:	a2 85       	ldd	r26, Z+10	; 0x0a
 616:	b3 85       	ldd	r27, Z+11	; 0x0b
 618:	28 1b       	sub	r18, r24
 61a:	39 0b       	sbc	r19, r25
 61c:	4a 0b       	sbc	r20, r26
 61e:	5b 0b       	sbc	r21, r27
 620:	c8 01       	movw	r24, r16
 622:	b7 01       	movw	r22, r14
 624:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__mulsi3>
 628:	7b 01       	movw	r14, r22
 62a:	8c 01       	movw	r16, r24
 62c:	ed 81       	ldd	r30, Y+5	; 0x05
 62e:	fe 81       	ldd	r31, Y+6	; 0x06
 630:	24 81       	ldd	r18, Z+4	; 0x04
 632:	35 81       	ldd	r19, Z+5	; 0x05
 634:	46 81       	ldd	r20, Z+6	; 0x06
 636:	57 81       	ldd	r21, Z+7	; 0x07
 638:	ed 81       	ldd	r30, Y+5	; 0x05
 63a:	fe 81       	ldd	r31, Y+6	; 0x06
 63c:	80 81       	ld	r24, Z
 63e:	91 81       	ldd	r25, Z+1	; 0x01
 640:	a2 81       	ldd	r26, Z+2	; 0x02
 642:	b3 81       	ldd	r27, Z+3	; 0x03
 644:	28 1b       	sub	r18, r24
 646:	39 0b       	sbc	r19, r25
 648:	4a 0b       	sbc	r20, r26
 64a:	5b 0b       	sbc	r21, r27
 64c:	c8 01       	movw	r24, r16
 64e:	b7 01       	movw	r22, r14
 650:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__udivmodsi4>
 654:	da 01       	movw	r26, r20
 656:	c9 01       	movw	r24, r18
 658:	9c 01       	movw	r18, r24
 65a:	ad 01       	movw	r20, r26
 65c:	ed 81       	ldd	r30, Y+5	; 0x05
 65e:	fe 81       	ldd	r31, Y+6	; 0x06
 660:	80 85       	ldd	r24, Z+8	; 0x08
 662:	91 85       	ldd	r25, Z+9	; 0x09
 664:	a2 85       	ldd	r26, Z+10	; 0x0a
 666:	b3 85       	ldd	r27, Z+11	; 0x0b
 668:	82 0f       	add	r24, r18
 66a:	93 1f       	adc	r25, r19
 66c:	a4 1f       	adc	r26, r20
 66e:	b5 1f       	adc	r27, r21
 670:	89 83       	std	Y+1, r24	; 0x01
 672:	9a 83       	std	Y+2, r25	; 0x02
 674:	ab 83       	std	Y+3, r26	; 0x03
 676:	bc 83       	std	Y+4, r27	; 0x04
	return Local_u32OutputValue  ;
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	9a 81       	ldd	r25, Y+2	; 0x02
 67c:	ab 81       	ldd	r26, Y+3	; 0x03
 67e:	bc 81       	ldd	r27, Y+4	; 0x04
}
 680:	bc 01       	movw	r22, r24
 682:	cd 01       	movw	r24, r26
 684:	26 96       	adiw	r28, 0x06	; 6
 686:	0f b6       	in	r0, 0x3f	; 63
 688:	f8 94       	cli
 68a:	de bf       	out	0x3e, r29	; 62
 68c:	0f be       	out	0x3f, r0	; 63
 68e:	cd bf       	out	0x3d, r28	; 61
 690:	cf 91       	pop	r28
 692:	df 91       	pop	r29
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	ff 90       	pop	r15
 69a:	ef 90       	pop	r14
 69c:	08 95       	ret

0000069e <main>:
 *  Created on: Dec 13, 2024
 *      Author: mylap
 */
#include "stdTypes.h"
u32 main(void)
{
 69e:	df 93       	push	r29
 6a0:	cf 93       	push	r28
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62

	return 0;
 6a6:	80 e0       	ldi	r24, 0x00	; 0
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	a0 e0       	ldi	r26, 0x00	; 0
 6ac:	b0 e0       	ldi	r27, 0x00	; 0
}
 6ae:	bc 01       	movw	r22, r24
 6b0:	cd 01       	movw	r24, r26
 6b2:	cf 91       	pop	r28
 6b4:	df 91       	pop	r29
 6b6:	08 95       	ret

000006b8 <__mulsi3>:
 6b8:	62 9f       	mul	r22, r18
 6ba:	d0 01       	movw	r26, r0
 6bc:	73 9f       	mul	r23, r19
 6be:	f0 01       	movw	r30, r0
 6c0:	82 9f       	mul	r24, r18
 6c2:	e0 0d       	add	r30, r0
 6c4:	f1 1d       	adc	r31, r1
 6c6:	64 9f       	mul	r22, r20
 6c8:	e0 0d       	add	r30, r0
 6ca:	f1 1d       	adc	r31, r1
 6cc:	92 9f       	mul	r25, r18
 6ce:	f0 0d       	add	r31, r0
 6d0:	83 9f       	mul	r24, r19
 6d2:	f0 0d       	add	r31, r0
 6d4:	74 9f       	mul	r23, r20
 6d6:	f0 0d       	add	r31, r0
 6d8:	65 9f       	mul	r22, r21
 6da:	f0 0d       	add	r31, r0
 6dc:	99 27       	eor	r25, r25
 6de:	72 9f       	mul	r23, r18
 6e0:	b0 0d       	add	r27, r0
 6e2:	e1 1d       	adc	r30, r1
 6e4:	f9 1f       	adc	r31, r25
 6e6:	63 9f       	mul	r22, r19
 6e8:	b0 0d       	add	r27, r0
 6ea:	e1 1d       	adc	r30, r1
 6ec:	f9 1f       	adc	r31, r25
 6ee:	bd 01       	movw	r22, r26
 6f0:	cf 01       	movw	r24, r30
 6f2:	11 24       	eor	r1, r1
 6f4:	08 95       	ret

000006f6 <__udivmodsi4>:
 6f6:	a1 e2       	ldi	r26, 0x21	; 33
 6f8:	1a 2e       	mov	r1, r26
 6fa:	aa 1b       	sub	r26, r26
 6fc:	bb 1b       	sub	r27, r27
 6fe:	fd 01       	movw	r30, r26
 700:	0d c0       	rjmp	.+26     	; 0x71c <__udivmodsi4_ep>

00000702 <__udivmodsi4_loop>:
 702:	aa 1f       	adc	r26, r26
 704:	bb 1f       	adc	r27, r27
 706:	ee 1f       	adc	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	a2 17       	cp	r26, r18
 70c:	b3 07       	cpc	r27, r19
 70e:	e4 07       	cpc	r30, r20
 710:	f5 07       	cpc	r31, r21
 712:	20 f0       	brcs	.+8      	; 0x71c <__udivmodsi4_ep>
 714:	a2 1b       	sub	r26, r18
 716:	b3 0b       	sbc	r27, r19
 718:	e4 0b       	sbc	r30, r20
 71a:	f5 0b       	sbc	r31, r21

0000071c <__udivmodsi4_ep>:
 71c:	66 1f       	adc	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	1a 94       	dec	r1
 726:	69 f7       	brne	.-38     	; 0x702 <__udivmodsi4_loop>
 728:	60 95       	com	r22
 72a:	70 95       	com	r23
 72c:	80 95       	com	r24
 72e:	90 95       	com	r25
 730:	9b 01       	movw	r18, r22
 732:	ac 01       	movw	r20, r24
 734:	bd 01       	movw	r22, r26
 736:	cf 01       	movw	r24, r30
 738:	08 95       	ret

0000073a <_exit>:
 73a:	f8 94       	cli

0000073c <__stop_program>:
 73c:	ff cf       	rjmp	.-2      	; 0x73c <__stop_program>
