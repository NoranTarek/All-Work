
cal_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002470  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00002470  000024e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001fec  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c81  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005179  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  000052b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005429  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007072  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008d0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000090f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000098c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3a 11 	call	0x2274	; 0x2274 <main>
      7a:	0c 94 36 12 	jmp	0x246c	; 0x246c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1b 12 	jmp	0x2436	; 0x2436 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
     b40:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     b42:	ea e3       	ldi	r30, 0x3A	; 58
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     b4a:	e7 e3       	ldi	r30, 0x37	; 55
     b4c:	f0 e0       	ldi	r31, 0x00	; 0
     b4e:	8f ef       	ldi	r24, 0xFF	; 255
     b50:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     b52:	e4 e3       	ldi	r30, 0x34	; 52
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 ef       	ldi	r24, 0xF0	; 240
     b58:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     b5a:	e1 e3       	ldi	r30, 0x31	; 49
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     b62:	eb e3       	ldi	r30, 0x3B	; 59
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     b68:	e8 e3       	ldi	r30, 0x38	; 56
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     b6e:	e5 e3       	ldi	r30, 0x35	; 53
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	80 83       	st	Z, r24
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     b76:	e2 e3       	ldi	r30, 0x32	; 50
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
     b80:	89 81       	ldd	r24, Y+1	; 0x01
}
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_enuSetPortDirection+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <DIO_enuSetPortDirection+0x8>
     b92:	0f 92       	push	r0
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	8a 83       	std	Y+2, r24	; 0x02
     b9a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     b9c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     b9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ba0:	84 30       	cpi	r24, 0x04	; 4
     ba2:	a8 f5       	brcc	.+106    	; 0xc0e <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	28 2f       	mov	r18, r24
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	3d 83       	std	Y+5, r19	; 0x05
     bac:	2c 83       	std	Y+4, r18	; 0x04
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	9d 81       	ldd	r25, Y+5	; 0x05
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	91 05       	cpc	r25, r1
     bb6:	d1 f0       	breq	.+52     	; 0xbec <DIO_enuSetPortDirection+0x62>
     bb8:	2c 81       	ldd	r18, Y+4	; 0x04
     bba:	3d 81       	ldd	r19, Y+5	; 0x05
     bbc:	22 30       	cpi	r18, 0x02	; 2
     bbe:	31 05       	cpc	r19, r1
     bc0:	2c f4       	brge	.+10     	; 0xbcc <DIO_enuSetPortDirection+0x42>
     bc2:	8c 81       	ldd	r24, Y+4	; 0x04
     bc4:	9d 81       	ldd	r25, Y+5	; 0x05
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <DIO_enuSetPortDirection+0x58>
     bca:	1e c0       	rjmp	.+60     	; 0xc08 <DIO_enuSetPortDirection+0x7e>
     bcc:	2c 81       	ldd	r18, Y+4	; 0x04
     bce:	3d 81       	ldd	r19, Y+5	; 0x05
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	81 f0       	breq	.+32     	; 0xbf6 <DIO_enuSetPortDirection+0x6c>
     bd6:	8c 81       	ldd	r24, Y+4	; 0x04
     bd8:	9d 81       	ldd	r25, Y+5	; 0x05
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	91 05       	cpc	r25, r1
     bde:	81 f0       	breq	.+32     	; 0xc00 <DIO_enuSetPortDirection+0x76>
     be0:	13 c0       	rjmp	.+38     	; 0xc08 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	80 83       	st	Z, r24
     bea:	0e c0       	rjmp	.+28     	; 0xc08 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     bec:	e7 e3       	ldi	r30, 0x37	; 55
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	80 83       	st	Z, r24
     bf4:	09 c0       	rjmp	.+18     	; 0xc08 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     bf6:	e4 e3       	ldi	r30, 0x34	; 52
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	80 83       	st	Z, r24
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     c00:	e1 e3       	ldi	r30, 0x31	; 49
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	89 83       	std	Y+1, r24	; 0x01
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     c0e:	83 e0       	ldi	r24, 0x03	; 3
     c10:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
}
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <DIO_enuSetPortValue+0x6>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <DIO_enuSetPortValue+0x8>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     c36:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	a8 f5       	brcc	.+106    	; 0xca8 <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	28 2f       	mov	r18, r24
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	9d 81       	ldd	r25, Y+5	; 0x05
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	91 05       	cpc	r25, r1
     c50:	d1 f0       	breq	.+52     	; 0xc86 <DIO_enuSetPortValue+0x62>
     c52:	2c 81       	ldd	r18, Y+4	; 0x04
     c54:	3d 81       	ldd	r19, Y+5	; 0x05
     c56:	22 30       	cpi	r18, 0x02	; 2
     c58:	31 05       	cpc	r19, r1
     c5a:	2c f4       	brge	.+10     	; 0xc66 <DIO_enuSetPortValue+0x42>
     c5c:	8c 81       	ldd	r24, Y+4	; 0x04
     c5e:	9d 81       	ldd	r25, Y+5	; 0x05
     c60:	00 97       	sbiw	r24, 0x00	; 0
     c62:	61 f0       	breq	.+24     	; 0xc7c <DIO_enuSetPortValue+0x58>
     c64:	1e c0       	rjmp	.+60     	; 0xca2 <DIO_enuSetPortValue+0x7e>
     c66:	2c 81       	ldd	r18, Y+4	; 0x04
     c68:	3d 81       	ldd	r19, Y+5	; 0x05
     c6a:	22 30       	cpi	r18, 0x02	; 2
     c6c:	31 05       	cpc	r19, r1
     c6e:	81 f0       	breq	.+32     	; 0xc90 <DIO_enuSetPortValue+0x6c>
     c70:	8c 81       	ldd	r24, Y+4	; 0x04
     c72:	9d 81       	ldd	r25, Y+5	; 0x05
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	81 f0       	breq	.+32     	; 0xc9a <DIO_enuSetPortValue+0x76>
     c7a:	13 c0       	rjmp	.+38     	; 0xca2 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     c7c:	eb e3       	ldi	r30, 0x3B	; 59
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	8b 81       	ldd	r24, Y+3	; 0x03
     c82:	80 83       	st	Z, r24
     c84:	0e c0       	rjmp	.+28     	; 0xca2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     c86:	e8 e3       	ldi	r30, 0x38	; 56
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	80 83       	st	Z, r24
     c8e:	09 c0       	rjmp	.+18     	; 0xca2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     c90:	e5 e3       	ldi	r30, 0x35	; 53
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	80 83       	st	Z, r24
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     c9a:	e2 e3       	ldi	r30, 0x32	; 50
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     cac:	89 81       	ldd	r24, Y+1	; 0x01
}
     cae:	0f 90       	pop	r0
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	08 95       	ret

00000cbe <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
     cbe:	df 93       	push	r29
     cc0:	cf 93       	push	r28
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <DIO_enuTogPort+0x6>
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <DIO_enuTogPort+0x8>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     ccc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	84 30       	cpi	r24, 0x04	; 4
     cd2:	08 f0       	brcs	.+2      	; 0xcd6 <DIO_enuTogPort+0x18>
     cd4:	41 c0       	rjmp	.+130    	; 0xd58 <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	3c 83       	std	Y+4, r19	; 0x04
     cde:	2b 83       	std	Y+3, r18	; 0x03
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	91 05       	cpc	r25, r1
     ce8:	e9 f0       	breq	.+58     	; 0xd24 <DIO_enuTogPort+0x66>
     cea:	2b 81       	ldd	r18, Y+3	; 0x03
     cec:	3c 81       	ldd	r19, Y+4	; 0x04
     cee:	22 30       	cpi	r18, 0x02	; 2
     cf0:	31 05       	cpc	r19, r1
     cf2:	2c f4       	brge	.+10     	; 0xcfe <DIO_enuTogPort+0x40>
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	61 f0       	breq	.+24     	; 0xd14 <DIO_enuTogPort+0x56>
     cfc:	2a c0       	rjmp	.+84     	; 0xd52 <DIO_enuTogPort+0x94>
     cfe:	2b 81       	ldd	r18, Y+3	; 0x03
     d00:	3c 81       	ldd	r19, Y+4	; 0x04
     d02:	22 30       	cpi	r18, 0x02	; 2
     d04:	31 05       	cpc	r19, r1
     d06:	b1 f0       	breq	.+44     	; 0xd34 <DIO_enuTogPort+0x76>
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	83 30       	cpi	r24, 0x03	; 3
     d0e:	91 05       	cpc	r25, r1
     d10:	c9 f0       	breq	.+50     	; 0xd44 <DIO_enuTogPort+0x86>
     d12:	1f c0       	rjmp	.+62     	; 0xd52 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
     d14:	ab e3       	ldi	r26, 0x3B	; 59
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	eb e3       	ldi	r30, 0x3B	; 59
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	80 95       	com	r24
     d20:	8c 93       	st	X, r24
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
     d24:	a8 e3       	ldi	r26, 0x38	; 56
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 e3       	ldi	r30, 0x38	; 56
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	80 95       	com	r24
     d30:	8c 93       	st	X, r24
     d32:	0f c0       	rjmp	.+30     	; 0xd52 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
     d34:	a5 e3       	ldi	r26, 0x35	; 53
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e5 e3       	ldi	r30, 0x35	; 53
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 95       	com	r24
     d40:	8c 93       	st	X, r24
     d42:	07 c0       	rjmp	.+14     	; 0xd52 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
     d44:	a2 e3       	ldi	r26, 0x32	; 50
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e2 e3       	ldi	r30, 0x32	; 50
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	80 95       	com	r24
     d50:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	89 83       	std	Y+1, r24	; 0x01
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
}
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	cf 91       	pop	r28
     d68:	df 91       	pop	r29
     d6a:	08 95       	ret

00000d6c <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <DIO_enuGetPortValue+0x6>
     d72:	00 d0       	rcall	.+0      	; 0xd74 <DIO_enuGetPortValue+0x8>
     d74:	00 d0       	rcall	.+0      	; 0xd76 <DIO_enuGetPortValue+0xa>
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	8a 83       	std	Y+2, r24	; 0x02
     d7c:	7c 83       	std	Y+4, r23	; 0x04
     d7e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     d80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	09 f4       	brne	.+2      	; 0xd8c <DIO_enuGetPortValue+0x20>
     d8a:	43 c0       	rjmp	.+134    	; 0xe12 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	e8 f5       	brcc	.+122    	; 0xe0c <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	3e 83       	std	Y+6, r19	; 0x06
     d9a:	2d 83       	std	Y+5, r18	; 0x05
     d9c:	8d 81       	ldd	r24, Y+5	; 0x05
     d9e:	9e 81       	ldd	r25, Y+6	; 0x06
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	91 05       	cpc	r25, r1
     da4:	e1 f0       	breq	.+56     	; 0xdde <DIO_enuGetPortValue+0x72>
     da6:	2d 81       	ldd	r18, Y+5	; 0x05
     da8:	3e 81       	ldd	r19, Y+6	; 0x06
     daa:	22 30       	cpi	r18, 0x02	; 2
     dac:	31 05       	cpc	r19, r1
     dae:	2c f4       	brge	.+10     	; 0xdba <DIO_enuGetPortValue+0x4e>
     db0:	8d 81       	ldd	r24, Y+5	; 0x05
     db2:	9e 81       	ldd	r25, Y+6	; 0x06
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	61 f0       	breq	.+24     	; 0xdd0 <DIO_enuGetPortValue+0x64>
     db8:	26 c0       	rjmp	.+76     	; 0xe06 <DIO_enuGetPortValue+0x9a>
     dba:	2d 81       	ldd	r18, Y+5	; 0x05
     dbc:	3e 81       	ldd	r19, Y+6	; 0x06
     dbe:	22 30       	cpi	r18, 0x02	; 2
     dc0:	31 05       	cpc	r19, r1
     dc2:	a1 f0       	breq	.+40     	; 0xdec <DIO_enuGetPortValue+0x80>
     dc4:	8d 81       	ldd	r24, Y+5	; 0x05
     dc6:	9e 81       	ldd	r25, Y+6	; 0x06
     dc8:	83 30       	cpi	r24, 0x03	; 3
     dca:	91 05       	cpc	r25, r1
     dcc:	b1 f0       	breq	.+44     	; 0xdfa <DIO_enuGetPortValue+0x8e>
     dce:	1b c0       	rjmp	.+54     	; 0xe06 <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
     dd0:	e9 e3       	ldi	r30, 0x39	; 57
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	eb 81       	ldd	r30, Y+3	; 0x03
     dd8:	fc 81       	ldd	r31, Y+4	; 0x04
     dda:	80 83       	st	Z, r24
     ddc:	14 c0       	rjmp	.+40     	; 0xe06 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
     dde:	e6 e3       	ldi	r30, 0x36	; 54
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	eb 81       	ldd	r30, Y+3	; 0x03
     de6:	fc 81       	ldd	r31, Y+4	; 0x04
     de8:	80 83       	st	Z, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
     dec:	e3 e3       	ldi	r30, 0x33	; 51
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	eb 81       	ldd	r30, Y+3	; 0x03
     df4:	fc 81       	ldd	r31, Y+4	; 0x04
     df6:	80 83       	st	Z, r24
     df8:	06 c0       	rjmp	.+12     	; 0xe06 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
     dfa:	e0 e3       	ldi	r30, 0x30	; 48
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	eb 81       	ldd	r30, Y+3	; 0x03
     e02:	fc 81       	ldd	r31, Y+4	; 0x04
     e04:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	05 c0       	rjmp	.+10     	; 0xe16 <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
     e0c:	83 e0       	ldi	r24, 0x03	; 3
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e12:	82 e0       	ldi	r24, 0x02	; 2
     e14:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e16:	89 81       	ldd	r24, Y+1	; 0x01
}
     e18:	26 96       	adiw	r28, 0x06	; 6
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <DIO_enuSetPinDirection+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <DIO_enuSetPinDirection+0x8>
     e32:	00 d0       	rcall	.+0      	; 0xe34 <DIO_enuSetPinDirection+0xa>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	8a 83       	std	Y+2, r24	; 0x02
     e3a:	6b 83       	std	Y+3, r22	; 0x03
     e3c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     e3e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	84 30       	cpi	r24, 0x04	; 4
     e44:	08 f0       	brcs	.+2      	; 0xe48 <DIO_enuSetPinDirection+0x1e>
     e46:	d1 c0       	rjmp	.+418    	; 0xfea <DIO_enuSetPinDirection+0x1c0>
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	08 f0       	brcs	.+2      	; 0xe50 <DIO_enuSetPinDirection+0x26>
     e4e:	cd c0       	rjmp	.+410    	; 0xfea <DIO_enuSetPinDirection+0x1c0>
     e50:	8c 81       	ldd	r24, Y+4	; 0x04
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	08 f0       	brcs	.+2      	; 0xe58 <DIO_enuSetPinDirection+0x2e>
     e56:	c9 c0       	rjmp	.+402    	; 0xfea <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3e 83       	std	Y+6, r19	; 0x06
     e60:	2d 83       	std	Y+5, r18	; 0x05
     e62:	6d 81       	ldd	r22, Y+5	; 0x05
     e64:	7e 81       	ldd	r23, Y+6	; 0x06
     e66:	61 30       	cpi	r22, 0x01	; 1
     e68:	71 05       	cpc	r23, r1
     e6a:	09 f4       	brne	.+2      	; 0xe6e <DIO_enuSetPinDirection+0x44>
     e6c:	41 c0       	rjmp	.+130    	; 0xef0 <DIO_enuSetPinDirection+0xc6>
     e6e:	8d 81       	ldd	r24, Y+5	; 0x05
     e70:	9e 81       	ldd	r25, Y+6	; 0x06
     e72:	82 30       	cpi	r24, 0x02	; 2
     e74:	91 05       	cpc	r25, r1
     e76:	34 f4       	brge	.+12     	; 0xe84 <DIO_enuSetPinDirection+0x5a>
     e78:	2d 81       	ldd	r18, Y+5	; 0x05
     e7a:	3e 81       	ldd	r19, Y+6	; 0x06
     e7c:	21 15       	cp	r18, r1
     e7e:	31 05       	cpc	r19, r1
     e80:	71 f0       	breq	.+28     	; 0xe9e <DIO_enuSetPinDirection+0x74>
     e82:	b0 c0       	rjmp	.+352    	; 0xfe4 <DIO_enuSetPinDirection+0x1ba>
     e84:	6d 81       	ldd	r22, Y+5	; 0x05
     e86:	7e 81       	ldd	r23, Y+6	; 0x06
     e88:	62 30       	cpi	r22, 0x02	; 2
     e8a:	71 05       	cpc	r23, r1
     e8c:	09 f4       	brne	.+2      	; 0xe90 <DIO_enuSetPinDirection+0x66>
     e8e:	59 c0       	rjmp	.+178    	; 0xf42 <DIO_enuSetPinDirection+0x118>
     e90:	8d 81       	ldd	r24, Y+5	; 0x05
     e92:	9e 81       	ldd	r25, Y+6	; 0x06
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	91 05       	cpc	r25, r1
     e98:	09 f4       	brne	.+2      	; 0xe9c <DIO_enuSetPinDirection+0x72>
     e9a:	7c c0       	rjmp	.+248    	; 0xf94 <DIO_enuSetPinDirection+0x16a>
     e9c:	a3 c0       	rjmp	.+326    	; 0xfe4 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     e9e:	aa e3       	ldi	r26, 0x3A	; 58
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	ea e3       	ldi	r30, 0x3A	; 58
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	48 2f       	mov	r20, r24
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	28 2f       	mov	r18, r24
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <DIO_enuSetPinDirection+0x90>
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	2a 95       	dec	r18
     ebc:	e2 f7       	brpl	.-8      	; 0xeb6 <DIO_enuSetPinDirection+0x8c>
     ebe:	80 95       	com	r24
     ec0:	84 23       	and	r24, r20
     ec2:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
     ec4:	aa e3       	ldi	r26, 0x3A	; 58
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	ea e3       	ldi	r30, 0x3A	; 58
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	b9 01       	movw	r22, r18
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <DIO_enuSetPinDirection+0xba>
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	8a 95       	dec	r24
     ee6:	e2 f7       	brpl	.-8      	; 0xee0 <DIO_enuSetPinDirection+0xb6>
     ee8:	cb 01       	movw	r24, r22
     eea:	84 2b       	or	r24, r20
     eec:	8c 93       	st	X, r24
     eee:	7a c0       	rjmp	.+244    	; 0xfe4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     ef0:	a7 e3       	ldi	r26, 0x37	; 55
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e7 e3       	ldi	r30, 0x37	; 55
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	48 2f       	mov	r20, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	02 c0       	rjmp	.+4      	; 0xf0c <DIO_enuSetPinDirection+0xe2>
     f08:	88 0f       	add	r24, r24
     f0a:	99 1f       	adc	r25, r25
     f0c:	2a 95       	dec	r18
     f0e:	e2 f7       	brpl	.-8      	; 0xf08 <DIO_enuSetPinDirection+0xde>
     f10:	80 95       	com	r24
     f12:	84 23       	and	r24, r20
     f14:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
     f16:	a7 e3       	ldi	r26, 0x37	; 55
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e7 e3       	ldi	r30, 0x37	; 55
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	48 2f       	mov	r20, r24
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	b9 01       	movw	r22, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <DIO_enuSetPinDirection+0x10c>
     f32:	66 0f       	add	r22, r22
     f34:	77 1f       	adc	r23, r23
     f36:	8a 95       	dec	r24
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <DIO_enuSetPinDirection+0x108>
     f3a:	cb 01       	movw	r24, r22
     f3c:	84 2b       	or	r24, r20
     f3e:	8c 93       	st	X, r24
     f40:	51 c0       	rjmp	.+162    	; 0xfe4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f42:	a4 e3       	ldi	r26, 0x34	; 52
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e4 e3       	ldi	r30, 0x34	; 52
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_enuSetPinDirection+0x134>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	2a 95       	dec	r18
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <DIO_enuSetPinDirection+0x130>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
     f68:	a4 e3       	ldi	r26, 0x34	; 52
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e4 e3       	ldi	r30, 0x34	; 52
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	48 2f       	mov	r20, r24
     f74:	8c 81       	ldd	r24, Y+4	; 0x04
     f76:	28 2f       	mov	r18, r24
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	88 2f       	mov	r24, r24
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	b9 01       	movw	r22, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_enuSetPinDirection+0x15e>
     f84:	66 0f       	add	r22, r22
     f86:	77 1f       	adc	r23, r23
     f88:	8a 95       	dec	r24
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_enuSetPinDirection+0x15a>
     f8c:	cb 01       	movw	r24, r22
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	28 c0       	rjmp	.+80     	; 0xfe4 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
     f94:	a1 e3       	ldi	r26, 0x31	; 49
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e1 e3       	ldi	r30, 0x31	; 49
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_enuSetPinDirection+0x186>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	2a 95       	dec	r18
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_enuSetPinDirection+0x182>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
     fba:	a1 e3       	ldi	r26, 0x31	; 49
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e1 e3       	ldi	r30, 0x31	; 49
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 2f       	mov	r24, r24
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	b9 01       	movw	r22, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_enuSetPinDirection+0x1b0>
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	8a 95       	dec	r24
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_enuSetPinDirection+0x1ac>
     fde:	cb 01       	movw	r24, r22
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ff0:	26 96       	adiw	r28, 0x06	; 6
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	de bf       	out	0x3e, r29	; 62
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	cd bf       	out	0x3d, r28	; 61
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	00 d0       	rcall	.+0      	; 0x1008 <DIO_enuSetPinValue+0x6>
    1008:	00 d0       	rcall	.+0      	; 0x100a <DIO_enuSetPinValue+0x8>
    100a:	00 d0       	rcall	.+0      	; 0x100c <DIO_enuSetPinValue+0xa>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	8a 83       	std	Y+2, r24	; 0x02
    1012:	6b 83       	std	Y+3, r22	; 0x03
    1014:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	84 30       	cpi	r24, 0x04	; 4
    101c:	08 f0       	brcs	.+2      	; 0x1020 <DIO_enuSetPinValue+0x1e>
    101e:	d1 c0       	rjmp	.+418    	; 0x11c2 <DIO_enuSetPinValue+0x1c0>
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	88 30       	cpi	r24, 0x08	; 8
    1024:	08 f0       	brcs	.+2      	; 0x1028 <DIO_enuSetPinValue+0x26>
    1026:	cd c0       	rjmp	.+410    	; 0x11c2 <DIO_enuSetPinValue+0x1c0>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	82 30       	cpi	r24, 0x02	; 2
    102c:	08 f0       	brcs	.+2      	; 0x1030 <DIO_enuSetPinValue+0x2e>
    102e:	c9 c0       	rjmp	.+402    	; 0x11c2 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	3e 83       	std	Y+6, r19	; 0x06
    1038:	2d 83       	std	Y+5, r18	; 0x05
    103a:	6d 81       	ldd	r22, Y+5	; 0x05
    103c:	7e 81       	ldd	r23, Y+6	; 0x06
    103e:	61 30       	cpi	r22, 0x01	; 1
    1040:	71 05       	cpc	r23, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <DIO_enuSetPinValue+0x44>
    1044:	41 c0       	rjmp	.+130    	; 0x10c8 <DIO_enuSetPinValue+0xc6>
    1046:	8d 81       	ldd	r24, Y+5	; 0x05
    1048:	9e 81       	ldd	r25, Y+6	; 0x06
    104a:	82 30       	cpi	r24, 0x02	; 2
    104c:	91 05       	cpc	r25, r1
    104e:	34 f4       	brge	.+12     	; 0x105c <DIO_enuSetPinValue+0x5a>
    1050:	2d 81       	ldd	r18, Y+5	; 0x05
    1052:	3e 81       	ldd	r19, Y+6	; 0x06
    1054:	21 15       	cp	r18, r1
    1056:	31 05       	cpc	r19, r1
    1058:	71 f0       	breq	.+28     	; 0x1076 <DIO_enuSetPinValue+0x74>
    105a:	b0 c0       	rjmp	.+352    	; 0x11bc <DIO_enuSetPinValue+0x1ba>
    105c:	6d 81       	ldd	r22, Y+5	; 0x05
    105e:	7e 81       	ldd	r23, Y+6	; 0x06
    1060:	62 30       	cpi	r22, 0x02	; 2
    1062:	71 05       	cpc	r23, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <DIO_enuSetPinValue+0x66>
    1066:	59 c0       	rjmp	.+178    	; 0x111a <DIO_enuSetPinValue+0x118>
    1068:	8d 81       	ldd	r24, Y+5	; 0x05
    106a:	9e 81       	ldd	r25, Y+6	; 0x06
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <DIO_enuSetPinValue+0x72>
    1072:	7c c0       	rjmp	.+248    	; 0x116c <DIO_enuSetPinValue+0x16a>
    1074:	a3 c0       	rjmp	.+326    	; 0x11bc <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1076:	ab e3       	ldi	r26, 0x3B	; 59
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	eb e3       	ldi	r30, 0x3B	; 59
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_enuSetPinValue+0x90>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	2a 95       	dec	r18
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_enuSetPinValue+0x8c>
    1096:	80 95       	com	r24
    1098:	84 23       	and	r24, r20
    109a:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	b9 01       	movw	r22, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_enuSetPinValue+0xba>
    10b8:	66 0f       	add	r22, r22
    10ba:	77 1f       	adc	r23, r23
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_enuSetPinValue+0xb6>
    10c0:	cb 01       	movw	r24, r22
    10c2:	84 2b       	or	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	7a c0       	rjmp	.+244    	; 0x11bc <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    10c8:	a8 e3       	ldi	r26, 0x38	; 56
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e3       	ldi	r30, 0x38	; 56
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_enuSetPinValue+0xe2>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	2a 95       	dec	r18
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_enuSetPinValue+0xde>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    10ee:	a8 e3       	ldi	r26, 0x38	; 56
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e8 e3       	ldi	r30, 0x38	; 56
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	48 2f       	mov	r20, r24
    10fa:	8c 81       	ldd	r24, Y+4	; 0x04
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	b9 01       	movw	r22, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_enuSetPinValue+0x10c>
    110a:	66 0f       	add	r22, r22
    110c:	77 1f       	adc	r23, r23
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_enuSetPinValue+0x108>
    1112:	cb 01       	movw	r24, r22
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	51 c0       	rjmp	.+162    	; 0x11bc <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    111a:	a5 e3       	ldi	r26, 0x35	; 53
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e5 e3       	ldi	r30, 0x35	; 53
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 c0       	rjmp	.+4      	; 0x1136 <DIO_enuSetPinValue+0x134>
    1132:	88 0f       	add	r24, r24
    1134:	99 1f       	adc	r25, r25
    1136:	2a 95       	dec	r18
    1138:	e2 f7       	brpl	.-8      	; 0x1132 <DIO_enuSetPinValue+0x130>
    113a:	80 95       	com	r24
    113c:	84 23       	and	r24, r20
    113e:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    1140:	a5 e3       	ldi	r26, 0x35	; 53
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e3       	ldi	r30, 0x35	; 53
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	48 2f       	mov	r20, r24
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	88 2f       	mov	r24, r24
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	b9 01       	movw	r22, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <DIO_enuSetPinValue+0x15e>
    115c:	66 0f       	add	r22, r22
    115e:	77 1f       	adc	r23, r23
    1160:	8a 95       	dec	r24
    1162:	e2 f7       	brpl	.-8      	; 0x115c <DIO_enuSetPinValue+0x15a>
    1164:	cb 01       	movw	r24, r22
    1166:	84 2b       	or	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	28 c0       	rjmp	.+80     	; 0x11bc <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    116c:	a2 e3       	ldi	r26, 0x32	; 50
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e2 e3       	ldi	r30, 0x32	; 50
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <DIO_enuSetPinValue+0x186>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	2a 95       	dec	r18
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <DIO_enuSetPinValue+0x182>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    1192:	a2 e3       	ldi	r26, 0x32	; 50
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	b9 01       	movw	r22, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <DIO_enuSetPinValue+0x1b0>
    11ae:	66 0f       	add	r22, r22
    11b0:	77 1f       	adc	r23, r23
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <DIO_enuSetPinValue+0x1ac>
    11b6:	cb 01       	movw	r24, r22
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	89 83       	std	Y+1, r24	; 0x01
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    11c2:	83 e0       	ldi	r24, 0x03	; 3
    11c4:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    11c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c8:	26 96       	adiw	r28, 0x06	; 6
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	de bf       	out	0x3e, r29	; 62
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	cd bf       	out	0x3d, r28	; 61
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <DIO_enuTogPin+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <DIO_enuTogPin+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	8a 83       	std	Y+2, r24	; 0x02
    11ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    11ec:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <DIO_enuTogPin+0x1c>
    11f4:	75 c0       	rjmp	.+234    	; 0x12e0 <DIO_enuTogPin+0x106>
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	88 30       	cpi	r24, 0x08	; 8
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <DIO_enuTogPin+0x24>
    11fc:	71 c0       	rjmp	.+226    	; 0x12e0 <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	49 f1       	breq	.+82     	; 0x1264 <DIO_enuTogPin+0x8a>
    1212:	2c 81       	ldd	r18, Y+4	; 0x04
    1214:	3d 81       	ldd	r19, Y+5	; 0x05
    1216:	22 30       	cpi	r18, 0x02	; 2
    1218:	31 05       	cpc	r19, r1
    121a:	2c f4       	brge	.+10     	; 0x1226 <DIO_enuTogPin+0x4c>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	61 f0       	breq	.+24     	; 0x123c <DIO_enuTogPin+0x62>
    1224:	5a c0       	rjmp	.+180    	; 0x12da <DIO_enuTogPin+0x100>
    1226:	2c 81       	ldd	r18, Y+4	; 0x04
    1228:	3d 81       	ldd	r19, Y+5	; 0x05
    122a:	22 30       	cpi	r18, 0x02	; 2
    122c:	31 05       	cpc	r19, r1
    122e:	71 f1       	breq	.+92     	; 0x128c <DIO_enuTogPin+0xb2>
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	9d 81       	ldd	r25, Y+5	; 0x05
    1234:	83 30       	cpi	r24, 0x03	; 3
    1236:	91 05       	cpc	r25, r1
    1238:	e9 f1       	breq	.+122    	; 0x12b4 <DIO_enuTogPin+0xda>
    123a:	4f c0       	rjmp	.+158    	; 0x12da <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <DIO_enuTogPin+0x80>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <DIO_enuTogPin+0x7c>
    125e:	84 27       	eor	r24, r20
    1260:	8c 93       	st	X, r24
    1262:	3b c0       	rjmp	.+118    	; 0x12da <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1264:	a7 e3       	ldi	r26, 0x37	; 55
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <DIO_enuTogPin+0xa8>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <DIO_enuTogPin+0xa4>
    1286:	84 27       	eor	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	27 c0       	rjmp	.+78     	; 0x12da <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    128c:	a4 e3       	ldi	r26, 0x34	; 52
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <DIO_enuTogPin+0xd0>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <DIO_enuTogPin+0xcc>
    12ae:	84 27       	eor	r24, r20
    12b0:	8c 93       	st	X, r24
    12b2:	13 c0       	rjmp	.+38     	; 0x12da <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    12b4:	a1 e3       	ldi	r26, 0x31	; 49
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e1 e3       	ldi	r30, 0x31	; 49
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_enuTogPin+0xf8>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_enuTogPin+0xf4>
    12d6:	84 27       	eor	r24, r20
    12d8:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    12e0:	83 e0       	ldi	r24, 0x03	; 3
    12e2:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	cf 91       	pop	r28
    12f2:	df 91       	pop	r29
    12f4:	08 95       	ret

000012f6 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    12f6:	df 93       	push	r29
    12f8:	cf 93       	push	r28
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	27 97       	sbiw	r28, 0x07	; 7
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	8a 83       	std	Y+2, r24	; 0x02
    130c:	6b 83       	std	Y+3, r22	; 0x03
    130e:	5d 83       	std	Y+5, r21	; 0x05
    1310:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1312:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_enuGetPinValue+0x28>
    131c:	7e c0       	rjmp	.+252    	; 0x141a <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	84 30       	cpi	r24, 0x04	; 4
    1322:	08 f0       	brcs	.+2      	; 0x1326 <DIO_enuGetPinValue+0x30>
    1324:	77 c0       	rjmp	.+238    	; 0x1414 <DIO_enuGetPinValue+0x11e>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	88 30       	cpi	r24, 0x08	; 8
    132a:	08 f0       	brcs	.+2      	; 0x132e <DIO_enuGetPinValue+0x38>
    132c:	73 c0       	rjmp	.+230    	; 0x1414 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3f 83       	std	Y+7, r19	; 0x07
    1336:	2e 83       	std	Y+6, r18	; 0x06
    1338:	4e 81       	ldd	r20, Y+6	; 0x06
    133a:	5f 81       	ldd	r21, Y+7	; 0x07
    133c:	41 30       	cpi	r20, 0x01	; 1
    133e:	51 05       	cpc	r21, r1
    1340:	59 f1       	breq	.+86     	; 0x1398 <DIO_enuGetPinValue+0xa2>
    1342:	8e 81       	ldd	r24, Y+6	; 0x06
    1344:	9f 81       	ldd	r25, Y+7	; 0x07
    1346:	82 30       	cpi	r24, 0x02	; 2
    1348:	91 05       	cpc	r25, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <DIO_enuGetPinValue+0x62>
    134c:	2e 81       	ldd	r18, Y+6	; 0x06
    134e:	3f 81       	ldd	r19, Y+7	; 0x07
    1350:	21 15       	cp	r18, r1
    1352:	31 05       	cpc	r19, r1
    1354:	69 f0       	breq	.+26     	; 0x1370 <DIO_enuGetPinValue+0x7a>
    1356:	5b c0       	rjmp	.+182    	; 0x140e <DIO_enuGetPinValue+0x118>
    1358:	4e 81       	ldd	r20, Y+6	; 0x06
    135a:	5f 81       	ldd	r21, Y+7	; 0x07
    135c:	42 30       	cpi	r20, 0x02	; 2
    135e:	51 05       	cpc	r21, r1
    1360:	79 f1       	breq	.+94     	; 0x13c0 <DIO_enuGetPinValue+0xca>
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	9f 81       	ldd	r25, Y+7	; 0x07
    1366:	83 30       	cpi	r24, 0x03	; 3
    1368:	91 05       	cpc	r25, r1
    136a:	09 f4       	brne	.+2      	; 0x136e <DIO_enuGetPinValue+0x78>
    136c:	3d c0       	rjmp	.+122    	; 0x13e8 <DIO_enuGetPinValue+0xf2>
    136e:	4f c0       	rjmp	.+158    	; 0x140e <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <DIO_enuGetPinValue+0x92>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <DIO_enuGetPinValue+0x8e>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	ec 81       	ldd	r30, Y+4	; 0x04
    1392:	fd 81       	ldd	r31, Y+5	; 0x05
    1394:	80 83       	st	Z, r24
    1396:	3b c0       	rjmp	.+118    	; 0x140e <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1398:	e6 e3       	ldi	r30, 0x36	; 54
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_enuGetPinValue+0xba>
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_enuGetPinValue+0xb6>
    13b4:	ca 01       	movw	r24, r20
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	ec 81       	ldd	r30, Y+4	; 0x04
    13ba:	fd 81       	ldd	r31, Y+5	; 0x05
    13bc:	80 83       	st	Z, r24
    13be:	27 c0       	rjmp	.+78     	; 0x140e <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    13c0:	e3 e3       	ldi	r30, 0x33	; 51
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_enuGetPinValue+0xe2>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_enuGetPinValue+0xde>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	ec 81       	ldd	r30, Y+4	; 0x04
    13e2:	fd 81       	ldd	r31, Y+5	; 0x05
    13e4:	80 83       	st	Z, r24
    13e6:	13 c0       	rjmp	.+38     	; 0x140e <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    13e8:	e0 e3       	ldi	r30, 0x30	; 48
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_enuGetPinValue+0x10a>
    13fc:	55 95       	asr	r21
    13fe:	47 95       	ror	r20
    1400:	8a 95       	dec	r24
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_enuGetPinValue+0x106>
    1404:	ca 01       	movw	r24, r20
    1406:	81 70       	andi	r24, 0x01	; 1
    1408:	ec 81       	ldd	r30, Y+4	; 0x04
    140a:	fd 81       	ldd	r31, Y+5	; 0x05
    140c:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	05 c0       	rjmp	.+10     	; 0x141e <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	02 c0       	rjmp	.+4      	; 0x141e <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    141e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1420:	27 96       	adiw	r28, 0x07	; 7
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <KPD_enuGetPresedKey>:
#include "KPD_config.h"
#include "KPD_priv.h"


u8 KPD_enuGetPresedKey(void)
{
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	00 d0       	rcall	.+0      	; 0x1438 <KPD_enuGetPresedKey+0x6>
    1438:	00 d0       	rcall	.+0      	; 0x143a <KPD_enuGetPresedKey+0x8>
    143a:	0f 92       	push	r0
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NOT_PRESSED_KEY;
    1440:	84 e1       	ldi	r24, 0x14	; 20
    1442:	8b 83       	std	Y+3, r24	; 0x03

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    1444:	1a 82       	std	Y+2, r1	; 0x02
    1446:	7a c0       	rjmp	.+244    	; 0x153c <KPD_enuGetPresedKey+0x10a>
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	88 2f       	mov	r24, r24
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	fc 01       	movw	r30, r24
    1450:	ec 58       	subi	r30, 0x8C	; 140
    1452:	ff 4f       	sbci	r31, 0xFF	; 255
    1454:	20 81       	ld	r18, Z
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	fc 01       	movw	r30, r24
    145e:	e0 59       	subi	r30, 0x90	; 144
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	90 81       	ld	r25, Z
    1464:	82 2f       	mov	r24, r18
    1466:	69 2f       	mov	r22, r25
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    146e:	19 82       	std	Y+1, r1	; 0x01
    1470:	4b c0       	rjmp	.+150    	; 0x1508 <KPD_enuGetPresedKey+0xd6>
		{
			/*	read the current row	*/
			DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	e4 59       	subi	r30, 0x94	; 148
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	40 81       	ld	r20, Z
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	88 2f       	mov	r24, r24
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	fc 01       	movw	r30, r24
    1488:	e8 59       	subi	r30, 0x98	; 152
    148a:	ff 4f       	sbci	r31, 0xFF	; 255
    148c:	90 81       	ld	r25, Z
    148e:	9e 01       	movw	r18, r28
    1490:	2c 5f       	subi	r18, 0xFC	; 252
    1492:	3f 4f       	sbci	r19, 0xFF	; 255
    1494:	84 2f       	mov	r24, r20
    1496:	69 2f       	mov	r22, r25
    1498:	a9 01       	movw	r20, r18
    149a:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
    149e:	8c 81       	ldd	r24, Y+4	; 0x04
    14a0:	88 23       	and	r24, r24
    14a2:	79 f5       	brne	.+94     	; 0x1502 <KPD_enuGetPresedKey+0xd0>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	48 2f       	mov	r20, r24
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	ca 01       	movw	r24, r20
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	82 0f       	add	r24, r18
    14bc:	93 1f       	adc	r25, r19
    14be:	fc 01       	movw	r30, r24
    14c0:	e8 58       	subi	r30, 0x88	; 136
    14c2:	ff 4f       	sbci	r31, 0xFF	; 255
    14c4:	80 81       	ld	r24, Z
    14c6:	8b 83       	std	Y+3, r24	; 0x03
    14c8:	16 c0       	rjmp	.+44     	; 0x14f6 <KPD_enuGetPresedKey+0xc4>
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
    14ca:	89 81       	ldd	r24, Y+1	; 0x01
    14cc:	88 2f       	mov	r24, r24
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	fc 01       	movw	r30, r24
    14d2:	e4 59       	subi	r30, 0x94	; 148
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	40 81       	ld	r20, Z
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	fc 01       	movw	r30, r24
    14e0:	e8 59       	subi	r30, 0x98	; 152
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	90 81       	ld	r25, Z
    14e6:	9e 01       	movw	r18, r28
    14e8:	2c 5f       	subi	r18, 0xFC	; 252
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	84 2f       	mov	r24, r20
    14ee:	69 2f       	mov	r22, r25
    14f0:	a9 01       	movw	r20, r18
    14f2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <DIO_enuGetPinValue>
			/*	check switch is pressed	*/
			if(DIO_u8LOW == Local_u8PinState)
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
				/* polling (busy waiting) until key is released */
				while(DIO_u8LOW == Local_u8PinState)
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	88 23       	and	r24, r24
    14fa:	39 f3       	breq	.-50     	; 0x14ca <KPD_enuGetPresedKey+0x98>
				{
					DIO_enuGetPinValue(Local_u8RowPortArr[Local_u8RowIdx],Local_u8RowPinArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	23 c0       	rjmp	.+70     	; 0x1548 <KPD_enuGetPresedKey+0x116>

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
	{
		/*	activate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8LOW);
		for(Local_u8RowIdx = 0; Local_u8RowIdx <KPD_DIM ; Local_u8RowIdx++)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	84 30       	cpi	r24, 0x04	; 4
    150c:	08 f4       	brcc	.+2      	; 0x1510 <KPD_enuGetPresedKey+0xde>
    150e:	b1 cf       	rjmp	.-158    	; 0x1472 <KPD_enuGetPresedKey+0x40>
				}
				return Local_u8PressedKey;
			}
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	fc 01       	movw	r30, r24
    1518:	ec 58       	subi	r30, 0x8C	; 140
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	20 81       	ld	r18, Z
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	fc 01       	movw	r30, r24
    1526:	e0 59       	subi	r30, 0x90	; 144
    1528:	ff 4f       	sbci	r31, 0xFF	; 255
    152a:	90 81       	ld	r25, Z
    152c:	82 2f       	mov	r24, r18
    152e:	69 2f       	mov	r22, r25
    1530:	41 e0       	ldi	r20, 0x01	; 1
    1532:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>

	static u8 Local_u8RowPortArr[] = {KPD_ROW0_PORT , KPD_ROW1_PORT , KPD_ROW2_PORT , KPD_ROW3_PORT};

	static u8 Local_u8RowPinArr[] = {KPD_ROW0_PIN , KPD_ROW1_PIN , KPD_ROW2_PIN , KPD_ROW3_PIN};

	for(Local_u8ColumnIdx = 0 ;Local_u8ColumnIdx < KPD_DIM ;Local_u8ColumnIdx++ )
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	8a 83       	std	Y+2, r24	; 0x02
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	08 f4       	brcc	.+2      	; 0x1544 <KPD_enuGetPresedKey+0x112>
    1542:	82 cf       	rjmp	.-252    	; 0x1448 <KPD_enuGetPresedKey+0x16>
		}
		/*	deactivate current column	*/
		DIO_enuSetPinValue(Local_u8ColPortArr[Local_u8ColumnIdx] ,Local_u8ColPinArr[Local_u8ColumnIdx], DIO_u8HIGH);
	}

	return Local_u8PressedKey;
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	8d 83       	std	Y+5, r24	; 0x05
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <LCD_enuInit>:
#include "LCD_priv.h"

#include "util/delay.h"

ES_t LCD_enuInit(void)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	e9 97       	sbiw	r28, 0x39	; 57
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	de bf       	out	0x3e, r29	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8ErrorState = ES_NOK;
    156e:	19 ae       	std	Y+57, r1	; 0x39
	DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT);
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT);
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	61 e0       	ldi	r22, 0x01	; 1
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT);
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	62 e0       	ldi	r22, 0x02	; 2
    1588:	41 e0       	ldi	r20, 0x01	; 1
    158a:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT);
    158e:	80 e0       	ldi	r24, 0x00	; 0
    1590:	67 e0       	ldi	r22, 0x07	; 7
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	66 e0       	ldi	r22, 0x06	; 6
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT);
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	65 e0       	ldi	r22, 0x05	; 5
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT);
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	64 e0       	ldi	r22, 0x04	; 4
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	ac e0       	ldi	r26, 0x0C	; 12
    15bc:	b2 e4       	ldi	r27, 0x42	; 66
    15be:	8d ab       	std	Y+53, r24	; 0x35
    15c0:	9e ab       	std	Y+54, r25	; 0x36
    15c2:	af ab       	std	Y+55, r26	; 0x37
    15c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15c6:	6d a9       	ldd	r22, Y+53	; 0x35
    15c8:	7e a9       	ldd	r23, Y+54	; 0x36
    15ca:	8f a9       	ldd	r24, Y+55	; 0x37
    15cc:	98 ad       	ldd	r25, Y+56	; 0x38
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	4a e7       	ldi	r20, 0x7A	; 122
    15d4:	53 e4       	ldi	r21, 0x43	; 67
    15d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	89 ab       	std	Y+49, r24	; 0x31
    15e0:	9a ab       	std	Y+50, r25	; 0x32
    15e2:	ab ab       	std	Y+51, r26	; 0x33
    15e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15e6:	69 a9       	ldd	r22, Y+49	; 0x31
    15e8:	7a a9       	ldd	r23, Y+50	; 0x32
    15ea:	8b a9       	ldd	r24, Y+51	; 0x33
    15ec:	9c a9       	ldd	r25, Y+52	; 0x34
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e8       	ldi	r20, 0x80	; 128
    15f4:	5f e3       	ldi	r21, 0x3F	; 63
    15f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fa:	88 23       	and	r24, r24
    15fc:	2c f4       	brge	.+10     	; 0x1608 <LCD_enuInit+0xae>
		__ticks = 1;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	98 ab       	std	Y+48, r25	; 0x30
    1604:	8f a7       	std	Y+47, r24	; 0x2f
    1606:	3f c0       	rjmp	.+126    	; 0x1686 <LCD_enuInit+0x12c>
	else if (__tmp > 65535)
    1608:	69 a9       	ldd	r22, Y+49	; 0x31
    160a:	7a a9       	ldd	r23, Y+50	; 0x32
    160c:	8b a9       	ldd	r24, Y+51	; 0x33
    160e:	9c a9       	ldd	r25, Y+52	; 0x34
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f e7       	ldi	r20, 0x7F	; 127
    1616:	57 e4       	ldi	r21, 0x47	; 71
    1618:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    161c:	18 16       	cp	r1, r24
    161e:	4c f5       	brge	.+82     	; 0x1672 <LCD_enuInit+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1620:	6d a9       	ldd	r22, Y+53	; 0x35
    1622:	7e a9       	ldd	r23, Y+54	; 0x36
    1624:	8f a9       	ldd	r24, Y+55	; 0x37
    1626:	98 ad       	ldd	r25, Y+56	; 0x38
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e2       	ldi	r20, 0x20	; 32
    162e:	51 e4       	ldi	r21, 0x41	; 65
    1630:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1634:	dc 01       	movw	r26, r24
    1636:	cb 01       	movw	r24, r22
    1638:	bc 01       	movw	r22, r24
    163a:	cd 01       	movw	r24, r26
    163c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	98 ab       	std	Y+48, r25	; 0x30
    1646:	8f a7       	std	Y+47, r24	; 0x2f
    1648:	0f c0       	rjmp	.+30     	; 0x1668 <LCD_enuInit+0x10e>
    164a:	89 e1       	ldi	r24, 0x19	; 25
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	9e a7       	std	Y+46, r25	; 0x2e
    1650:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1652:	8d a5       	ldd	r24, Y+45	; 0x2d
    1654:	9e a5       	ldd	r25, Y+46	; 0x2e
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_enuInit+0xfc>
    165a:	9e a7       	std	Y+46, r25	; 0x2e
    165c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1660:	98 a9       	ldd	r25, Y+48	; 0x30
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	98 ab       	std	Y+48, r25	; 0x30
    1666:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1668:	8f a5       	ldd	r24, Y+47	; 0x2f
    166a:	98 a9       	ldd	r25, Y+48	; 0x30
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	69 f7       	brne	.-38     	; 0x164a <LCD_enuInit+0xf0>
    1670:	14 c0       	rjmp	.+40     	; 0x169a <LCD_enuInit+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1672:	69 a9       	ldd	r22, Y+49	; 0x31
    1674:	7a a9       	ldd	r23, Y+50	; 0x32
    1676:	8b a9       	ldd	r24, Y+51	; 0x33
    1678:	9c a9       	ldd	r25, Y+52	; 0x34
    167a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	98 ab       	std	Y+48, r25	; 0x30
    1684:	8f a7       	std	Y+47, r24	; 0x2f
    1686:	8f a5       	ldd	r24, Y+47	; 0x2f
    1688:	98 a9       	ldd	r25, Y+48	; 0x30
    168a:	9c a7       	std	Y+44, r25	; 0x2c
    168c:	8b a7       	std	Y+43, r24	; 0x2b
    168e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1690:	9c a5       	ldd	r25, Y+44	; 0x2c
    1692:	01 97       	sbiw	r24, 0x01	; 1
    1694:	f1 f7       	brne	.-4      	; 0x1692 <LCD_enuInit+0x138>
    1696:	9c a7       	std	Y+44, r25	; 0x2c
    1698:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(35);

#if LCD_MODE == EIGHT_BIT

	DIO_enuSetPinDirection(D3_PORT, D3_PIN, DIO_u8OUTPUT);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	63 e0       	ldi	r22, 0x03	; 3
    169e:	41 e0       	ldi	r20, 0x01	; 1
    16a0:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D2_PORT, D2_PIN, DIO_u8OUTPUT);
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	62 e0       	ldi	r22, 0x02	; 2
    16a8:	41 e0       	ldi	r20, 0x01	; 1
    16aa:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D1_PORT, D1_PIN, DIO_u8OUTPUT);
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	41 e0       	ldi	r20, 0x01	; 1
    16b4:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D0_PORT, D0_PIN, DIO_u8OUTPUT);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 15 07 	call	0xe2a	; 0xe2a <DIO_enuSetPinDirection>

	//function set
	LCD_invidSendCommend(0x38);
    16c2:	88 e3       	ldi	r24, 0x38	; 56
    16c4:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_invidSendCommend>
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a0 e8       	ldi	r26, 0x80	; 128
    16ce:	bf e3       	ldi	r27, 0x3F	; 63
    16d0:	8f a3       	std	Y+39, r24	; 0x27
    16d2:	98 a7       	std	Y+40, r25	; 0x28
    16d4:	a9 a7       	std	Y+41, r26	; 0x29
    16d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16d8:	6f a1       	ldd	r22, Y+39	; 0x27
    16da:	78 a5       	ldd	r23, Y+40	; 0x28
    16dc:	89 a5       	ldd	r24, Y+41	; 0x29
    16de:	9a a5       	ldd	r25, Y+42	; 0x2a
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	4a e7       	ldi	r20, 0x7A	; 122
    16e6:	53 e4       	ldi	r21, 0x43	; 67
    16e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ec:	dc 01       	movw	r26, r24
    16ee:	cb 01       	movw	r24, r22
    16f0:	8b a3       	std	Y+35, r24	; 0x23
    16f2:	9c a3       	std	Y+36, r25	; 0x24
    16f4:	ad a3       	std	Y+37, r26	; 0x25
    16f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16f8:	6b a1       	ldd	r22, Y+35	; 0x23
    16fa:	7c a1       	ldd	r23, Y+36	; 0x24
    16fc:	8d a1       	ldd	r24, Y+37	; 0x25
    16fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e8       	ldi	r20, 0x80	; 128
    1706:	5f e3       	ldi	r21, 0x3F	; 63
    1708:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    170c:	88 23       	and	r24, r24
    170e:	2c f4       	brge	.+10     	; 0x171a <LCD_enuInit+0x1c0>
		__ticks = 1;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	9a a3       	std	Y+34, r25	; 0x22
    1716:	89 a3       	std	Y+33, r24	; 0x21
    1718:	3f c0       	rjmp	.+126    	; 0x1798 <LCD_enuInit+0x23e>
	else if (__tmp > 65535)
    171a:	6b a1       	ldd	r22, Y+35	; 0x23
    171c:	7c a1       	ldd	r23, Y+36	; 0x24
    171e:	8d a1       	ldd	r24, Y+37	; 0x25
    1720:	9e a1       	ldd	r25, Y+38	; 0x26
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	3f ef       	ldi	r19, 0xFF	; 255
    1726:	4f e7       	ldi	r20, 0x7F	; 127
    1728:	57 e4       	ldi	r21, 0x47	; 71
    172a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    172e:	18 16       	cp	r1, r24
    1730:	4c f5       	brge	.+82     	; 0x1784 <LCD_enuInit+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	6f a1       	ldd	r22, Y+39	; 0x27
    1734:	78 a5       	ldd	r23, Y+40	; 0x28
    1736:	89 a5       	ldd	r24, Y+41	; 0x29
    1738:	9a a5       	ldd	r25, Y+42	; 0x2a
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	40 e2       	ldi	r20, 0x20	; 32
    1740:	51 e4       	ldi	r21, 0x41	; 65
    1742:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	bc 01       	movw	r22, r24
    174c:	cd 01       	movw	r24, r26
    174e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	9a a3       	std	Y+34, r25	; 0x22
    1758:	89 a3       	std	Y+33, r24	; 0x21
    175a:	0f c0       	rjmp	.+30     	; 0x177a <LCD_enuInit+0x220>
    175c:	89 e1       	ldi	r24, 0x19	; 25
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	98 a3       	std	Y+32, r25	; 0x20
    1762:	8f 8f       	std	Y+31, r24	; 0x1f
    1764:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1766:	98 a1       	ldd	r25, Y+32	; 0x20
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_enuInit+0x20e>
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	89 a1       	ldd	r24, Y+33	; 0x21
    1772:	9a a1       	ldd	r25, Y+34	; 0x22
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	9a a3       	std	Y+34, r25	; 0x22
    1778:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177a:	89 a1       	ldd	r24, Y+33	; 0x21
    177c:	9a a1       	ldd	r25, Y+34	; 0x22
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	69 f7       	brne	.-38     	; 0x175c <LCD_enuInit+0x202>
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <LCD_enuInit+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1784:	6b a1       	ldd	r22, Y+35	; 0x23
    1786:	7c a1       	ldd	r23, Y+36	; 0x24
    1788:	8d a1       	ldd	r24, Y+37	; 0x25
    178a:	9e a1       	ldd	r25, Y+38	; 0x26
    178c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	9a a3       	std	Y+34, r25	; 0x22
    1796:	89 a3       	std	Y+33, r24	; 0x21
    1798:	89 a1       	ldd	r24, Y+33	; 0x21
    179a:	9a a1       	ldd	r25, Y+34	; 0x22
    179c:	9e 8f       	std	Y+30, r25	; 0x1e
    179e:	8d 8f       	std	Y+29, r24	; 0x1d
    17a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	f1 f7       	brne	.-4      	; 0x17a4 <LCD_enuInit+0x24a>
    17a8:	9e 8f       	std	Y+30, r25	; 0x1e
    17aa:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == FOUR_BIT
	LCD_invidSendCommend(0x28);
#endif
	_delay_ms(1);
	LCD_invidSendCommend(0x0f);
    17ac:	8f e0       	ldi	r24, 0x0F	; 15
    17ae:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_invidSendCommend>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a0 e8       	ldi	r26, 0x80	; 128
    17b8:	bf e3       	ldi	r27, 0x3F	; 63
    17ba:	89 8f       	std	Y+25, r24	; 0x19
    17bc:	9a 8f       	std	Y+26, r25	; 0x1a
    17be:	ab 8f       	std	Y+27, r26	; 0x1b
    17c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c2:	69 8d       	ldd	r22, Y+25	; 0x19
    17c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	4a e7       	ldi	r20, 0x7A	; 122
    17d0:	53 e4       	ldi	r21, 0x43	; 67
    17d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	8d 8b       	std	Y+21, r24	; 0x15
    17dc:	9e 8b       	std	Y+22, r25	; 0x16
    17de:	af 8b       	std	Y+23, r26	; 0x17
    17e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17e2:	6d 89       	ldd	r22, Y+21	; 0x15
    17e4:	7e 89       	ldd	r23, Y+22	; 0x16
    17e6:	8f 89       	ldd	r24, Y+23	; 0x17
    17e8:	98 8d       	ldd	r25, Y+24	; 0x18
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e8       	ldi	r20, 0x80	; 128
    17f0:	5f e3       	ldi	r21, 0x3F	; 63
    17f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17f6:	88 23       	and	r24, r24
    17f8:	2c f4       	brge	.+10     	; 0x1804 <LCD_enuInit+0x2aa>
		__ticks = 1;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	9c 8b       	std	Y+20, r25	; 0x14
    1800:	8b 8b       	std	Y+19, r24	; 0x13
    1802:	3f c0       	rjmp	.+126    	; 0x1882 <LCD_enuInit+0x328>
	else if (__tmp > 65535)
    1804:	6d 89       	ldd	r22, Y+21	; 0x15
    1806:	7e 89       	ldd	r23, Y+22	; 0x16
    1808:	8f 89       	ldd	r24, Y+23	; 0x17
    180a:	98 8d       	ldd	r25, Y+24	; 0x18
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	3f ef       	ldi	r19, 0xFF	; 255
    1810:	4f e7       	ldi	r20, 0x7F	; 127
    1812:	57 e4       	ldi	r21, 0x47	; 71
    1814:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1818:	18 16       	cp	r1, r24
    181a:	4c f5       	brge	.+82     	; 0x186e <LCD_enuInit+0x314>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    181c:	69 8d       	ldd	r22, Y+25	; 0x19
    181e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1820:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1822:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e2       	ldi	r20, 0x20	; 32
    182a:	51 e4       	ldi	r21, 0x41	; 65
    182c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	bc 01       	movw	r22, r24
    1836:	cd 01       	movw	r24, r26
    1838:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9c 8b       	std	Y+20, r25	; 0x14
    1842:	8b 8b       	std	Y+19, r24	; 0x13
    1844:	0f c0       	rjmp	.+30     	; 0x1864 <LCD_enuInit+0x30a>
    1846:	89 e1       	ldi	r24, 0x19	; 25
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9a 8b       	std	Y+18, r25	; 0x12
    184c:	89 8b       	std	Y+17, r24	; 0x11
    184e:	89 89       	ldd	r24, Y+17	; 0x11
    1850:	9a 89       	ldd	r25, Y+18	; 0x12
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_enuInit+0x2f8>
    1856:	9a 8b       	std	Y+18, r25	; 0x12
    1858:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185a:	8b 89       	ldd	r24, Y+19	; 0x13
    185c:	9c 89       	ldd	r25, Y+20	; 0x14
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	69 f7       	brne	.-38     	; 0x1846 <LCD_enuInit+0x2ec>
    186c:	14 c0       	rjmp	.+40     	; 0x1896 <LCD_enuInit+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	6d 89       	ldd	r22, Y+21	; 0x15
    1870:	7e 89       	ldd	r23, Y+22	; 0x16
    1872:	8f 89       	ldd	r24, Y+23	; 0x17
    1874:	98 8d       	ldd	r25, Y+24	; 0x18
    1876:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187a:	dc 01       	movw	r26, r24
    187c:	cb 01       	movw	r24, r22
    187e:	9c 8b       	std	Y+20, r25	; 0x14
    1880:	8b 8b       	std	Y+19, r24	; 0x13
    1882:	8b 89       	ldd	r24, Y+19	; 0x13
    1884:	9c 89       	ldd	r25, Y+20	; 0x14
    1886:	98 8b       	std	Y+16, r25	; 0x10
    1888:	8f 87       	std	Y+15, r24	; 0x0f
    188a:	8f 85       	ldd	r24, Y+15	; 0x0f
    188c:	98 89       	ldd	r25, Y+16	; 0x10
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	f1 f7       	brne	.-4      	; 0x188e <LCD_enuInit+0x334>
    1892:	98 8b       	std	Y+16, r25	; 0x10
    1894:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_invidSendCommend(0x01);
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_invidSendCommend>
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e4       	ldi	r27, 0x40	; 64
    18a4:	8b 87       	std	Y+11, r24	; 0x0b
    18a6:	9c 87       	std	Y+12, r25	; 0x0c
    18a8:	ad 87       	std	Y+13, r26	; 0x0d
    18aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	4a e7       	ldi	r20, 0x7A	; 122
    18ba:	53 e4       	ldi	r21, 0x43	; 67
    18bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18c0:	dc 01       	movw	r26, r24
    18c2:	cb 01       	movw	r24, r22
    18c4:	8f 83       	std	Y+7, r24	; 0x07
    18c6:	98 87       	std	Y+8, r25	; 0x08
    18c8:	a9 87       	std	Y+9, r26	; 0x09
    18ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18cc:	6f 81       	ldd	r22, Y+7	; 0x07
    18ce:	78 85       	ldd	r23, Y+8	; 0x08
    18d0:	89 85       	ldd	r24, Y+9	; 0x09
    18d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e8       	ldi	r20, 0x80	; 128
    18da:	5f e3       	ldi	r21, 0x3F	; 63
    18dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18e0:	88 23       	and	r24, r24
    18e2:	2c f4       	brge	.+10     	; 0x18ee <LCD_enuInit+0x394>
		__ticks = 1;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	3f c0       	rjmp	.+126    	; 0x196c <LCD_enuInit+0x412>
	else if (__tmp > 65535)
    18ee:	6f 81       	ldd	r22, Y+7	; 0x07
    18f0:	78 85       	ldd	r23, Y+8	; 0x08
    18f2:	89 85       	ldd	r24, Y+9	; 0x09
    18f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	3f ef       	ldi	r19, 0xFF	; 255
    18fa:	4f e7       	ldi	r20, 0x7F	; 127
    18fc:	57 e4       	ldi	r21, 0x47	; 71
    18fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1902:	18 16       	cp	r1, r24
    1904:	4c f5       	brge	.+82     	; 0x1958 <LCD_enuInit+0x3fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1906:	6b 85       	ldd	r22, Y+11	; 0x0b
    1908:	7c 85       	ldd	r23, Y+12	; 0x0c
    190a:	8d 85       	ldd	r24, Y+13	; 0x0d
    190c:	9e 85       	ldd	r25, Y+14	; 0x0e
    190e:	20 e0       	ldi	r18, 0x00	; 0
    1910:	30 e0       	ldi	r19, 0x00	; 0
    1912:	40 e2       	ldi	r20, 0x20	; 32
    1914:	51 e4       	ldi	r21, 0x41	; 65
    1916:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191a:	dc 01       	movw	r26, r24
    191c:	cb 01       	movw	r24, r22
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	9e 83       	std	Y+6, r25	; 0x06
    192c:	8d 83       	std	Y+5, r24	; 0x05
    192e:	0f c0       	rjmp	.+30     	; 0x194e <LCD_enuInit+0x3f4>
    1930:	89 e1       	ldi	r24, 0x19	; 25
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	9c 81       	ldd	r25, Y+4	; 0x04
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_enuInit+0x3e2>
    1940:	9c 83       	std	Y+4, r25	; 0x04
    1942:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1944:	8d 81       	ldd	r24, Y+5	; 0x05
    1946:	9e 81       	ldd	r25, Y+6	; 0x06
    1948:	01 97       	sbiw	r24, 0x01	; 1
    194a:	9e 83       	std	Y+6, r25	; 0x06
    194c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	00 97       	sbiw	r24, 0x00	; 0
    1954:	69 f7       	brne	.-38     	; 0x1930 <LCD_enuInit+0x3d6>
    1956:	14 c0       	rjmp	.+40     	; 0x1980 <LCD_enuInit+0x426>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1958:	6f 81       	ldd	r22, Y+7	; 0x07
    195a:	78 85       	ldd	r23, Y+8	; 0x08
    195c:	89 85       	ldd	r24, Y+9	; 0x09
    195e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1960:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	9e 83       	std	Y+6, r25	; 0x06
    196a:	8d 83       	std	Y+5, r24	; 0x05
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	9a 83       	std	Y+2, r25	; 0x02
    1972:	89 83       	std	Y+1, r24	; 0x01
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	01 97       	sbiw	r24, 0x01	; 1
    197a:	f1 f7       	brne	.-4      	; 0x1978 <LCD_enuInit+0x41e>
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_invidSendCommend(0x06);
    1980:	86 e0       	ldi	r24, 0x06	; 6
    1982:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LCD_invidSendCommend>


	return Local_u8ErrorState;
    1986:	89 ad       	ldd	r24, Y+57	; 0x39
}
    1988:	e9 96       	adiw	r28, 0x39	; 57
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <LCD_enuDisplayChar>:

ES_t LCD_enuDisplayChar(u8 Copy_u8Data)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <LCD_enuDisplayChar+0x6>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    19a6:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT,RS_PIN , DIO_u8HIGH);
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Data);
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_Latch>
	Local_u8ErrorState = ES_OK;
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	89 83       	std	Y+1, r24	; 0x01

	return Local_u8ErrorState;
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <LCD_enuSendCommand>:

ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <LCD_enuSendCommand+0x6>
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
    19d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = ES_NOK;
    19d4:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	60 e0       	ldi	r22, 0x00	; 0
    19da:	40 e0       	ldi	r20, 0x00	; 0
    19dc:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	LCD_Latch(Copy_u8Command);
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <LCD_Latch>
	Local_u8ErrorState =ES_OK;
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	89 83       	std	Y+1, r24	; 0x01


	return Local_u8ErrorState;
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <LCD_Latch>:

static void LCD_Latch(u8 Copy_u8Data)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	6d 97       	sbiw	r28, 0x1d	; 29
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	de bf       	out	0x3e, r29	; 62
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	cd bf       	out	0x3d, r28	; 61
    1a0a:	8d 8f       	std	Y+29, r24	; 0x1d
	// set rw as write operation , EN is low
		DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	61 e0       	ldi	r22, 0x01	; 1
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	62 e0       	ldi	r22, 0x02	; 2
    1a1a:	40 e0       	ldi	r20, 0x00	; 0
    1a1c:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		//write Data
		DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Data>>7)&1));
    1a20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a22:	98 2f       	mov	r25, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	99 27       	eor	r25, r25
    1a28:	99 1f       	adc	r25, r25
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	67 e0       	ldi	r22, 0x07	; 7
    1a2e:	49 2f       	mov	r20, r25
    1a30:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Data>>6)&1));
    1a34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a36:	82 95       	swap	r24
    1a38:	86 95       	lsr	r24
    1a3a:	86 95       	lsr	r24
    1a3c:	83 70       	andi	r24, 0x03	; 3
    1a3e:	98 2f       	mov	r25, r24
    1a40:	91 70       	andi	r25, 0x01	; 1
    1a42:	80 e0       	ldi	r24, 0x00	; 0
    1a44:	66 e0       	ldi	r22, 0x06	; 6
    1a46:	49 2f       	mov	r20, r25
    1a48:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Data>>5)&1));
    1a4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a4e:	82 95       	swap	r24
    1a50:	86 95       	lsr	r24
    1a52:	87 70       	andi	r24, 0x07	; 7
    1a54:	98 2f       	mov	r25, r24
    1a56:	91 70       	andi	r25, 0x01	; 1
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	65 e0       	ldi	r22, 0x05	; 5
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Data>>4)&1));
    1a62:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a64:	82 95       	swap	r24
    1a66:	8f 70       	andi	r24, 0x0F	; 15
    1a68:	98 2f       	mov	r25, r24
    1a6a:	91 70       	andi	r25, 0x01	; 1
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	64 e0       	ldi	r22, 0x04	; 4
    1a70:	49 2f       	mov	r20, r25
    1a72:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>

	#if LCD_MODE == EIGHT_BIT

		DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Data>>3)&1));
    1a76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a78:	86 95       	lsr	r24
    1a7a:	86 95       	lsr	r24
    1a7c:	86 95       	lsr	r24
    1a7e:	98 2f       	mov	r25, r24
    1a80:	91 70       	andi	r25, 0x01	; 1
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	63 e0       	ldi	r22, 0x03	; 3
    1a86:	49 2f       	mov	r20, r25
    1a88:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Data>>2)&1));
    1a8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a8e:	86 95       	lsr	r24
    1a90:	86 95       	lsr	r24
    1a92:	98 2f       	mov	r25, r24
    1a94:	91 70       	andi	r25, 0x01	; 1
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	62 e0       	ldi	r22, 0x02	; 2
    1a9a:	49 2f       	mov	r20, r25
    1a9c:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Data>>1)&1));
    1aa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1aa2:	86 95       	lsr	r24
    1aa4:	98 2f       	mov	r25, r24
    1aa6:	91 70       	andi	r25, 0x01	; 1
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	49 2f       	mov	r20, r25
    1aae:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
		DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Data>>0)&1));
    1ab2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ab4:	98 2f       	mov	r25, r24
    1ab6:	91 70       	andi	r25, 0x01	; 1
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	60 e0       	ldi	r22, 0x00	; 0
    1abc:	49 2f       	mov	r20, r25
    1abe:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	#elif LCD_MODE == FOUR_BIT

	#endif

		// Enable latch
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	41 e0       	ldi	r20, 0x01	; 1
    1ac8:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e2       	ldi	r26, 0x20	; 32
    1ad2:	b1 e4       	ldi	r27, 0x41	; 65
    1ad4:	89 8f       	std	Y+25, r24	; 0x19
    1ad6:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad8:	ab 8f       	std	Y+27, r26	; 0x1b
    1ada:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a e7       	ldi	r20, 0x7A	; 122
    1aea:	53 e4       	ldi	r21, 0x43	; 67
    1aec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8d 8b       	std	Y+21, r24	; 0x15
    1af6:	9e 8b       	std	Y+22, r25	; 0x16
    1af8:	af 8b       	std	Y+23, r26	; 0x17
    1afa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1afc:	6d 89       	ldd	r22, Y+21	; 0x15
    1afe:	7e 89       	ldd	r23, Y+22	; 0x16
    1b00:	8f 89       	ldd	r24, Y+23	; 0x17
    1b02:	98 8d       	ldd	r25, Y+24	; 0x18
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <LCD_Latch+0x128>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9c 8b       	std	Y+20, r25	; 0x14
    1b1a:	8b 8b       	std	Y+19, r24	; 0x13
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <LCD_Latch+0x1a6>
	else if (__tmp > 65535)
    1b1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b20:	7e 89       	ldd	r23, Y+22	; 0x16
    1b22:	8f 89       	ldd	r24, Y+23	; 0x17
    1b24:	98 8d       	ldd	r25, Y+24	; 0x18
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <LCD_Latch+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	69 8d       	ldd	r22, Y+25	; 0x19
    1b38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <LCD_Latch+0x188>
    1b60:	89 e1       	ldi	r24, 0x19	; 25
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9a 8b       	std	Y+18, r25	; 0x12
    1b66:	89 8b       	std	Y+17, r24	; 0x11
    1b68:	89 89       	ldd	r24, Y+17	; 0x11
    1b6a:	9a 89       	ldd	r25, Y+18	; 0x12
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_Latch+0x176>
    1b70:	9a 8b       	std	Y+18, r25	; 0x12
    1b72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8b 89       	ldd	r24, Y+19	; 0x13
    1b76:	9c 89       	ldd	r25, Y+20	; 0x14
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9c 8b       	std	Y+20, r25	; 0x14
    1b7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b80:	9c 89       	ldd	r25, Y+20	; 0x14
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <LCD_Latch+0x16a>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <LCD_Latch+0x1ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6d 89       	ldd	r22, Y+21	; 0x15
    1b8a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b8c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b8e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9c 8b       	std	Y+20, r25	; 0x14
    1b9a:	8b 8b       	std	Y+19, r24	; 0x13
    1b9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba0:	98 8b       	std	Y+16, r25	; 0x10
    1ba2:	8f 87       	std	Y+15, r24	; 0x0f
    1ba4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba6:	98 89       	ldd	r25, Y+16	; 0x10
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_Latch+0x1b2>
    1bac:	98 8b       	std	Y+16, r25	; 0x10
    1bae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	62 e0       	ldi	r22, 0x02	; 2
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	a0 e2       	ldi	r26, 0x20	; 32
    1bc0:	b1 e4       	ldi	r27, 0x41	; 65
    1bc2:	8b 87       	std	Y+11, r24	; 0x0b
    1bc4:	9c 87       	std	Y+12, r25	; 0x0c
    1bc6:	ad 87       	std	Y+13, r26	; 0x0d
    1bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	4a e7       	ldi	r20, 0x7A	; 122
    1bd8:	53 e4       	ldi	r21, 0x43	; 67
    1bda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	8f 83       	std	Y+7, r24	; 0x07
    1be4:	98 87       	std	Y+8, r25	; 0x08
    1be6:	a9 87       	std	Y+9, r26	; 0x09
    1be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bea:	6f 81       	ldd	r22, Y+7	; 0x07
    1bec:	78 85       	ldd	r23, Y+8	; 0x08
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	2c f4       	brge	.+10     	; 0x1c0c <LCD_Latch+0x216>
		__ticks = 1;
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	3f c0       	rjmp	.+126    	; 0x1c8a <LCD_Latch+0x294>
	else if (__tmp > 65535)
    1c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0e:	78 85       	ldd	r23, Y+8	; 0x08
    1c10:	89 85       	ldd	r24, Y+9	; 0x09
    1c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	4f e7       	ldi	r20, 0x7F	; 127
    1c1a:	57 e4       	ldi	r21, 0x47	; 71
    1c1c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c20:	18 16       	cp	r1, r24
    1c22:	4c f5       	brge	.+82     	; 0x1c76 <LCD_Latch+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	40 e2       	ldi	r20, 0x20	; 32
    1c32:	51 e4       	ldi	r21, 0x41	; 65
    1c34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	bc 01       	movw	r22, r24
    1c3e:	cd 01       	movw	r24, r26
    1c40:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9e 83       	std	Y+6, r25	; 0x06
    1c4a:	8d 83       	std	Y+5, r24	; 0x05
    1c4c:	0f c0       	rjmp	.+30     	; 0x1c6c <LCD_Latch+0x276>
    1c4e:	89 e1       	ldi	r24, 0x19	; 25
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	9c 83       	std	Y+4, r25	; 0x04
    1c54:	8b 83       	std	Y+3, r24	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	f1 f7       	brne	.-4      	; 0x1c5a <LCD_Latch+0x264>
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	69 f7       	brne	.-38     	; 0x1c4e <LCD_Latch+0x258>
    1c74:	14 c0       	rjmp	.+40     	; 0x1c9e <LCD_Latch+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c76:	6f 81       	ldd	r22, Y+7	; 0x07
    1c78:	78 85       	ldd	r23, Y+8	; 0x08
    1c7a:	89 85       	ldd	r24, Y+9	; 0x09
    1c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c7e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	9a 83       	std	Y+2, r25	; 0x02
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_Latch+0x2a0>
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01


		_delay_ms(10);
}
    1c9e:	6d 96       	adiw	r28, 0x1d	; 29
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LCD_invidSendCommend>:
inline static void LCD_invidSendCommend(u8 Copy_u8Command)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	2f 97       	sbiw	r28, 0x0f	; 15
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	8f 87       	std	Y+15, r24	; 0x0f
	// set rs as command
	DIO_enuSetPinValue(RS_PORT , RS_PIN , DIO_u8LOW);
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	60 e0       	ldi	r22, 0x00	; 0
    1cca:	40 e0       	ldi	r20, 0x00	; 0
    1ccc:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	// set rw as write operation , EN is low
	DIO_enuSetPinValue(RW_PORT , RW_PIN , DIO_u8LOW);
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	61 e0       	ldi	r22, 0x01	; 1
    1cd4:	40 e0       	ldi	r20, 0x00	; 0
    1cd6:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	40 e0       	ldi	r20, 0x00	; 0
    1ce0:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	//write Data
	DIO_enuSetPinValue(D7_PORT , D7_PIN , ((Copy_u8Command>>7)&1));
    1ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce6:	98 2f       	mov	r25, r24
    1ce8:	99 1f       	adc	r25, r25
    1cea:	99 27       	eor	r25, r25
    1cec:	99 1f       	adc	r25, r25
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	67 e0       	ldi	r22, 0x07	; 7
    1cf2:	49 2f       	mov	r20, r25
    1cf4:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_PORT , D6_PIN , ((Copy_u8Command>>6)&1));
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	82 95       	swap	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	86 95       	lsr	r24
    1d00:	83 70       	andi	r24, 0x03	; 3
    1d02:	98 2f       	mov	r25, r24
    1d04:	91 70       	andi	r25, 0x01	; 1
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	66 e0       	ldi	r22, 0x06	; 6
    1d0a:	49 2f       	mov	r20, r25
    1d0c:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_PORT , D5_PIN , ((Copy_u8Command>>5)&1));
    1d10:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d12:	82 95       	swap	r24
    1d14:	86 95       	lsr	r24
    1d16:	87 70       	andi	r24, 0x07	; 7
    1d18:	98 2f       	mov	r25, r24
    1d1a:	91 70       	andi	r25, 0x01	; 1
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	65 e0       	ldi	r22, 0x05	; 5
    1d20:	49 2f       	mov	r20, r25
    1d22:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_PORT , D4_PIN , ((Copy_u8Command>>4)&1));
    1d26:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d28:	82 95       	swap	r24
    1d2a:	8f 70       	andi	r24, 0x0F	; 15
    1d2c:	98 2f       	mov	r25, r24
    1d2e:	91 70       	andi	r25, 0x01	; 1
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	49 2f       	mov	r20, r25
    1d36:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D3_PORT , D3_PIN , ((Copy_u8Command>>3)&1));
    1d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d3c:	86 95       	lsr	r24
    1d3e:	86 95       	lsr	r24
    1d40:	86 95       	lsr	r24
    1d42:	98 2f       	mov	r25, r24
    1d44:	91 70       	andi	r25, 0x01	; 1
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	49 2f       	mov	r20, r25
    1d4c:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D2_PORT , D2_PIN , ((Copy_u8Command>>2)&1));
    1d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d52:	86 95       	lsr	r24
    1d54:	86 95       	lsr	r24
    1d56:	98 2f       	mov	r25, r24
    1d58:	91 70       	andi	r25, 0x01	; 1
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	49 2f       	mov	r20, r25
    1d60:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D1_PORT , D1_PIN , ((Copy_u8Command>>1)&1));
    1d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d66:	86 95       	lsr	r24
    1d68:	98 2f       	mov	r25, r24
    1d6a:	91 70       	andi	r25, 0x01	; 1
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	49 2f       	mov	r20, r25
    1d72:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D0_PORT , D0_PIN , ((Copy_u8Command>>0)&1));
    1d76:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d78:	98 2f       	mov	r25, r24
    1d7a:	91 70       	andi	r25, 0x01	; 1
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	60 e0       	ldi	r22, 0x00	; 0
    1d80:	49 2f       	mov	r20, r25
    1d82:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>

	// Enable latch
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8HIGH);
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	a0 e2       	ldi	r26, 0x20	; 32
    1d96:	b1 e4       	ldi	r27, 0x41	; 65
    1d98:	8b 87       	std	Y+11, r24	; 0x0b
    1d9a:	9c 87       	std	Y+12, r25	; 0x0c
    1d9c:	ad 87       	std	Y+13, r26	; 0x0d
    1d9e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1da2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	4a e7       	ldi	r20, 0x7A	; 122
    1dae:	53 e4       	ldi	r21, 0x43	; 67
    1db0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	8f 83       	std	Y+7, r24	; 0x07
    1dba:	98 87       	std	Y+8, r25	; 0x08
    1dbc:	a9 87       	std	Y+9, r26	; 0x09
    1dbe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc2:	78 85       	ldd	r23, Y+8	; 0x08
    1dc4:	89 85       	ldd	r24, Y+9	; 0x09
    1dc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	5f e3       	ldi	r21, 0x3F	; 63
    1dd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <LCD_invidSendCommend+0x132>
		__ticks = 1;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	9e 83       	std	Y+6, r25	; 0x06
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	3f c0       	rjmp	.+126    	; 0x1e60 <LCD_invidSendCommend+0x1b0>
	else if (__tmp > 65535)
    1de2:	6f 81       	ldd	r22, Y+7	; 0x07
    1de4:	78 85       	ldd	r23, Y+8	; 0x08
    1de6:	89 85       	ldd	r24, Y+9	; 0x09
    1de8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	3f ef       	ldi	r19, 0xFF	; 255
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	57 e4       	ldi	r21, 0x47	; 71
    1df2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	4c f5       	brge	.+82     	; 0x1e4c <LCD_invidSendCommend+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	40 e2       	ldi	r20, 0x20	; 32
    1e08:	51 e4       	ldi	r21, 0x41	; 65
    1e0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	bc 01       	movw	r22, r24
    1e14:	cd 01       	movw	r24, r26
    1e16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1a:	dc 01       	movw	r26, r24
    1e1c:	cb 01       	movw	r24, r22
    1e1e:	9e 83       	std	Y+6, r25	; 0x06
    1e20:	8d 83       	std	Y+5, r24	; 0x05
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_invidSendCommend+0x192>
    1e24:	89 e1       	ldi	r24, 0x19	; 25
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	f1 f7       	brne	.-4      	; 0x1e30 <LCD_invidSendCommend+0x180>
    1e34:	9c 83       	std	Y+4, r25	; 0x04
    1e36:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e38:	8d 81       	ldd	r24, Y+5	; 0x05
    1e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e3c:	01 97       	sbiw	r24, 0x01	; 1
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e42:	8d 81       	ldd	r24, Y+5	; 0x05
    1e44:	9e 81       	ldd	r25, Y+6	; 0x06
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	69 f7       	brne	.-38     	; 0x1e24 <LCD_invidSendCommend+0x174>
    1e4a:	14 c0       	rjmp	.+40     	; 0x1e74 <LCD_invidSendCommend+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e58:	dc 01       	movw	r26, r24
    1e5a:	cb 01       	movw	r24, r22
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	9a 83       	std	Y+2, r25	; 0x02
    1e66:	89 83       	std	Y+1, r24	; 0x01
    1e68:	89 81       	ldd	r24, Y+1	; 0x01
    1e6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6c:	01 97       	sbiw	r24, 0x01	; 1
    1e6e:	f1 f7       	brne	.-4      	; 0x1e6c <LCD_invidSendCommend+0x1bc>
    1e70:	9a 83       	std	Y+2, r25	; 0x02
    1e72:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT , EN_PIN , DIO_u8LOW);
    1e74:	81 e0       	ldi	r24, 0x01	; 1
    1e76:	62 e0       	ldi	r22, 0x02	; 2
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 01 08 	call	0x1002	; 0x1002 <DIO_enuSetPinValue>
}
    1e7e:	2f 96       	adiw	r28, 0x0f	; 15
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <CAL_u32SUM>:
 */
#include "stdTypes.h"
#include "cal.h"

u8 CAL_u32SUM(u8 num1[],u8 num2[],u8 n, u8 m)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
    1e98:	2a 97       	sbiw	r28, 0x0a	; 10
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	78 87       	std	Y+8, r23	; 0x08
    1eaa:	6f 83       	std	Y+7, r22	; 0x07
    1eac:	49 87       	std	Y+9, r20	; 0x09
    1eae:	2a 87       	std	Y+10, r18	; 0x0a
	u8 n1 = 0,n2 = 0;
    1eb0:	1c 82       	std	Y+4, r1	; 0x04
    1eb2:	1b 82       	std	Y+3, r1	; 0x03
	for(u8 counter = 0; counter < n;counter++)
    1eb4:	1a 82       	std	Y+2, r1	; 0x02
    1eb6:	28 c0       	rjmp	.+80     	; 0x1f08 <CAL_u32SUM+0x78>
	{
		n1 += ((counter * 10) * num1[counter]);
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	88 2f       	mov	r24, r24
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 01       	movw	r18, r24
    1ec0:	22 0f       	add	r18, r18
    1ec2:	33 1f       	adc	r19, r19
    1ec4:	c9 01       	movw	r24, r18
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	a9 01       	movw	r20, r18
    1ed0:	48 0f       	add	r20, r24
    1ed2:	59 1f       	adc	r21, r25
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	28 2f       	mov	r18, r24
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	8d 81       	ldd	r24, Y+5	; 0x05
    1edc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ede:	fc 01       	movw	r30, r24
    1ee0:	e2 0f       	add	r30, r18
    1ee2:	f3 1f       	adc	r31, r19
    1ee4:	80 81       	ld	r24, Z
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 01       	movw	r18, r24
    1eec:	42 9f       	mul	r20, r18
    1eee:	c0 01       	movw	r24, r0
    1ef0:	43 9f       	mul	r20, r19
    1ef2:	90 0d       	add	r25, r0
    1ef4:	52 9f       	mul	r21, r18
    1ef6:	90 0d       	add	r25, r0
    1ef8:	11 24       	eor	r1, r1
    1efa:	98 2f       	mov	r25, r24
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	89 0f       	add	r24, r25
    1f00:	8c 83       	std	Y+4, r24	; 0x04
#include "cal.h"

u8 CAL_u32SUM(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	8a 83       	std	Y+2, r24	; 0x02
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	89 85       	ldd	r24, Y+9	; 0x09
    1f0c:	98 17       	cp	r25, r24
    1f0e:	a0 f2       	brcs	.-88     	; 0x1eb8 <CAL_u32SUM+0x28>
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    1f10:	19 82       	std	Y+1, r1	; 0x01
    1f12:	28 c0       	rjmp	.+80     	; 0x1f64 <CAL_u32SUM+0xd4>
	{
		n2 += ((counter * 10) * num2[counter]);
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	88 2f       	mov	r24, r24
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	c9 01       	movw	r24, r18
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	a9 01       	movw	r20, r18
    1f2c:	48 0f       	add	r20, r24
    1f2e:	59 1f       	adc	r21, r25
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	8f 81       	ldd	r24, Y+7	; 0x07
    1f38:	98 85       	ldd	r25, Y+8	; 0x08
    1f3a:	fc 01       	movw	r30, r24
    1f3c:	e2 0f       	add	r30, r18
    1f3e:	f3 1f       	adc	r31, r19
    1f40:	80 81       	ld	r24, Z
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9c 01       	movw	r18, r24
    1f48:	42 9f       	mul	r20, r18
    1f4a:	c0 01       	movw	r24, r0
    1f4c:	43 9f       	mul	r20, r19
    1f4e:	90 0d       	add	r25, r0
    1f50:	52 9f       	mul	r21, r18
    1f52:	90 0d       	add	r25, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	98 2f       	mov	r25, r24
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	89 0f       	add	r24, r25
    1f5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	8f 5f       	subi	r24, 0xFF	; 255
    1f62:	89 83       	std	Y+1, r24	; 0x01
    1f64:	99 81       	ldd	r25, Y+1	; 0x01
    1f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f68:	98 17       	cp	r25, r24
    1f6a:	a0 f2       	brcs	.-88     	; 0x1f14 <CAL_u32SUM+0x84>
	{
		n2 += ((counter * 10) * num2[counter]);
	}
	return (n1+n2+'0');
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	89 0f       	add	r24, r25
    1f72:	80 5d       	subi	r24, 0xD0	; 208
}
    1f74:	2a 96       	adiw	r28, 0x0a	; 10
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	cf 91       	pop	r28
    1f82:	df 91       	pop	r29
    1f84:	08 95       	ret

00001f86 <CAL_u32SUB>:

u8 CAL_u32SUB(u8 num1[],u8 num2[],u8 n, u8 m)
{
    1f86:	df 93       	push	r29
    1f88:	cf 93       	push	r28
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
    1f8e:	2a 97       	sbiw	r28, 0x0a	; 10
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
    1f9e:	78 87       	std	Y+8, r23	; 0x08
    1fa0:	6f 83       	std	Y+7, r22	; 0x07
    1fa2:	49 87       	std	Y+9, r20	; 0x09
    1fa4:	2a 87       	std	Y+10, r18	; 0x0a
	u8 n1 = 0,n2 = 0;
    1fa6:	1c 82       	std	Y+4, r1	; 0x04
    1fa8:	1b 82       	std	Y+3, r1	; 0x03
	for(u8 counter = 0; counter < n;counter++)
    1faa:	1a 82       	std	Y+2, r1	; 0x02
    1fac:	28 c0       	rjmp	.+80     	; 0x1ffe <CAL_u32SUB+0x78>
	{
		n1 += ((counter * 10) * num1[counter]);
    1fae:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9c 01       	movw	r18, r24
    1fb6:	22 0f       	add	r18, r18
    1fb8:	33 1f       	adc	r19, r19
    1fba:	c9 01       	movw	r24, r18
    1fbc:	88 0f       	add	r24, r24
    1fbe:	99 1f       	adc	r25, r25
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	a9 01       	movw	r20, r18
    1fc6:	48 0f       	add	r20, r24
    1fc8:	59 1f       	adc	r21, r25
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	e2 0f       	add	r30, r18
    1fd8:	f3 1f       	adc	r31, r19
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	9c 01       	movw	r18, r24
    1fe2:	42 9f       	mul	r20, r18
    1fe4:	c0 01       	movw	r24, r0
    1fe6:	43 9f       	mul	r20, r19
    1fe8:	90 0d       	add	r25, r0
    1fea:	52 9f       	mul	r21, r18
    1fec:	90 0d       	add	r25, r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff4:	89 0f       	add	r24, r25
    1ff6:	8c 83       	std	Y+4, r24	; 0x04
}

u8 CAL_u32SUB(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	8f 5f       	subi	r24, 0xFF	; 255
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	9a 81       	ldd	r25, Y+2	; 0x02
    2000:	89 85       	ldd	r24, Y+9	; 0x09
    2002:	98 17       	cp	r25, r24
    2004:	a0 f2       	brcs	.-88     	; 0x1fae <CAL_u32SUB+0x28>
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    2006:	19 82       	std	Y+1, r1	; 0x01
    2008:	28 c0       	rjmp	.+80     	; 0x205a <CAL_u32SUB+0xd4>
	{
		n2 += ((counter * 10) * num2[counter]);
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	88 2f       	mov	r24, r24
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9c 01       	movw	r18, r24
    2012:	22 0f       	add	r18, r18
    2014:	33 1f       	adc	r19, r19
    2016:	c9 01       	movw	r24, r18
    2018:	88 0f       	add	r24, r24
    201a:	99 1f       	adc	r25, r25
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	a9 01       	movw	r20, r18
    2022:	48 0f       	add	r20, r24
    2024:	59 1f       	adc	r21, r25
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8f 81       	ldd	r24, Y+7	; 0x07
    202e:	98 85       	ldd	r25, Y+8	; 0x08
    2030:	fc 01       	movw	r30, r24
    2032:	e2 0f       	add	r30, r18
    2034:	f3 1f       	adc	r31, r19
    2036:	80 81       	ld	r24, Z
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c 01       	movw	r18, r24
    203e:	42 9f       	mul	r20, r18
    2040:	c0 01       	movw	r24, r0
    2042:	43 9f       	mul	r20, r19
    2044:	90 0d       	add	r25, r0
    2046:	52 9f       	mul	r21, r18
    2048:	90 0d       	add	r25, r0
    204a:	11 24       	eor	r1, r1
    204c:	98 2f       	mov	r25, r24
    204e:	8b 81       	ldd	r24, Y+3	; 0x03
    2050:	89 0f       	add	r24, r25
    2052:	8b 83       	std	Y+3, r24	; 0x03
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	89 83       	std	Y+1, r24	; 0x01
    205a:	99 81       	ldd	r25, Y+1	; 0x01
    205c:	8a 85       	ldd	r24, Y+10	; 0x0a
    205e:	98 17       	cp	r25, r24
    2060:	a0 f2       	brcs	.-88     	; 0x200a <CAL_u32SUB+0x84>
	{
		n2 += ((counter * 10) * num2[counter]);
	}
	return (n1-n2+'0');
    2062:	9c 81       	ldd	r25, Y+4	; 0x04
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	39 2f       	mov	r19, r25
    2068:	38 1b       	sub	r19, r24
    206a:	83 2f       	mov	r24, r19
    206c:	80 5d       	subi	r24, 0xD0	; 208
}
    206e:	2a 96       	adiw	r28, 0x0a	; 10
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <CAL_u32MUL>:

u8 CAL_u32MUL(u8 num1[],u8 num2[],u8 n, u8 m)
{
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	cd b7       	in	r28, 0x3d	; 61
    2086:	de b7       	in	r29, 0x3e	; 62
    2088:	2a 97       	sbiw	r28, 0x0a	; 10
    208a:	0f b6       	in	r0, 0x3f	; 63
    208c:	f8 94       	cli
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	0f be       	out	0x3f, r0	; 63
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	9e 83       	std	Y+6, r25	; 0x06
    2096:	8d 83       	std	Y+5, r24	; 0x05
    2098:	78 87       	std	Y+8, r23	; 0x08
    209a:	6f 83       	std	Y+7, r22	; 0x07
    209c:	49 87       	std	Y+9, r20	; 0x09
    209e:	2a 87       	std	Y+10, r18	; 0x0a
	u8 n1 = 0,n2 = 0;
    20a0:	1c 82       	std	Y+4, r1	; 0x04
    20a2:	1b 82       	std	Y+3, r1	; 0x03
	for(u8 counter = 0; counter < n;counter++)
    20a4:	1a 82       	std	Y+2, r1	; 0x02
    20a6:	28 c0       	rjmp	.+80     	; 0x20f8 <CAL_u32MUL+0x78>
	{
		n1 += ((counter * 10) * num1[counter]);
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 01       	movw	r18, r24
    20b0:	22 0f       	add	r18, r18
    20b2:	33 1f       	adc	r19, r19
    20b4:	c9 01       	movw	r24, r18
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	88 0f       	add	r24, r24
    20bc:	99 1f       	adc	r25, r25
    20be:	a9 01       	movw	r20, r18
    20c0:	48 0f       	add	r20, r24
    20c2:	59 1f       	adc	r21, r25
    20c4:	8a 81       	ldd	r24, Y+2	; 0x02
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	fc 01       	movw	r30, r24
    20d0:	e2 0f       	add	r30, r18
    20d2:	f3 1f       	adc	r31, r19
    20d4:	80 81       	ld	r24, Z
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9c 01       	movw	r18, r24
    20dc:	42 9f       	mul	r20, r18
    20de:	c0 01       	movw	r24, r0
    20e0:	43 9f       	mul	r20, r19
    20e2:	90 0d       	add	r25, r0
    20e4:	52 9f       	mul	r21, r18
    20e6:	90 0d       	add	r25, r0
    20e8:	11 24       	eor	r1, r1
    20ea:	98 2f       	mov	r25, r24
    20ec:	8c 81       	ldd	r24, Y+4	; 0x04
    20ee:	89 0f       	add	r24, r25
    20f0:	8c 83       	std	Y+4, r24	; 0x04
}

u8 CAL_u32MUL(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
    20f2:	8a 81       	ldd	r24, Y+2	; 0x02
    20f4:	8f 5f       	subi	r24, 0xFF	; 255
    20f6:	8a 83       	std	Y+2, r24	; 0x02
    20f8:	9a 81       	ldd	r25, Y+2	; 0x02
    20fa:	89 85       	ldd	r24, Y+9	; 0x09
    20fc:	98 17       	cp	r25, r24
    20fe:	a0 f2       	brcs	.-88     	; 0x20a8 <CAL_u32MUL+0x28>
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    2100:	19 82       	std	Y+1, r1	; 0x01
    2102:	28 c0       	rjmp	.+80     	; 0x2154 <CAL_u32MUL+0xd4>
	{
		n2 += ((counter * 10) * num2[counter]);
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9c 01       	movw	r18, r24
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	c9 01       	movw	r24, r18
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	88 0f       	add	r24, r24
    2118:	99 1f       	adc	r25, r25
    211a:	a9 01       	movw	r20, r18
    211c:	48 0f       	add	r20, r24
    211e:	59 1f       	adc	r21, r25
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	8f 81       	ldd	r24, Y+7	; 0x07
    2128:	98 85       	ldd	r25, Y+8	; 0x08
    212a:	fc 01       	movw	r30, r24
    212c:	e2 0f       	add	r30, r18
    212e:	f3 1f       	adc	r31, r19
    2130:	80 81       	ld	r24, Z
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 01       	movw	r18, r24
    2138:	42 9f       	mul	r20, r18
    213a:	c0 01       	movw	r24, r0
    213c:	43 9f       	mul	r20, r19
    213e:	90 0d       	add	r25, r0
    2140:	52 9f       	mul	r21, r18
    2142:	90 0d       	add	r25, r0
    2144:	11 24       	eor	r1, r1
    2146:	98 2f       	mov	r25, r24
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	89 0f       	add	r24, r25
    214c:	8b 83       	std	Y+3, r24	; 0x03
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    214e:	89 81       	ldd	r24, Y+1	; 0x01
    2150:	8f 5f       	subi	r24, 0xFF	; 255
    2152:	89 83       	std	Y+1, r24	; 0x01
    2154:	99 81       	ldd	r25, Y+1	; 0x01
    2156:	8a 85       	ldd	r24, Y+10	; 0x0a
    2158:	98 17       	cp	r25, r24
    215a:	a0 f2       	brcs	.-88     	; 0x2104 <CAL_u32MUL+0x84>
	{
		n2 += ((counter * 10) * num2[counter]);
	}
	return ((n1*n2)+'0');
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	8b 81       	ldd	r24, Y+3	; 0x03
    2160:	98 9f       	mul	r25, r24
    2162:	80 2d       	mov	r24, r0
    2164:	11 24       	eor	r1, r1
    2166:	80 5d       	subi	r24, 0xD0	; 208
}
    2168:	2a 96       	adiw	r28, 0x0a	; 10
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <CAL_u32DIV>:

u8 CAL_u32DIV(u8 num1[],u8 num2[],u8 n, u8 m)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	2a 97       	sbiw	r28, 0x0a	; 10
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	9e 83       	std	Y+6, r25	; 0x06
    2190:	8d 83       	std	Y+5, r24	; 0x05
    2192:	78 87       	std	Y+8, r23	; 0x08
    2194:	6f 83       	std	Y+7, r22	; 0x07
    2196:	49 87       	std	Y+9, r20	; 0x09
    2198:	2a 87       	std	Y+10, r18	; 0x0a
	u8 n1 = 0,n2 = 0;
    219a:	1c 82       	std	Y+4, r1	; 0x04
    219c:	1b 82       	std	Y+3, r1	; 0x03
	for(u8 counter = 0; counter < n;counter++)
    219e:	1a 82       	std	Y+2, r1	; 0x02
    21a0:	28 c0       	rjmp	.+80     	; 0x21f2 <CAL_u32DIV+0x78>
	{
		n1 += ((counter * 10) * num1[counter]);
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	88 2f       	mov	r24, r24
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9c 01       	movw	r18, r24
    21aa:	22 0f       	add	r18, r18
    21ac:	33 1f       	adc	r19, r19
    21ae:	c9 01       	movw	r24, r18
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	a9 01       	movw	r20, r18
    21ba:	48 0f       	add	r20, r24
    21bc:	59 1f       	adc	r21, r25
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	fc 01       	movw	r30, r24
    21ca:	e2 0f       	add	r30, r18
    21cc:	f3 1f       	adc	r31, r19
    21ce:	80 81       	ld	r24, Z
    21d0:	88 2f       	mov	r24, r24
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 01       	movw	r18, r24
    21d6:	42 9f       	mul	r20, r18
    21d8:	c0 01       	movw	r24, r0
    21da:	43 9f       	mul	r20, r19
    21dc:	90 0d       	add	r25, r0
    21de:	52 9f       	mul	r21, r18
    21e0:	90 0d       	add	r25, r0
    21e2:	11 24       	eor	r1, r1
    21e4:	98 2f       	mov	r25, r24
    21e6:	8c 81       	ldd	r24, Y+4	; 0x04
    21e8:	89 0f       	add	r24, r25
    21ea:	8c 83       	std	Y+4, r24	; 0x04
}

u8 CAL_u32DIV(u8 num1[],u8 num2[],u8 n, u8 m)
{
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	8f 5f       	subi	r24, 0xFF	; 255
    21f0:	8a 83       	std	Y+2, r24	; 0x02
    21f2:	9a 81       	ldd	r25, Y+2	; 0x02
    21f4:	89 85       	ldd	r24, Y+9	; 0x09
    21f6:	98 17       	cp	r25, r24
    21f8:	a0 f2       	brcs	.-88     	; 0x21a2 <CAL_u32DIV+0x28>
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    21fa:	19 82       	std	Y+1, r1	; 0x01
    21fc:	28 c0       	rjmp	.+80     	; 0x224e <CAL_u32DIV+0xd4>
	{
		n2 += ((counter * 10) * num2[counter]);
    21fe:	89 81       	ldd	r24, Y+1	; 0x01
    2200:	88 2f       	mov	r24, r24
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 01       	movw	r18, r24
    2206:	22 0f       	add	r18, r18
    2208:	33 1f       	adc	r19, r19
    220a:	c9 01       	movw	r24, r18
    220c:	88 0f       	add	r24, r24
    220e:	99 1f       	adc	r25, r25
    2210:	88 0f       	add	r24, r24
    2212:	99 1f       	adc	r25, r25
    2214:	a9 01       	movw	r20, r18
    2216:	48 0f       	add	r20, r24
    2218:	59 1f       	adc	r21, r25
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	8f 81       	ldd	r24, Y+7	; 0x07
    2222:	98 85       	ldd	r25, Y+8	; 0x08
    2224:	fc 01       	movw	r30, r24
    2226:	e2 0f       	add	r30, r18
    2228:	f3 1f       	adc	r31, r19
    222a:	80 81       	ld	r24, Z
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	9c 01       	movw	r18, r24
    2232:	42 9f       	mul	r20, r18
    2234:	c0 01       	movw	r24, r0
    2236:	43 9f       	mul	r20, r19
    2238:	90 0d       	add	r25, r0
    223a:	52 9f       	mul	r21, r18
    223c:	90 0d       	add	r25, r0
    223e:	11 24       	eor	r1, r1
    2240:	98 2f       	mov	r25, r24
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	89 0f       	add	r24, r25
    2246:	8b 83       	std	Y+3, r24	; 0x03
	u8 n1 = 0,n2 = 0;
	for(u8 counter = 0; counter < n;counter++)
	{
		n1 += ((counter * 10) * num1[counter]);
	}
	for(u8 counter = 0; counter < m;counter++)
    2248:	89 81       	ldd	r24, Y+1	; 0x01
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	99 81       	ldd	r25, Y+1	; 0x01
    2250:	8a 85       	ldd	r24, Y+10	; 0x0a
    2252:	98 17       	cp	r25, r24
    2254:	a0 f2       	brcs	.-88     	; 0x21fe <CAL_u32DIV+0x84>
	{
		n2 += ((counter * 10) * num2[counter]);
	}
	return ((n1/n2)+'0');
    2256:	8c 81       	ldd	r24, Y+4	; 0x04
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	69 2f       	mov	r22, r25
    225c:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <__udivmodqi4>
    2260:	80 5d       	subi	r24, 0xD0	; 208
}
    2262:	2a 96       	adiw	r28, 0x0a	; 10
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	cf 91       	pop	r28
    2270:	df 91       	pop	r29
    2272:	08 95       	ret

00002274 <main>:
#include "KPD_int.h"

#include "cal.h"

int main(void)
{
    2274:	df 93       	push	r29
    2276:	cf 93       	push	r28
    2278:	cd b7       	in	r28, 0x3d	; 61
    227a:	de b7       	in	r29, 0x3e	; 62
    227c:	2e 97       	sbiw	r28, 0x0e	; 14
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_u8OP1[NUM_SIZE];
	u8 Local_u8OP2[NUM_SIZE];
	u8 Local_u8OP;
	u8 counter1 = 0;
    2288:	1a 82       	std	Y+2, r1	; 0x02
	u8 counter2 = 0;
    228a:	19 82       	std	Y+1, r1	; 0x01
	DIO_enuInit();
    228c:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_enuInit>
	LCD_enuInit();
    2290:	0e 94 ad 0a 	call	0x155a	; 0x155a <LCD_enuInit>

	while(1)
	{
		Local_u8Key = KPD_enuGetPresedKey();
    2294:	0e 94 19 0a 	call	0x1432	; 0x1432 <KPD_enuGetPresedKey>
    2298:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_u8Key == 20)
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	84 31       	cpi	r24, 0x14	; 20
    229e:	d1 f3       	breq	.-12     	; 0x2294 <main+0x20>
			continue;
		else
		{
			do
			{
			}while(Local_u8Key == 0xff);
    22a0:	8c 81       	ldd	r24, Y+4	; 0x04
    22a2:	8f 3f       	cpi	r24, 0xFF	; 255
    22a4:	e9 f3       	breq	.-6      	; 0x22a0 <main+0x2c>
			LCD_enuDisplayChar(Local_u8Key);
    22a6:	8c 81       	ldd	r24, Y+4	; 0x04
    22a8:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
			if(Local_u8Key == '+' || Local_u8Key == '-' || Local_u8Key == '/' || Local_u8Key == '*')
    22ac:	8c 81       	ldd	r24, Y+4	; 0x04
    22ae:	8b 32       	cpi	r24, 0x2B	; 43
    22b0:	49 f0       	breq	.+18     	; 0x22c4 <main+0x50>
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	8d 32       	cpi	r24, 0x2D	; 45
    22b6:	31 f0       	breq	.+12     	; 0x22c4 <main+0x50>
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	8f 32       	cpi	r24, 0x2F	; 47
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <main+0x50>
    22be:	8c 81       	ldd	r24, Y+4	; 0x04
    22c0:	8a 32       	cpi	r24, 0x2A	; 42
    22c2:	19 f4       	brne	.+6      	; 0x22ca <main+0x56>
			{
				Local_u8OP = Local_u8Key;
    22c4:	8c 81       	ldd	r24, Y+4	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
    22c8:	10 c0       	rjmp	.+32     	; 0x22ea <main+0x76>
				break;
			}
			else
			{
				Local_u8OP1[counter1++] = Local_u8Key-'0';
    22ca:	8a 81       	ldd	r24, Y+2	; 0x02
    22cc:	28 2f       	mov	r18, r24
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	8c 81       	ldd	r24, Y+4	; 0x04
    22d2:	48 2f       	mov	r20, r24
    22d4:	40 53       	subi	r20, 0x30	; 48
    22d6:	ce 01       	movw	r24, r28
    22d8:	05 96       	adiw	r24, 0x05	; 5
    22da:	fc 01       	movw	r30, r24
    22dc:	e2 0f       	add	r30, r18
    22de:	f3 1f       	adc	r31, r19
    22e0:	40 83       	st	Z, r20
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	8f 5f       	subi	r24, 0xFF	; 255
    22e6:	8a 83       	std	Y+2, r24	; 0x02
    22e8:	d5 cf       	rjmp	.-86     	; 0x2294 <main+0x20>
			}
		}
	}
	while(1)
	{
		Local_u8Key = KPD_enuGetPresedKey();
    22ea:	0e 94 19 0a 	call	0x1432	; 0x1432 <KPD_enuGetPresedKey>
    22ee:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_u8Key == 20)
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	84 31       	cpi	r24, 0x14	; 20
    22f4:	d1 f3       	breq	.-12     	; 0x22ea <main+0x76>
			continue;
		else
		{
			do
			{
			}while(Local_u8Key == 0xff);
    22f6:	8c 81       	ldd	r24, Y+4	; 0x04
    22f8:	8f 3f       	cpi	r24, 0xFF	; 255
    22fa:	e9 f3       	breq	.-6      	; 0x22f6 <main+0x82>
			LCD_enuDisplayChar(Local_u8Key);
    22fc:	8c 81       	ldd	r24, Y+4	; 0x04
    22fe:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
			if(Local_u8Key == '=')
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	8d 33       	cpi	r24, 0x3D	; 61
    2306:	09 f4       	brne	.+2      	; 0x230a <main+0x96>
    2308:	63 c0       	rjmp	.+198    	; 0x23d0 <main+0x15c>
				break;
			else
				Local_u8OP2[counter2++] = Local_u8Key-'0';
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	28 2f       	mov	r18, r24
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	8c 81       	ldd	r24, Y+4	; 0x04
    2312:	48 2f       	mov	r20, r24
    2314:	40 53       	subi	r20, 0x30	; 48
    2316:	ce 01       	movw	r24, r28
    2318:	09 96       	adiw	r24, 0x09	; 9
    231a:	fc 01       	movw	r30, r24
    231c:	e2 0f       	add	r30, r18
    231e:	f3 1f       	adc	r31, r19
    2320:	40 83       	st	Z, r20
    2322:	89 81       	ldd	r24, Y+1	; 0x01
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	89 83       	std	Y+1, r24	; 0x01
		}
	switch(Local_u8OP)
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	3e 87       	std	Y+14, r19	; 0x0e
    2330:	2d 87       	std	Y+13, r18	; 0x0d
    2332:	8d 85       	ldd	r24, Y+13	; 0x0d
    2334:	9e 85       	ldd	r25, Y+14	; 0x0e
    2336:	8b 32       	cpi	r24, 0x2B	; 43
    2338:	91 05       	cpc	r25, r1
    233a:	b1 f0       	breq	.+44     	; 0x2368 <main+0xf4>
    233c:	2d 85       	ldd	r18, Y+13	; 0x0d
    233e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2340:	2c 32       	cpi	r18, 0x2C	; 44
    2342:	31 05       	cpc	r19, r1
    2344:	34 f4       	brge	.+12     	; 0x2352 <main+0xde>
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	8a 32       	cpi	r24, 0x2A	; 42
    234c:	91 05       	cpc	r25, r1
    234e:	31 f1       	breq	.+76     	; 0x239c <main+0x128>
    2350:	cc cf       	rjmp	.-104    	; 0x22ea <main+0x76>
    2352:	2d 85       	ldd	r18, Y+13	; 0x0d
    2354:	3e 85       	ldd	r19, Y+14	; 0x0e
    2356:	2d 32       	cpi	r18, 0x2D	; 45
    2358:	31 05       	cpc	r19, r1
    235a:	99 f0       	breq	.+38     	; 0x2382 <main+0x10e>
    235c:	8d 85       	ldd	r24, Y+13	; 0x0d
    235e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2360:	8f 32       	cpi	r24, 0x2F	; 47
    2362:	91 05       	cpc	r25, r1
    2364:	41 f1       	breq	.+80     	; 0x23b6 <main+0x142>
    2366:	c1 cf       	rjmp	.-126    	; 0x22ea <main+0x76>
	{
		case '+':
			LCD_enuDisplayChar(CAL_u32SUM(Local_u8OP1,Local_u8OP2,counter1,counter2));
    2368:	ce 01       	movw	r24, r28
    236a:	05 96       	adiw	r24, 0x05	; 5
    236c:	9e 01       	movw	r18, r28
    236e:	27 5f       	subi	r18, 0xF7	; 247
    2370:	3f 4f       	sbci	r19, 0xFF	; 255
    2372:	b9 01       	movw	r22, r18
    2374:	4a 81       	ldd	r20, Y+2	; 0x02
    2376:	29 81       	ldd	r18, Y+1	; 0x01
    2378:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <CAL_u32SUM>
    237c:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
    2380:	b4 cf       	rjmp	.-152    	; 0x22ea <main+0x76>
			break;
		case '-':
			LCD_enuDisplayChar(CAL_u32SUB(Local_u8OP1,Local_u8OP2,counter1,counter2));
    2382:	ce 01       	movw	r24, r28
    2384:	05 96       	adiw	r24, 0x05	; 5
    2386:	9e 01       	movw	r18, r28
    2388:	27 5f       	subi	r18, 0xF7	; 247
    238a:	3f 4f       	sbci	r19, 0xFF	; 255
    238c:	b9 01       	movw	r22, r18
    238e:	4a 81       	ldd	r20, Y+2	; 0x02
    2390:	29 81       	ldd	r18, Y+1	; 0x01
    2392:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <CAL_u32SUB>
    2396:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
    239a:	a7 cf       	rjmp	.-178    	; 0x22ea <main+0x76>
			break;
		case '*':
			LCD_enuDisplayChar(CAL_u32MUL(Local_u8OP1,Local_u8OP2,counter1,counter2));
    239c:	ce 01       	movw	r24, r28
    239e:	05 96       	adiw	r24, 0x05	; 5
    23a0:	9e 01       	movw	r18, r28
    23a2:	27 5f       	subi	r18, 0xF7	; 247
    23a4:	3f 4f       	sbci	r19, 0xFF	; 255
    23a6:	b9 01       	movw	r22, r18
    23a8:	4a 81       	ldd	r20, Y+2	; 0x02
    23aa:	29 81       	ldd	r18, Y+1	; 0x01
    23ac:	0e 94 40 10 	call	0x2080	; 0x2080 <CAL_u32MUL>
    23b0:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
    23b4:	9a cf       	rjmp	.-204    	; 0x22ea <main+0x76>
			break;
		case '/':
			LCD_enuDisplayChar(CAL_u32DIV(Local_u8OP1,Local_u8OP2,counter1,counter2));
    23b6:	ce 01       	movw	r24, r28
    23b8:	05 96       	adiw	r24, 0x05	; 5
    23ba:	9e 01       	movw	r18, r28
    23bc:	27 5f       	subi	r18, 0xF7	; 247
    23be:	3f 4f       	sbci	r19, 0xFF	; 255
    23c0:	b9 01       	movw	r22, r18
    23c2:	4a 81       	ldd	r20, Y+2	; 0x02
    23c4:	29 81       	ldd	r18, Y+1	; 0x01
    23c6:	0e 94 bd 10 	call	0x217a	; 0x217a <CAL_u32DIV>
    23ca:	0e 94 cd 0c 	call	0x199a	; 0x199a <LCD_enuDisplayChar>
    23ce:	8d cf       	rjmp	.-230    	; 0x22ea <main+0x76>
			break;
	}
	}
	return 0;
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	90 e0       	ldi	r25, 0x00	; 0
}
    23d4:	2e 96       	adiw	r28, 0x0e	; 14
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	cf 91       	pop	r28
    23e2:	df 91       	pop	r29
    23e4:	08 95       	ret

000023e6 <__udivmodqi4>:
    23e6:	99 1b       	sub	r25, r25
    23e8:	79 e0       	ldi	r23, 0x09	; 9
    23ea:	04 c0       	rjmp	.+8      	; 0x23f4 <__udivmodqi4_ep>

000023ec <__udivmodqi4_loop>:
    23ec:	99 1f       	adc	r25, r25
    23ee:	96 17       	cp	r25, r22
    23f0:	08 f0       	brcs	.+2      	; 0x23f4 <__udivmodqi4_ep>
    23f2:	96 1b       	sub	r25, r22

000023f4 <__udivmodqi4_ep>:
    23f4:	88 1f       	adc	r24, r24
    23f6:	7a 95       	dec	r23
    23f8:	c9 f7       	brne	.-14     	; 0x23ec <__udivmodqi4_loop>
    23fa:	80 95       	com	r24
    23fc:	08 95       	ret

000023fe <__prologue_saves__>:
    23fe:	2f 92       	push	r2
    2400:	3f 92       	push	r3
    2402:	4f 92       	push	r4
    2404:	5f 92       	push	r5
    2406:	6f 92       	push	r6
    2408:	7f 92       	push	r7
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	cf 93       	push	r28
    2420:	df 93       	push	r29
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	ca 1b       	sub	r28, r26
    2428:	db 0b       	sbc	r29, r27
    242a:	0f b6       	in	r0, 0x3f	; 63
    242c:	f8 94       	cli
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	cd bf       	out	0x3d, r28	; 61
    2434:	09 94       	ijmp

00002436 <__epilogue_restores__>:
    2436:	2a 88       	ldd	r2, Y+18	; 0x12
    2438:	39 88       	ldd	r3, Y+17	; 0x11
    243a:	48 88       	ldd	r4, Y+16	; 0x10
    243c:	5f 84       	ldd	r5, Y+15	; 0x0f
    243e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2440:	7d 84       	ldd	r7, Y+13	; 0x0d
    2442:	8c 84       	ldd	r8, Y+12	; 0x0c
    2444:	9b 84       	ldd	r9, Y+11	; 0x0b
    2446:	aa 84       	ldd	r10, Y+10	; 0x0a
    2448:	b9 84       	ldd	r11, Y+9	; 0x09
    244a:	c8 84       	ldd	r12, Y+8	; 0x08
    244c:	df 80       	ldd	r13, Y+7	; 0x07
    244e:	ee 80       	ldd	r14, Y+6	; 0x06
    2450:	fd 80       	ldd	r15, Y+5	; 0x05
    2452:	0c 81       	ldd	r16, Y+4	; 0x04
    2454:	1b 81       	ldd	r17, Y+3	; 0x03
    2456:	aa 81       	ldd	r26, Y+2	; 0x02
    2458:	b9 81       	ldd	r27, Y+1	; 0x01
    245a:	ce 0f       	add	r28, r30
    245c:	d1 1d       	adc	r29, r1
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	de bf       	out	0x3e, r29	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	cd bf       	out	0x3d, r28	; 61
    2468:	ed 01       	movw	r28, r26
    246a:	08 95       	ret

0000246c <_exit>:
    246c:	f8 94       	cli

0000246e <__stop_program>:
    246e:	ff cf       	rjmp	.-2      	; 0x246e <__stop_program>
