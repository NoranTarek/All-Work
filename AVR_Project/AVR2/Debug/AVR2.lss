
AVR2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001e72  00001f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080006a  0080006a  00001f10  2**0
                  ALLOC
  3 .stab         00001a88  00000000  00000000  00001f10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d70  00000000  00000000  00003998  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000049b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006601  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000074ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000829c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000083fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008689  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008e57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_15>
      40:	0c 94 72 06 	jmp	0xce4	; 0xce4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <main>
      8a:	0c 94 37 0f 	jmp	0x1e6e	; 0x1e6e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 28 0f 	jmp	0x1e50	; 0x1e50 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:

//IDLE or BUSY
static u8 ADC_State = IDLE ;

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	87 7f       	andi	r24, 0xF7	; 247
     b5a:	8c 93       	st	X, r24

	//ref -> AVCC
	SET_BIT(ADMUX , ADMUX_REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , ADMUX_REFS1);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24

	//Prescaler -> 128
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	81 60       	ori	r24, 0x01	; 1
     b84:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	84 60       	ori	r24, 0x04	; 4
     ba0:	8c 93       	st	X, r24

	//ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 68       	ori	r24, 0x80	; 128
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <ADC_u16ADCStartConvertPolling>:

u16 ADC_u16ADCStartConvertPolling(u8 Copy_u8Channel)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	00 d0       	rcall	.+0      	; 0xbbc <ADC_u16ADCStartConvertPolling+0x6>
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_Read = 0;
     bc4:	1a 82       	std	Y+2, r1	; 0x02
     bc6:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= 0b11100000;
     bc8:	a7 e2       	ldi	r26, 0x27	; 39
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e7 e2       	ldi	r30, 0x27	; 39
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	80 7e       	andi	r24, 0xE0	; 224
     bd4:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     bd6:	a7 e2       	ldi	r26, 0x27	; 39
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e7 e2       	ldi	r30, 0x27	; 39
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	90 81       	ld	r25, Z
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	89 2b       	or	r24, r25
     be4:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA , ADCSRA_ADSC);
     be6:	a6 e2       	ldi	r26, 0x26	; 38
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e6 e2       	ldi	r30, 0x26	; 38
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	80 64       	ori	r24, 0x40	; 64
     bf2:	8c 93       	st	X, r24

	while(0 == GET_BIT(ADCSRA , ADCSRA_ADIF));
     bf4:	e6 e2       	ldi	r30, 0x26	; 38
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	88 2f       	mov	r24, r24
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	80 71       	andi	r24, 0x10	; 16
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	95 95       	asr	r25
     c04:	87 95       	ror	r24
     c06:	95 95       	asr	r25
     c08:	87 95       	ror	r24
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	95 95       	asr	r25
     c10:	87 95       	ror	r24
     c12:	00 97       	sbiw	r24, 0x00	; 0
     c14:	79 f3       	breq	.-34     	; 0xbf4 <ADC_u16ADCStartConvertPolling+0x3e>

	ADC_Read = ADCLH;
     c16:	e4 e2       	ldi	r30, 0x24	; 36
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	91 81       	ldd	r25, Z+1	; 0x01
     c1e:	9a 83       	std	Y+2, r25	; 0x02
     c20:	89 83       	std	Y+1, r24	; 0x01

	//CLR flag
	SET_BIT(ADCSRA , ADCSRA_ADSC);
     c22:	a6 e2       	ldi	r26, 0x26	; 38
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	e6 e2       	ldi	r30, 0x26	; 38
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	80 64       	ori	r24, 0x40	; 64
     c2e:	8c 93       	st	X, r24

	return ADC_Read;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	9a 81       	ldd	r25, Y+2	; 0x02
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	cf 91       	pop	r28
     c3c:	df 91       	pop	r29
     c3e:	08 95       	ret

00000c40 <ADC_u8ADCStartConvertInt>:

u8 ADC_u8ADCStartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*ptrFunc)(void))
{
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	00 d0       	rcall	.+0      	; 0xc46 <ADC_u8ADCStartConvertInt+0x6>
     c46:	00 d0       	rcall	.+0      	; 0xc48 <ADC_u8ADCStartConvertInt+0x8>
     c48:	00 d0       	rcall	.+0      	; 0xc4a <ADC_u8ADCStartConvertInt+0xa>
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
     c4e:	8a 83       	std	Y+2, r24	; 0x02
     c50:	7c 83       	std	Y+4, r23	; 0x04
     c52:	6b 83       	std	Y+3, r22	; 0x03
     c54:	5e 83       	std	Y+6, r21	; 0x06
     c56:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = ES_OK;
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	89 83       	std	Y+1, r24	; 0x01
	if((ADC_State == IDLE) && (NULL != pu16Reading) && (NULL != ptrFunc))
     c5c:	80 91 68 00 	lds	r24, 0x0068
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a9 f5       	brne	.+106    	; 0xcce <ADC_u8ADCStartConvertInt+0x8e>
     c64:	8b 81       	ldd	r24, Y+3	; 0x03
     c66:	9c 81       	ldd	r25, Y+4	; 0x04
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	89 f1       	breq	.+98     	; 0xcce <ADC_u8ADCStartConvertInt+0x8e>
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f1       	breq	.+90     	; 0xcce <ADC_u8ADCStartConvertInt+0x8e>
	{
		ADC_State = BUSY;
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 68 00 	sts	0x0068, r24
		Global_ptr = pu16Reading;
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	9c 81       	ldd	r25, Y+4	; 0x04
     c7e:	90 93 6b 00 	sts	0x006B, r25
     c82:	80 93 6a 00 	sts	0x006A, r24
		GlobalPtrFunc = ptrFunc;
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	90 93 6d 00 	sts	0x006D, r25
     c8e:	80 93 6c 00 	sts	0x006C, r24

		ADMUX &= 0b11100000;
     c92:	a7 e2       	ldi	r26, 0x27	; 39
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e7 e2       	ldi	r30, 0x27	; 39
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	80 7e       	andi	r24, 0xE0	; 224
     c9e:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;
     ca0:	a7 e2       	ldi	r26, 0x27	; 39
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e7 e2       	ldi	r30, 0x27	; 39
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	90 81       	ld	r25, Z
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	89 2b       	or	r24, r25
     cae:	8c 93       	st	X, r24

		//Enable interrupt
		SET_BIT(ADCSRA , ADCSRA_ADIE);
     cb0:	a6 e2       	ldi	r26, 0x26	; 38
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e6 e2       	ldi	r30, 0x26	; 38
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	88 60       	ori	r24, 0x08	; 8
     cbc:	8c 93       	st	X, r24

		//Start Conversion
		SET_BIT(ADCSRA , ADCSRA_ADSC);
     cbe:	a6 e2       	ldi	r26, 0x26	; 38
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e6 e2       	ldi	r30, 0x26	; 38
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	80 64       	ori	r24, 0x40	; 64
     cca:	8c 93       	st	X, r24
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <ADC_u8ADCStartConvertInt+0x90>


	}
	else
	{
		Local_u8Error = ES_NOK;
     cce:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd2:	26 96       	adiw	r28, 0x06	; 6
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     ce4:	1f 92       	push	r1
     ce6:	0f 92       	push	r0
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	0f 92       	push	r0
     cec:	11 24       	eor	r1, r1
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
     d06:	df 93       	push	r29
     d08:	cf 93       	push	r28
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
	//Return Reading
	*Global_ptr = ADCLH;
     d0e:	a0 91 6a 00 	lds	r26, 0x006A
     d12:	b0 91 6b 00 	lds	r27, 0x006B
     d16:	e4 e2       	ldi	r30, 0x24	; 36
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	8d 93       	st	X+, r24
     d20:	9c 93       	st	X, r25
	//Execute function
	GlobalPtrFunc();
     d22:	e0 91 6c 00 	lds	r30, 0x006C
     d26:	f0 91 6d 00 	lds	r31, 0x006D
     d2a:	09 95       	icall
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
     d2c:	a6 e2       	ldi	r26, 0x26	; 38
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e6 e2       	ldi	r30, 0x26	; 38
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	87 7f       	andi	r24, 0xF7	; 247
     d38:	8c 93       	st	X, r24
	//Change state
	ADC_State = IDLE;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	80 93 68 00 	sts	0x0068, r24
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	0f 90       	pop	r0
     d62:	1f 90       	pop	r1
     d64:	18 95       	reti

00000d66 <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	0f 92       	push	r0
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
     d70:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     d72:	ea e3       	ldi	r30, 0x3A	; 58
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     d7a:	e7 e3       	ldi	r30, 0x37	; 55
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     d82:	e4 e3       	ldi	r30, 0x34	; 52
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     d8a:	e1 e3       	ldi	r30, 0x31	; 49
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     d92:	eb e3       	ldi	r30, 0x3B	; 59
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     d98:	e8 e3       	ldi	r30, 0x38	; 56
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     d9e:	e5 e3       	ldi	r30, 0x35	; 53
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	10 82       	st	Z, r1
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     da4:	e2 e3       	ldi	r30, 0x32	; 50
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
     dae:	89 81       	ldd	r24, Y+1	; 0x01
}
     db0:	0f 90       	pop	r0
     db2:	cf 91       	pop	r28
     db4:	df 91       	pop	r29
     db6:	08 95       	ret

00000db8 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     db8:	df 93       	push	r29
     dba:	cf 93       	push	r28
     dbc:	00 d0       	rcall	.+0      	; 0xdbe <DIO_enuSetPortDirection+0x6>
     dbe:	00 d0       	rcall	.+0      	; 0xdc0 <DIO_enuSetPortDirection+0x8>
     dc0:	0f 92       	push	r0
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	8a 83       	std	Y+2, r24	; 0x02
     dc8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     dca:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     dcc:	8a 81       	ldd	r24, Y+2	; 0x02
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	a8 f5       	brcc	.+106    	; 0xe3c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	28 2f       	mov	r18, r24
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	3d 83       	std	Y+5, r19	; 0x05
     dda:	2c 83       	std	Y+4, r18	; 0x04
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	81 30       	cpi	r24, 0x01	; 1
     de2:	91 05       	cpc	r25, r1
     de4:	d1 f0       	breq	.+52     	; 0xe1a <DIO_enuSetPortDirection+0x62>
     de6:	2c 81       	ldd	r18, Y+4	; 0x04
     de8:	3d 81       	ldd	r19, Y+5	; 0x05
     dea:	22 30       	cpi	r18, 0x02	; 2
     dec:	31 05       	cpc	r19, r1
     dee:	2c f4       	brge	.+10     	; 0xdfa <DIO_enuSetPortDirection+0x42>
     df0:	8c 81       	ldd	r24, Y+4	; 0x04
     df2:	9d 81       	ldd	r25, Y+5	; 0x05
     df4:	00 97       	sbiw	r24, 0x00	; 0
     df6:	61 f0       	breq	.+24     	; 0xe10 <DIO_enuSetPortDirection+0x58>
     df8:	1e c0       	rjmp	.+60     	; 0xe36 <DIO_enuSetPortDirection+0x7e>
     dfa:	2c 81       	ldd	r18, Y+4	; 0x04
     dfc:	3d 81       	ldd	r19, Y+5	; 0x05
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	81 f0       	breq	.+32     	; 0xe24 <DIO_enuSetPortDirection+0x6c>
     e04:	8c 81       	ldd	r24, Y+4	; 0x04
     e06:	9d 81       	ldd	r25, Y+5	; 0x05
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	91 05       	cpc	r25, r1
     e0c:	81 f0       	breq	.+32     	; 0xe2e <DIO_enuSetPortDirection+0x76>
     e0e:	13 c0       	rjmp	.+38     	; 0xe36 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     e10:	ea e3       	ldi	r30, 0x3A	; 58
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	80 83       	st	Z, r24
     e18:	0e c0       	rjmp	.+28     	; 0xe36 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     e1a:	e7 e3       	ldi	r30, 0x37	; 55
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	80 83       	st	Z, r24
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     e24:	e4 e3       	ldi	r30, 0x34	; 52
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	80 83       	st	Z, r24
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     e2e:	e1 e3       	ldi	r30, 0x31	; 49
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     e40:	89 81       	ldd	r24, Y+1	; 0x01
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <DIO_enuSetPortValue+0x6>
     e58:	00 d0       	rcall	.+0      	; 0xe5a <DIO_enuSetPortValue+0x8>
     e5a:	0f 92       	push	r0
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	8a 83       	std	Y+2, r24	; 0x02
     e62:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     e64:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	84 30       	cpi	r24, 0x04	; 4
     e6a:	a8 f5       	brcc	.+106    	; 0xed6 <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3d 83       	std	Y+5, r19	; 0x05
     e74:	2c 83       	std	Y+4, r18	; 0x04
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	d1 f0       	breq	.+52     	; 0xeb4 <DIO_enuSetPortValue+0x62>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_enuSetPortValue+0x42>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	61 f0       	breq	.+24     	; 0xeaa <DIO_enuSetPortValue+0x58>
     e92:	1e c0       	rjmp	.+60     	; 0xed0 <DIO_enuSetPortValue+0x7e>
     e94:	2c 81       	ldd	r18, Y+4	; 0x04
     e96:	3d 81       	ldd	r19, Y+5	; 0x05
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	81 f0       	breq	.+32     	; 0xebe <DIO_enuSetPortValue+0x6c>
     e9e:	8c 81       	ldd	r24, Y+4	; 0x04
     ea0:	9d 81       	ldd	r25, Y+5	; 0x05
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	81 f0       	breq	.+32     	; 0xec8 <DIO_enuSetPortValue+0x76>
     ea8:	13 c0       	rjmp	.+38     	; 0xed0 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
     eaa:	eb e3       	ldi	r30, 0x3B	; 59
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	80 83       	st	Z, r24
     eb2:	0e c0       	rjmp	.+28     	; 0xed0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
     eb4:	e8 e3       	ldi	r30, 0x38	; 56
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	80 83       	st	Z, r24
     ebc:	09 c0       	rjmp	.+18     	; 0xed0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
     ebe:	e5 e3       	ldi	r30, 0x35	; 53
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	80 83       	st	Z, r24
     ec6:	04 c0       	rjmp	.+8      	; 0xed0 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
     ec8:	e2 e3       	ldi	r30, 0x32	; 50
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     eda:	89 81       	ldd	r24, Y+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <DIO_enuTogPort+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <DIO_enuTogPort+0x8>
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
     ef8:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
     efa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	84 30       	cpi	r24, 0x04	; 4
     f00:	08 f0       	brcs	.+2      	; 0xf04 <DIO_enuTogPort+0x18>
     f02:	41 c0       	rjmp	.+130    	; 0xf86 <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	3c 83       	std	Y+4, r19	; 0x04
     f0c:	2b 83       	std	Y+3, r18	; 0x03
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	9c 81       	ldd	r25, Y+4	; 0x04
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	91 05       	cpc	r25, r1
     f16:	e9 f0       	breq	.+58     	; 0xf52 <DIO_enuTogPort+0x66>
     f18:	2b 81       	ldd	r18, Y+3	; 0x03
     f1a:	3c 81       	ldd	r19, Y+4	; 0x04
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	2c f4       	brge	.+10     	; 0xf2c <DIO_enuTogPort+0x40>
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	9c 81       	ldd	r25, Y+4	; 0x04
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	61 f0       	breq	.+24     	; 0xf42 <DIO_enuTogPort+0x56>
     f2a:	2a c0       	rjmp	.+84     	; 0xf80 <DIO_enuTogPort+0x94>
     f2c:	2b 81       	ldd	r18, Y+3	; 0x03
     f2e:	3c 81       	ldd	r19, Y+4	; 0x04
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	b1 f0       	breq	.+44     	; 0xf62 <DIO_enuTogPort+0x76>
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	9c 81       	ldd	r25, Y+4	; 0x04
     f3a:	83 30       	cpi	r24, 0x03	; 3
     f3c:	91 05       	cpc	r25, r1
     f3e:	c9 f0       	breq	.+50     	; 0xf72 <DIO_enuTogPort+0x86>
     f40:	1f c0       	rjmp	.+62     	; 0xf80 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
     f42:	ab e3       	ldi	r26, 0x3B	; 59
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	eb e3       	ldi	r30, 0x3B	; 59
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 95       	com	r24
     f4e:	8c 93       	st	X, r24
     f50:	17 c0       	rjmp	.+46     	; 0xf80 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
     f52:	a8 e3       	ldi	r26, 0x38	; 56
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e8 e3       	ldi	r30, 0x38	; 56
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	80 95       	com	r24
     f5e:	8c 93       	st	X, r24
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
     f62:	a5 e3       	ldi	r26, 0x35	; 53
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e3       	ldi	r30, 0x35	; 53
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	80 95       	com	r24
     f6e:	8c 93       	st	X, r24
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
     f72:	a2 e3       	ldi	r26, 0x32	; 50
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e2 e3       	ldi	r30, 0x32	; 50
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	80 95       	com	r24
     f7e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_enuGetPortValue+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_enuGetPortValue+0x8>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_enuGetPortValue+0xa>
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	7c 83       	std	Y+4, r23	; 0x04
     fac:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     fae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	09 f4       	brne	.+2      	; 0xfba <DIO_enuGetPortValue+0x20>
     fb8:	43 c0       	rjmp	.+134    	; 0x1040 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	84 30       	cpi	r24, 0x04	; 4
     fbe:	e8 f5       	brcc	.+122    	; 0x103a <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	3e 83       	std	Y+6, r19	; 0x06
     fc8:	2d 83       	std	Y+5, r18	; 0x05
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	81 30       	cpi	r24, 0x01	; 1
     fd0:	91 05       	cpc	r25, r1
     fd2:	e1 f0       	breq	.+56     	; 0x100c <DIO_enuGetPortValue+0x72>
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	22 30       	cpi	r18, 0x02	; 2
     fda:	31 05       	cpc	r19, r1
     fdc:	2c f4       	brge	.+10     	; 0xfe8 <DIO_enuGetPortValue+0x4e>
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	00 97       	sbiw	r24, 0x00	; 0
     fe4:	61 f0       	breq	.+24     	; 0xffe <DIO_enuGetPortValue+0x64>
     fe6:	26 c0       	rjmp	.+76     	; 0x1034 <DIO_enuGetPortValue+0x9a>
     fe8:	2d 81       	ldd	r18, Y+5	; 0x05
     fea:	3e 81       	ldd	r19, Y+6	; 0x06
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	31 05       	cpc	r19, r1
     ff0:	a1 f0       	breq	.+40     	; 0x101a <DIO_enuGetPortValue+0x80>
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	91 05       	cpc	r25, r1
     ffa:	b1 f0       	breq	.+44     	; 0x1028 <DIO_enuGetPortValue+0x8e>
     ffc:	1b c0       	rjmp	.+54     	; 0x1034 <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
     ffe:	e9 e3       	ldi	r30, 0x39	; 57
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	eb 81       	ldd	r30, Y+3	; 0x03
    1006:	fc 81       	ldd	r31, Y+4	; 0x04
    1008:	80 83       	st	Z, r24
    100a:	14 c0       	rjmp	.+40     	; 0x1034 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
    100c:	e6 e3       	ldi	r30, 0x36	; 54
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	eb 81       	ldd	r30, Y+3	; 0x03
    1014:	fc 81       	ldd	r31, Y+4	; 0x04
    1016:	80 83       	st	Z, r24
    1018:	0d c0       	rjmp	.+26     	; 0x1034 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
    101a:	e3 e3       	ldi	r30, 0x33	; 51
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	eb 81       	ldd	r30, Y+3	; 0x03
    1022:	fc 81       	ldd	r31, Y+4	; 0x04
    1024:	80 83       	st	Z, r24
    1026:	06 c0       	rjmp	.+12     	; 0x1034 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
    1028:	e0 e3       	ldi	r30, 0x30	; 48
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	eb 81       	ldd	r30, Y+3	; 0x03
    1030:	fc 81       	ldd	r31, Y+4	; 0x04
    1032:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1040:	82 e0       	ldi	r24, 0x02	; 2
    1042:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    1044:	89 81       	ldd	r24, Y+1	; 0x01
}
    1046:	26 96       	adiw	r28, 0x06	; 6
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	f8 94       	cli
    104c:	de bf       	out	0x3e, r29	; 62
    104e:	0f be       	out	0x3f, r0	; 63
    1050:	cd bf       	out	0x3d, r28	; 61
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <DIO_enuSetPinDirection+0x6>
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_enuSetPinDirection+0x8>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_enuSetPinDirection+0xa>
    1062:	cd b7       	in	r28, 0x3d	; 61
    1064:	de b7       	in	r29, 0x3e	; 62
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	6b 83       	std	Y+3, r22	; 0x03
    106a:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    106c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	84 30       	cpi	r24, 0x04	; 4
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_enuSetPinDirection+0x1e>
    1074:	d1 c0       	rjmp	.+418    	; 0x1218 <DIO_enuSetPinDirection+0x1c0>
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	88 30       	cpi	r24, 0x08	; 8
    107a:	08 f0       	brcs	.+2      	; 0x107e <DIO_enuSetPinDirection+0x26>
    107c:	cd c0       	rjmp	.+410    	; 0x1218 <DIO_enuSetPinDirection+0x1c0>
    107e:	8c 81       	ldd	r24, Y+4	; 0x04
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	08 f0       	brcs	.+2      	; 0x1086 <DIO_enuSetPinDirection+0x2e>
    1084:	c9 c0       	rjmp	.+402    	; 0x1218 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3e 83       	std	Y+6, r19	; 0x06
    108e:	2d 83       	std	Y+5, r18	; 0x05
    1090:	6d 81       	ldd	r22, Y+5	; 0x05
    1092:	7e 81       	ldd	r23, Y+6	; 0x06
    1094:	61 30       	cpi	r22, 0x01	; 1
    1096:	71 05       	cpc	r23, r1
    1098:	09 f4       	brne	.+2      	; 0x109c <DIO_enuSetPinDirection+0x44>
    109a:	41 c0       	rjmp	.+130    	; 0x111e <DIO_enuSetPinDirection+0xc6>
    109c:	8d 81       	ldd	r24, Y+5	; 0x05
    109e:	9e 81       	ldd	r25, Y+6	; 0x06
    10a0:	82 30       	cpi	r24, 0x02	; 2
    10a2:	91 05       	cpc	r25, r1
    10a4:	34 f4       	brge	.+12     	; 0x10b2 <DIO_enuSetPinDirection+0x5a>
    10a6:	2d 81       	ldd	r18, Y+5	; 0x05
    10a8:	3e 81       	ldd	r19, Y+6	; 0x06
    10aa:	21 15       	cp	r18, r1
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f0       	breq	.+28     	; 0x10cc <DIO_enuSetPinDirection+0x74>
    10b0:	b0 c0       	rjmp	.+352    	; 0x1212 <DIO_enuSetPinDirection+0x1ba>
    10b2:	6d 81       	ldd	r22, Y+5	; 0x05
    10b4:	7e 81       	ldd	r23, Y+6	; 0x06
    10b6:	62 30       	cpi	r22, 0x02	; 2
    10b8:	71 05       	cpc	r23, r1
    10ba:	09 f4       	brne	.+2      	; 0x10be <DIO_enuSetPinDirection+0x66>
    10bc:	59 c0       	rjmp	.+178    	; 0x1170 <DIO_enuSetPinDirection+0x118>
    10be:	8d 81       	ldd	r24, Y+5	; 0x05
    10c0:	9e 81       	ldd	r25, Y+6	; 0x06
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	09 f4       	brne	.+2      	; 0x10ca <DIO_enuSetPinDirection+0x72>
    10c8:	7c c0       	rjmp	.+248    	; 0x11c2 <DIO_enuSetPinDirection+0x16a>
    10ca:	a3 c0       	rjmp	.+326    	; 0x1212 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    10cc:	aa e3       	ldi	r26, 0x3A	; 58
    10ce:	b0 e0       	ldi	r27, 0x00	; 0
    10d0:	ea e3       	ldi	r30, 0x3A	; 58
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	48 2f       	mov	r20, r24
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_enuSetPinDirection+0x90>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	2a 95       	dec	r18
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_enuSetPinDirection+0x8c>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    10f2:	aa e3       	ldi	r26, 0x3A	; 58
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ea e3       	ldi	r30, 0x3A	; 58
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	88 2f       	mov	r24, r24
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	b9 01       	movw	r22, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_enuSetPinDirection+0xba>
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	8a 95       	dec	r24
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_enuSetPinDirection+0xb6>
    1116:	cb 01       	movw	r24, r22
    1118:	84 2b       	or	r24, r20
    111a:	8c 93       	st	X, r24
    111c:	7a c0       	rjmp	.+244    	; 0x1212 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    111e:	a7 e3       	ldi	r26, 0x37	; 55
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e7 e3       	ldi	r30, 0x37	; 55
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_enuSetPinDirection+0xe2>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	2a 95       	dec	r18
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_enuSetPinDirection+0xde>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    1144:	a7 e3       	ldi	r26, 0x37	; 55
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e7 e3       	ldi	r30, 0x37	; 55
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	b9 01       	movw	r22, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_enuSetPinDirection+0x10c>
    1160:	66 0f       	add	r22, r22
    1162:	77 1f       	adc	r23, r23
    1164:	8a 95       	dec	r24
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_enuSetPinDirection+0x108>
    1168:	cb 01       	movw	r24, r22
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	51 c0       	rjmp	.+162    	; 0x1212 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1170:	a4 e3       	ldi	r26, 0x34	; 52
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	e4 e3       	ldi	r30, 0x34	; 52
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 c0       	rjmp	.+4      	; 0x118c <DIO_enuSetPinDirection+0x134>
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	2a 95       	dec	r18
    118e:	e2 f7       	brpl	.-8      	; 0x1188 <DIO_enuSetPinDirection+0x130>
    1190:	80 95       	com	r24
    1192:	84 23       	and	r24, r20
    1194:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    1196:	a4 e3       	ldi	r26, 0x34	; 52
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e4 e3       	ldi	r30, 0x34	; 52
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	88 2f       	mov	r24, r24
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	b9 01       	movw	r22, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_enuSetPinDirection+0x15e>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	8a 95       	dec	r24
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_enuSetPinDirection+0x15a>
    11ba:	cb 01       	movw	r24, r22
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	28 c0       	rjmp	.+80     	; 0x1212 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    11c2:	a1 e3       	ldi	r26, 0x31	; 49
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_enuSetPinDirection+0x186>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	2a 95       	dec	r18
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_enuSetPinDirection+0x182>
    11e2:	80 95       	com	r24
    11e4:	84 23       	and	r24, r20
    11e6:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	b9 01       	movw	r22, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_enuSetPinDirection+0x1b0>
    1204:	66 0f       	add	r22, r22
    1206:	77 1f       	adc	r23, r23
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_enuSetPinDirection+0x1ac>
    120c:	cb 01       	movw	r24, r22
    120e:	84 2b       	or	r24, r20
    1210:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	89 83       	std	Y+1, r24	; 0x01
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1218:	83 e0       	ldi	r24, 0x03	; 3
    121a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    121c:	89 81       	ldd	r24, Y+1	; 0x01
}
    121e:	26 96       	adiw	r28, 0x06	; 6
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    1230:	df 93       	push	r29
    1232:	cf 93       	push	r28
    1234:	00 d0       	rcall	.+0      	; 0x1236 <DIO_enuSetPinValue+0x6>
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_enuSetPinValue+0x8>
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_enuSetPinValue+0xa>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	8a 83       	std	Y+2, r24	; 0x02
    1240:	6b 83       	std	Y+3, r22	; 0x03
    1242:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1244:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	84 30       	cpi	r24, 0x04	; 4
    124a:	08 f0       	brcs	.+2      	; 0x124e <DIO_enuSetPinValue+0x1e>
    124c:	d1 c0       	rjmp	.+418    	; 0x13f0 <DIO_enuSetPinValue+0x1c0>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	88 30       	cpi	r24, 0x08	; 8
    1252:	08 f0       	brcs	.+2      	; 0x1256 <DIO_enuSetPinValue+0x26>
    1254:	cd c0       	rjmp	.+410    	; 0x13f0 <DIO_enuSetPinValue+0x1c0>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	82 30       	cpi	r24, 0x02	; 2
    125a:	08 f0       	brcs	.+2      	; 0x125e <DIO_enuSetPinValue+0x2e>
    125c:	c9 c0       	rjmp	.+402    	; 0x13f0 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3e 83       	std	Y+6, r19	; 0x06
    1266:	2d 83       	std	Y+5, r18	; 0x05
    1268:	6d 81       	ldd	r22, Y+5	; 0x05
    126a:	7e 81       	ldd	r23, Y+6	; 0x06
    126c:	61 30       	cpi	r22, 0x01	; 1
    126e:	71 05       	cpc	r23, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <DIO_enuSetPinValue+0x44>
    1272:	41 c0       	rjmp	.+130    	; 0x12f6 <DIO_enuSetPinValue+0xc6>
    1274:	8d 81       	ldd	r24, Y+5	; 0x05
    1276:	9e 81       	ldd	r25, Y+6	; 0x06
    1278:	82 30       	cpi	r24, 0x02	; 2
    127a:	91 05       	cpc	r25, r1
    127c:	34 f4       	brge	.+12     	; 0x128a <DIO_enuSetPinValue+0x5a>
    127e:	2d 81       	ldd	r18, Y+5	; 0x05
    1280:	3e 81       	ldd	r19, Y+6	; 0x06
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	71 f0       	breq	.+28     	; 0x12a4 <DIO_enuSetPinValue+0x74>
    1288:	b0 c0       	rjmp	.+352    	; 0x13ea <DIO_enuSetPinValue+0x1ba>
    128a:	6d 81       	ldd	r22, Y+5	; 0x05
    128c:	7e 81       	ldd	r23, Y+6	; 0x06
    128e:	62 30       	cpi	r22, 0x02	; 2
    1290:	71 05       	cpc	r23, r1
    1292:	09 f4       	brne	.+2      	; 0x1296 <DIO_enuSetPinValue+0x66>
    1294:	59 c0       	rjmp	.+178    	; 0x1348 <DIO_enuSetPinValue+0x118>
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	9e 81       	ldd	r25, Y+6	; 0x06
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <DIO_enuSetPinValue+0x72>
    12a0:	7c c0       	rjmp	.+248    	; 0x139a <DIO_enuSetPinValue+0x16a>
    12a2:	a3 c0       	rjmp	.+326    	; 0x13ea <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    12a4:	ab e3       	ldi	r26, 0x3B	; 59
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	eb e3       	ldi	r30, 0x3B	; 59
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_enuSetPinValue+0x90>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	2a 95       	dec	r18
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_enuSetPinValue+0x8c>
    12c4:	80 95       	com	r24
    12c6:	84 23       	and	r24, r20
    12c8:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	b9 01       	movw	r22, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_enuSetPinValue+0xba>
    12e6:	66 0f       	add	r22, r22
    12e8:	77 1f       	adc	r23, r23
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_enuSetPinValue+0xb6>
    12ee:	cb 01       	movw	r24, r22
    12f0:	84 2b       	or	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	7a c0       	rjmp	.+244    	; 0x13ea <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    12f6:	a8 e3       	ldi	r26, 0x38	; 56
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e8 e3       	ldi	r30, 0x38	; 56
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_enuSetPinValue+0xe2>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	2a 95       	dec	r18
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_enuSetPinValue+0xde>
    1316:	80 95       	com	r24
    1318:	84 23       	and	r24, r20
    131a:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    131c:	a8 e3       	ldi	r26, 0x38	; 56
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e8 e3       	ldi	r30, 0x38	; 56
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	88 2f       	mov	r24, r24
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	b9 01       	movw	r22, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_enuSetPinValue+0x10c>
    1338:	66 0f       	add	r22, r22
    133a:	77 1f       	adc	r23, r23
    133c:	8a 95       	dec	r24
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_enuSetPinValue+0x108>
    1340:	cb 01       	movw	r24, r22
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	51 c0       	rjmp	.+162    	; 0x13ea <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <DIO_enuSetPinValue+0x134>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	2a 95       	dec	r18
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <DIO_enuSetPinValue+0x130>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    136e:	a5 e3       	ldi	r26, 0x35	; 53
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e5 e3       	ldi	r30, 0x35	; 53
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	b9 01       	movw	r22, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_enuSetPinValue+0x15e>
    138a:	66 0f       	add	r22, r22
    138c:	77 1f       	adc	r23, r23
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_enuSetPinValue+0x15a>
    1392:	cb 01       	movw	r24, r22
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	28 c0       	rjmp	.+80     	; 0x13ea <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    139a:	a2 e3       	ldi	r26, 0x32	; 50
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e2 e3       	ldi	r30, 0x32	; 50
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <DIO_enuSetPinValue+0x186>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	2a 95       	dec	r18
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <DIO_enuSetPinValue+0x182>
    13ba:	80 95       	com	r24
    13bc:	84 23       	and	r24, r20
    13be:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8c 81       	ldd	r24, Y+4	; 0x04
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	b9 01       	movw	r22, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_enuSetPinValue+0x1b0>
    13dc:	66 0f       	add	r22, r22
    13de:	77 1f       	adc	r23, r23
    13e0:	8a 95       	dec	r24
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_enuSetPinValue+0x1ac>
    13e4:	cb 01       	movw	r24, r22
    13e6:	84 2b       	or	r24, r20
    13e8:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    13f0:	83 e0       	ldi	r24, 0x03	; 3
    13f2:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    13f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13f6:	26 96       	adiw	r28, 0x06	; 6
    13f8:	0f b6       	in	r0, 0x3f	; 63
    13fa:	f8 94       	cli
    13fc:	de bf       	out	0x3e, r29	; 62
    13fe:	0f be       	out	0x3f, r0	; 63
    1400:	cd bf       	out	0x3d, r28	; 61
    1402:	cf 91       	pop	r28
    1404:	df 91       	pop	r29
    1406:	08 95       	ret

00001408 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1408:	df 93       	push	r29
    140a:	cf 93       	push	r28
    140c:	00 d0       	rcall	.+0      	; 0x140e <DIO_enuTogPin+0x6>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <DIO_enuTogPin+0x8>
    1410:	0f 92       	push	r0
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	8a 83       	std	Y+2, r24	; 0x02
    1418:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	84 30       	cpi	r24, 0x04	; 4
    1420:	08 f0       	brcs	.+2      	; 0x1424 <DIO_enuTogPin+0x1c>
    1422:	75 c0       	rjmp	.+234    	; 0x150e <DIO_enuTogPin+0x106>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 30       	cpi	r24, 0x08	; 8
    1428:	08 f0       	brcs	.+2      	; 0x142c <DIO_enuTogPin+0x24>
    142a:	71 c0       	rjmp	.+226    	; 0x150e <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3d 83       	std	Y+5, r19	; 0x05
    1434:	2c 83       	std	Y+4, r18	; 0x04
    1436:	8c 81       	ldd	r24, Y+4	; 0x04
    1438:	9d 81       	ldd	r25, Y+5	; 0x05
    143a:	81 30       	cpi	r24, 0x01	; 1
    143c:	91 05       	cpc	r25, r1
    143e:	49 f1       	breq	.+82     	; 0x1492 <DIO_enuTogPin+0x8a>
    1440:	2c 81       	ldd	r18, Y+4	; 0x04
    1442:	3d 81       	ldd	r19, Y+5	; 0x05
    1444:	22 30       	cpi	r18, 0x02	; 2
    1446:	31 05       	cpc	r19, r1
    1448:	2c f4       	brge	.+10     	; 0x1454 <DIO_enuTogPin+0x4c>
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	61 f0       	breq	.+24     	; 0x146a <DIO_enuTogPin+0x62>
    1452:	5a c0       	rjmp	.+180    	; 0x1508 <DIO_enuTogPin+0x100>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	22 30       	cpi	r18, 0x02	; 2
    145a:	31 05       	cpc	r19, r1
    145c:	71 f1       	breq	.+92     	; 0x14ba <DIO_enuTogPin+0xb2>
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	83 30       	cpi	r24, 0x03	; 3
    1464:	91 05       	cpc	r25, r1
    1466:	e9 f1       	breq	.+122    	; 0x14e2 <DIO_enuTogPin+0xda>
    1468:	4f c0       	rjmp	.+158    	; 0x1508 <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    146a:	aa e3       	ldi	r26, 0x3A	; 58
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ea e3       	ldi	r30, 0x3A	; 58
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_enuTogPin+0x80>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_enuTogPin+0x7c>
    148c:	84 27       	eor	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	3b c0       	rjmp	.+118    	; 0x1508 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_enuTogPin+0xa8>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_enuTogPin+0xa4>
    14b4:	84 27       	eor	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	27 c0       	rjmp	.+78     	; 0x1508 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14ba:	a4 e3       	ldi	r26, 0x34	; 52
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e4 e3       	ldi	r30, 0x34	; 52
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_enuTogPin+0xd0>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_enuTogPin+0xcc>
    14dc:	84 27       	eor	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	13 c0       	rjmp	.+38     	; 0x1508 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14e2:	a1 e3       	ldi	r26, 0x31	; 49
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e1 e3       	ldi	r30, 0x31	; 49
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_enuTogPin+0xf8>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_enuTogPin+0xf4>
    1504:	84 27       	eor	r24, r20
    1506:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	89 83       	std	Y+1, r24	; 0x01
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    150e:	83 e0       	ldi	r24, 0x03	; 3
    1510:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    1512:	89 81       	ldd	r24, Y+1	; 0x01
}
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	27 97       	sbiw	r28, 0x07	; 7
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	8a 83       	std	Y+2, r24	; 0x02
    153a:	6b 83       	std	Y+3, r22	; 0x03
    153c:	5d 83       	std	Y+5, r21	; 0x05
    153e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    1540:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	9d 81       	ldd	r25, Y+5	; 0x05
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	09 f4       	brne	.+2      	; 0x154c <DIO_enuGetPinValue+0x28>
    154a:	7e c0       	rjmp	.+252    	; 0x1648 <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	08 f0       	brcs	.+2      	; 0x1554 <DIO_enuGetPinValue+0x30>
    1552:	77 c0       	rjmp	.+238    	; 0x1642 <DIO_enuGetPinValue+0x11e>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	88 30       	cpi	r24, 0x08	; 8
    1558:	08 f0       	brcs	.+2      	; 0x155c <DIO_enuGetPinValue+0x38>
    155a:	73 c0       	rjmp	.+230    	; 0x1642 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	3f 83       	std	Y+7, r19	; 0x07
    1564:	2e 83       	std	Y+6, r18	; 0x06
    1566:	4e 81       	ldd	r20, Y+6	; 0x06
    1568:	5f 81       	ldd	r21, Y+7	; 0x07
    156a:	41 30       	cpi	r20, 0x01	; 1
    156c:	51 05       	cpc	r21, r1
    156e:	59 f1       	breq	.+86     	; 0x15c6 <DIO_enuGetPinValue+0xa2>
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	91 05       	cpc	r25, r1
    1578:	34 f4       	brge	.+12     	; 0x1586 <DIO_enuGetPinValue+0x62>
    157a:	2e 81       	ldd	r18, Y+6	; 0x06
    157c:	3f 81       	ldd	r19, Y+7	; 0x07
    157e:	21 15       	cp	r18, r1
    1580:	31 05       	cpc	r19, r1
    1582:	69 f0       	breq	.+26     	; 0x159e <DIO_enuGetPinValue+0x7a>
    1584:	5b c0       	rjmp	.+182    	; 0x163c <DIO_enuGetPinValue+0x118>
    1586:	4e 81       	ldd	r20, Y+6	; 0x06
    1588:	5f 81       	ldd	r21, Y+7	; 0x07
    158a:	42 30       	cpi	r20, 0x02	; 2
    158c:	51 05       	cpc	r21, r1
    158e:	79 f1       	breq	.+94     	; 0x15ee <DIO_enuGetPinValue+0xca>
    1590:	8e 81       	ldd	r24, Y+6	; 0x06
    1592:	9f 81       	ldd	r25, Y+7	; 0x07
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	91 05       	cpc	r25, r1
    1598:	09 f4       	brne	.+2      	; 0x159c <DIO_enuGetPinValue+0x78>
    159a:	3d c0       	rjmp	.+122    	; 0x1616 <DIO_enuGetPinValue+0xf2>
    159c:	4f c0       	rjmp	.+158    	; 0x163c <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    159e:	e9 e3       	ldi	r30, 0x39	; 57
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <DIO_enuGetPinValue+0x92>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <DIO_enuGetPinValue+0x8e>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	ec 81       	ldd	r30, Y+4	; 0x04
    15c0:	fd 81       	ldd	r31, Y+5	; 0x05
    15c2:	80 83       	st	Z, r24
    15c4:	3b c0       	rjmp	.+118    	; 0x163c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    15c6:	e6 e3       	ldi	r30, 0x36	; 54
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	a9 01       	movw	r20, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <DIO_enuGetPinValue+0xba>
    15da:	55 95       	asr	r21
    15dc:	47 95       	ror	r20
    15de:	8a 95       	dec	r24
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <DIO_enuGetPinValue+0xb6>
    15e2:	ca 01       	movw	r24, r20
    15e4:	81 70       	andi	r24, 0x01	; 1
    15e6:	ec 81       	ldd	r30, Y+4	; 0x04
    15e8:	fd 81       	ldd	r31, Y+5	; 0x05
    15ea:	80 83       	st	Z, r24
    15ec:	27 c0       	rjmp	.+78     	; 0x163c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    15ee:	e3 e3       	ldi	r30, 0x33	; 51
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	a9 01       	movw	r20, r18
    1600:	02 c0       	rjmp	.+4      	; 0x1606 <DIO_enuGetPinValue+0xe2>
    1602:	55 95       	asr	r21
    1604:	47 95       	ror	r20
    1606:	8a 95       	dec	r24
    1608:	e2 f7       	brpl	.-8      	; 0x1602 <DIO_enuGetPinValue+0xde>
    160a:	ca 01       	movw	r24, r20
    160c:	81 70       	andi	r24, 0x01	; 1
    160e:	ec 81       	ldd	r30, Y+4	; 0x04
    1610:	fd 81       	ldd	r31, Y+5	; 0x05
    1612:	80 83       	st	Z, r24
    1614:	13 c0       	rjmp	.+38     	; 0x163c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    1616:	e0 e3       	ldi	r30, 0x30	; 48
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <DIO_enuGetPinValue+0x10a>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <DIO_enuGetPinValue+0x106>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	ec 81       	ldd	r30, Y+4	; 0x04
    1638:	fd 81       	ldd	r31, Y+5	; 0x05
    163a:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	05 c0       	rjmp	.+10     	; 0x164c <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    1642:	83 e0       	ldi	r24, 0x03	; 3
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	02 c0       	rjmp	.+4      	; 0x164c <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    164c:	89 81       	ldd	r24, Y+1	; 0x01
}
    164e:	27 96       	adiw	r28, 0x07	; 7
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <USART_voidInit>:
static void (* USART_pvNotificationFunc)(void)= NULL;
static u8 USART_u8State= IDLE ;


void USART_voidInit (void)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <USART_voidInit+0x6>
    1666:	0f 92       	push	r0
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0 ;
    166c:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
    166e:	83 e3       	ldi	r24, 0x33	; 51
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9a 83       	std	Y+2, r25	; 0x02
    1674:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(Local_u16UBRR >> 8) ;
    1676:	e0 e4       	ldi	r30, 0x40	; 64
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	89 2f       	mov	r24, r25
    1680:	99 27       	eor	r25, r25
    1682:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR ;
    1684:	e9 e2       	ldi	r30, 0x29	; 41
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	80 83       	st	Z, r24

	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
    168c:	ab e2       	ldi	r26, 0x2B	; 43
    168e:	b0 e0       	ldi	r27, 0x00	; 0
    1690:	eb e2       	ldi	r30, 0x2B	; 43
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	8d 7f       	andi	r24, 0xFD	; 253
    1698:	8c 93       	st	X, r24
		#error "Wrong USART_MODE or USART_SYSTEM_SPEED config"
	#endif


	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
    169a:	ab e2       	ldi	r26, 0x2B	; 43
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	eb e2       	ldi	r30, 0x2B	; 43
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8e 7f       	andi	r24, 0xFE	; 254
    16a6:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_MPCM config"
	#endif

	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	8f 7b       	andi	r24, 0xBF	; 191
    16ac:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_MODE config"
	#endif

	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	8f 7e       	andi	r24, 0xEF	; 239
    16b2:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	8f 7d       	andi	r24, 0xDF	; 223
    16b8:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_PARITY_MODE config"
	#endif

	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	87 7f       	andi	r24, 0xF7	; 247
    16be:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	82 60       	ori	r24, 0x02	; 2
    16c4:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	84 60       	ori	r24, 0x04	; 4
    16ca:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
    16cc:	aa e2       	ldi	r26, 0x2A	; 42
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	ea e2       	ldi	r30, 0x2A	; 42
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	8b 7f       	andi	r24, 0xFB	; 251
    16d8:	8c 93       	st	X, r24
		#else
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	80 68       	ori	r24, 0x80	; 128
    16de:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC = Local_u8UCSRC ;
    16e0:	e0 e4       	ldi	r30, 0x40	; 64
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	80 83       	st	Z, r24

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    16e8:	aa e2       	ldi	r26, 0x2A	; 42
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e2       	ldi	r30, 0x2A	; 42
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 77       	andi	r24, 0x7F	; 127
    16f4:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    16f6:	aa e2       	ldi	r26, 0x2A	; 42
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ea e2       	ldi	r30, 0x2A	; 42
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 7b       	andi	r24, 0xBF	; 191
    1702:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
    1704:	aa e2       	ldi	r26, 0x2A	; 42
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ea e2       	ldi	r30, 0x2A	; 42
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	8f 7d       	andi	r24, 0xDF	; 223
    1710:	8c 93       	st	X, r24
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
    1712:	aa e2       	ldi	r26, 0x2A	; 42
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ea e2       	ldi	r30, 0x2A	; 42
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	80 61       	ori	r24, 0x10	; 16
    171e:	8c 93       	st	X, r24
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
    1720:	aa e2       	ldi	r26, 0x2A	; 42
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ea e2       	ldi	r30, 0x2A	; 42
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	88 60       	ori	r24, 0x08	; 8
    172c:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <USART_u8SendData>:

u8 USART_u8SendData (u8 Copy_u8Data)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	00 d0       	rcall	.+0      	; 0x1740 <USART_u8SendData+0x6>
    1740:	00 d0       	rcall	.+0      	; 0x1742 <USART_u8SendData+0x8>
    1742:	00 d0       	rcall	.+0      	; 0x1744 <USART_u8SendData+0xa>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    174e:	19 82       	std	Y+1, r1	; 0x01
    1750:	1a 82       	std	Y+2, r1	; 0x02
    1752:	1b 82       	std	Y+3, r1	; 0x03
    1754:	1c 82       	std	Y+4, r1	; 0x04
	if (USART_u8State == IDLE)
    1756:	80 91 74 00 	lds	r24, 0x0074
    175a:	88 23       	and	r24, r24
    175c:	09 f0       	breq	.+2      	; 0x1760 <USART_u8SendData+0x26>
    175e:	44 c0       	rjmp	.+136    	; 0x17e8 <USART_u8SendData+0xae>
	{
		USART_u8State = BUSY ;
    1760:	82 e0       	ldi	r24, 0x02	; 2
    1762:	80 93 74 00 	sts	0x0074, r24
    1766:	0b c0       	rjmp	.+22     	; 0x177e <USART_u8SendData+0x44>
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++ ;
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	9a 81       	ldd	r25, Y+2	; 0x02
    176c:	ab 81       	ldd	r26, Y+3	; 0x03
    176e:	bc 81       	ldd	r27, Y+4	; 0x04
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	a1 1d       	adc	r26, r1
    1774:	b1 1d       	adc	r27, r1
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	9a 83       	std	Y+2, r25	; 0x02
    177a:	ab 83       	std	Y+3, r26	; 0x03
    177c:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (USART_u8State == IDLE)
	{
		USART_u8State = BUSY ;
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    177e:	eb e2       	ldi	r30, 0x2B	; 43
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	80 72       	andi	r24, 0x20	; 32
    178a:	90 70       	andi	r25, 0x00	; 0
    178c:	95 95       	asr	r25
    178e:	87 95       	ror	r24
    1790:	95 95       	asr	r25
    1792:	87 95       	ror	r24
    1794:	95 95       	asr	r25
    1796:	87 95       	ror	r24
    1798:	95 95       	asr	r25
    179a:	87 95       	ror	r24
    179c:	95 95       	asr	r25
    179e:	87 95       	ror	r24
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	61 f4       	brne	.+24     	; 0x17bc <USART_u8SendData+0x82>
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	ab 81       	ldd	r26, Y+3	; 0x03
    17aa:	bc 81       	ldd	r27, Y+4	; 0x04
    17ac:	80 31       	cpi	r24, 0x10	; 16
    17ae:	27 e2       	ldi	r18, 0x27	; 39
    17b0:	92 07       	cpc	r25, r18
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	a2 07       	cpc	r26, r18
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	b2 07       	cpc	r27, r18
    17ba:	b1 f6       	brne	.-84     	; 0x1768 <USART_u8SendData+0x2e>
		{
			Local_u32TimeoutCounter++ ;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	9a 81       	ldd	r25, Y+2	; 0x02
    17c0:	ab 81       	ldd	r26, Y+3	; 0x03
    17c2:	bc 81       	ldd	r27, Y+4	; 0x04
    17c4:	80 31       	cpi	r24, 0x10	; 16
    17c6:	27 e2       	ldi	r18, 0x27	; 39
    17c8:	92 07       	cpc	r25, r18
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	a2 07       	cpc	r26, r18
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	b2 07       	cpc	r27, r18
    17d2:	19 f4       	brne	.+6      	; 0x17da <USART_u8SendData+0xa0>
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
    17d4:	83 e0       	ldi	r24, 0x03	; 3
    17d6:	8d 83       	std	Y+5, r24	; 0x05
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <USART_u8SendData+0xa8>
		else
			UDR = Copy_u8Data ;
    17da:	ec e2       	ldi	r30, 0x2C	; 44
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8e 81       	ldd	r24, Y+6	; 0x06
    17e0:	80 83       	st	Z, r24

		USART_u8State = IDLE ;
    17e2:	10 92 74 00 	sts	0x0074, r1
    17e6:	01 c0       	rjmp	.+2      	; 0x17ea <USART_u8SendData+0xb0>
	}
	else
	{
		Local_u8ErrorState = ES_NOK ;
    17e8:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState ;
    17ea:	8d 81       	ldd	r24, Y+5	; 0x05
}
    17ec:	26 96       	adiw	r28, 0x06	; 6
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <USART_u8RecevieData>:

u8 USART_u8RecevieData (u8 *Copy_u8ReceviedData)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	27 97       	sbiw	r28, 0x07	; 7
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	9f 83       	std	Y+7, r25	; 0x07
    1814:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState ;
	u32 Local_u32TimeoutCounter = 0 ;
    1816:	19 82       	std	Y+1, r1	; 0x01
    1818:	1a 82       	std	Y+2, r1	; 0x02
    181a:	1b 82       	std	Y+3, r1	; 0x03
    181c:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_u8ReceviedData != NULL)
    181e:	8e 81       	ldd	r24, Y+6	; 0x06
    1820:	9f 81       	ldd	r25, Y+7	; 0x07
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	09 f4       	brne	.+2      	; 0x1828 <USART_u8RecevieData+0x2a>
    1826:	45 c0       	rjmp	.+138    	; 0x18b2 <USART_u8RecevieData+0xb4>
	{
		if (USART_u8State == IDLE)
    1828:	80 91 74 00 	lds	r24, 0x0074
    182c:	88 23       	and	r24, r24
    182e:	09 f0       	breq	.+2      	; 0x1832 <USART_u8RecevieData+0x34>
    1830:	3e c0       	rjmp	.+124    	; 0x18ae <USART_u8RecevieData+0xb0>
		{
			USART_u8State = BUSY ;
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	80 93 74 00 	sts	0x0074, r24
    1838:	0b c0       	rjmp	.+22     	; 0x1850 <USART_u8RecevieData+0x52>

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
				Local_u32TimeoutCounter++ ;
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	9a 81       	ldd	r25, Y+2	; 0x02
    183e:	ab 81       	ldd	r26, Y+3	; 0x03
    1840:	bc 81       	ldd	r27, Y+4	; 0x04
    1842:	01 96       	adiw	r24, 0x01	; 1
    1844:	a1 1d       	adc	r26, r1
    1846:	b1 1d       	adc	r27, r1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	ab 83       	std	Y+3, r26	; 0x03
    184e:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    1850:	eb e2       	ldi	r30, 0x2B	; 43
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	88 1f       	adc	r24, r24
    1858:	88 27       	eor	r24, r24
    185a:	88 1f       	adc	r24, r24
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	90 70       	andi	r25, 0x00	; 0
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f4       	brne	.+24     	; 0x187e <USART_u8RecevieData+0x80>
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	ab 81       	ldd	r26, Y+3	; 0x03
    186c:	bc 81       	ldd	r27, Y+4	; 0x04
    186e:	80 31       	cpi	r24, 0x10	; 16
    1870:	27 e2       	ldi	r18, 0x27	; 39
    1872:	92 07       	cpc	r25, r18
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	a2 07       	cpc	r26, r18
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	b2 07       	cpc	r27, r18
    187c:	f1 f6       	brne	.-68     	; 0x183a <USART_u8RecevieData+0x3c>
				Local_u32TimeoutCounter++ ;

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	9a 81       	ldd	r25, Y+2	; 0x02
    1882:	ab 81       	ldd	r26, Y+3	; 0x03
    1884:	bc 81       	ldd	r27, Y+4	; 0x04
    1886:	80 31       	cpi	r24, 0x10	; 16
    1888:	27 e2       	ldi	r18, 0x27	; 39
    188a:	92 07       	cpc	r25, r18
    188c:	20 e0       	ldi	r18, 0x00	; 0
    188e:	a2 07       	cpc	r26, r18
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	b2 07       	cpc	r27, r18
    1894:	19 f4       	brne	.+6      	; 0x189c <USART_u8RecevieData+0x9e>
				Local_u8ErrorState = ES_OUT_OF_RANGE ;
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	8d 83       	std	Y+5, r24	; 0x05
    189a:	06 c0       	rjmp	.+12     	; 0x18a8 <USART_u8RecevieData+0xaa>
			else
				*Copy_u8ReceviedData = UDR ;
    189c:	ec e2       	ldi	r30, 0x2C	; 44
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	ee 81       	ldd	r30, Y+6	; 0x06
    18a4:	ff 81       	ldd	r31, Y+7	; 0x07
    18a6:	80 83       	st	Z, r24

			USART_u8State = IDLE ;
    18a8:	10 92 74 00 	sts	0x0074, r1
    18ac:	04 c0       	rjmp	.+8      	; 0x18b6 <USART_u8RecevieData+0xb8>
		}
		else
			Local_u8ErrorState = ES_NOK ;
    18ae:	1d 82       	std	Y+5, r1	; 0x05
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <USART_u8RecevieData+0xb8>
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    18b2:	82 e0       	ldi	r24, 0x02	; 2
    18b4:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    18b6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18b8:	27 96       	adiw	r28, 0x07	; 7
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	f8 94       	cli
    18be:	de bf       	out	0x3e, r29	; 62
    18c0:	0f be       	out	0x3f, r0	; 63
    18c2:	cd bf       	out	0x3d, r28	; 61
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <USART_u8SendStringSynch>:

u8 USART_u8SendStringSynch (const u8 * Copy_pchString)
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	28 97       	sbiw	r28, 0x08	; 8
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	f8 94       	cli
    18d8:	de bf       	out	0x3e, r29	; 62
    18da:	0f be       	out	0x3f, r0	; 63
    18dc:	cd bf       	out	0x3d, r28	; 61
    18de:	9f 83       	std	Y+7, r25	; 0x07
    18e0:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	1a 82       	std	Y+2, r1	; 0x02
    18ea:	1b 82       	std	Y+3, r1	; 0x03
    18ec:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    18ee:	8e 81       	ldd	r24, Y+6	; 0x06
    18f0:	9f 81       	ldd	r25, Y+7	; 0x07
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	41 f1       	breq	.+80     	; 0x1946 <USART_u8SendStringSynch+0x7c>
    18f6:	1c c0       	rjmp	.+56     	; 0x1930 <USART_u8SendStringSynch+0x66>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    18f8:	29 81       	ldd	r18, Y+1	; 0x01
    18fa:	3a 81       	ldd	r19, Y+2	; 0x02
    18fc:	8e 81       	ldd	r24, Y+6	; 0x06
    18fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1900:	fc 01       	movw	r30, r24
    1902:	e2 0f       	add	r30, r18
    1904:	f3 1f       	adc	r31, r19
    1906:	80 81       	ld	r24, Z
    1908:	0e 94 9d 0b 	call	0x173a	; 0x173a <USART_u8SendData>
    190c:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	ab 81       	ldd	r26, Y+3	; 0x03
    1914:	bc 81       	ldd	r27, Y+4	; 0x04
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	a1 1d       	adc	r26, r1
    191a:	b1 1d       	adc	r27, r1
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	ab 83       	std	Y+3, r26	; 0x03
    1922:	bc 83       	std	Y+4, r27	; 0x04
			if (Local_u8ErrorState != ES_OK)
    1924:	8d 81       	ldd	r24, Y+5	; 0x05
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	19 f0       	breq	.+6      	; 0x1930 <USART_u8SendStringSynch+0x66>
				return Local_u8ErrorState ;
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	88 87       	std	Y+8, r24	; 0x08
    192e:	0f c0       	rjmp	.+30     	; 0x194e <USART_u8SendStringSynch+0x84>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    1930:	29 81       	ldd	r18, Y+1	; 0x01
    1932:	3a 81       	ldd	r19, Y+2	; 0x02
    1934:	8e 81       	ldd	r24, Y+6	; 0x06
    1936:	9f 81       	ldd	r25, Y+7	; 0x07
    1938:	fc 01       	movw	r30, r24
    193a:	e2 0f       	add	r30, r18
    193c:	f3 1f       	adc	r31, r19
    193e:	80 81       	ld	r24, Z
    1940:	88 23       	and	r24, r24
    1942:	d1 f6       	brne	.-76     	; 0x18f8 <USART_u8SendStringSynch+0x2e>
    1944:	02 c0       	rjmp	.+4      	; 0x194a <USART_u8SendStringSynch+0x80>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    194a:	8d 81       	ldd	r24, Y+5	; 0x05
    194c:	88 87       	std	Y+8, r24	; 0x08
    194e:	88 85       	ldd	r24, Y+8	; 0x08
}
    1950:	28 96       	adiw	r28, 0x08	; 8
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <USART_u8SendStringAsynch>:

u8   USART_u8SendStringAsynch (const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <USART_u8SendStringAsynch+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <USART_u8SendStringAsynch+0x8>
    196a:	0f 92       	push	r0
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	9b 83       	std	Y+3, r25	; 0x03
    1972:	8a 83       	std	Y+2, r24	; 0x02
    1974:	7d 83       	std	Y+5, r23	; 0x05
    1976:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    197c:	80 91 74 00 	lds	r24, 0x0074
    1980:	88 23       	and	r24, r24
    1982:	99 f5       	brne	.+102    	; 0x19ea <USART_u8SendStringAsynch+0x88>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	61 f1       	breq	.+88     	; 0x19e4 <USART_u8SendStringAsynch+0x82>
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9d 81       	ldd	r25, Y+5	; 0x05
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	41 f1       	breq	.+80     	; 0x19e4 <USART_u8SendStringAsynch+0x82>
		{
			USART_u8State = BUSY ;
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	80 93 74 00 	sts	0x0074, r24

			USART_pu8SendData = Copy_pchString ;
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	9b 81       	ldd	r25, Y+3	; 0x03
    199e:	90 93 6f 00 	sts	0x006F, r25
    19a2:	80 93 6e 00 	sts	0x006E, r24
			USART_pvNotificationFunc = NotificationFunc ;
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	90 93 73 00 	sts	0x0073, r25
    19ae:	80 93 72 00 	sts	0x0072, r24
			USART_u8Index = 0 ;
    19b2:	10 92 76 00 	sts	0x0076, r1
			UDR = USART_pu8SendData[USART_u8Index] ;
    19b6:	ac e2       	ldi	r26, 0x2C	; 44
    19b8:	b0 e0       	ldi	r27, 0x00	; 0
    19ba:	20 91 6e 00 	lds	r18, 0x006E
    19be:	30 91 6f 00 	lds	r19, 0x006F
    19c2:	80 91 76 00 	lds	r24, 0x0076
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	f9 01       	movw	r30, r18
    19cc:	e8 0f       	add	r30, r24
    19ce:	f9 1f       	adc	r31, r25
    19d0:	80 81       	ld	r24, Z
    19d2:	8c 93       	st	X, r24
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    19d4:	aa e2       	ldi	r26, 0x2A	; 42
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	ea e2       	ldi	r30, 0x2A	; 42
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	80 64       	ori	r24, 0x40	; 64
    19e0:	8c 93       	st	X, r24
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <USART_u8SendStringAsynch+0x8a>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <USART_u8SendStringAsynch+0x8a>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    19ea:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    19ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	cf 91       	pop	r28
    19fa:	df 91       	pop	r29
    19fc:	08 95       	ret

000019fe <USART_u8ReceiveBufferSynch>:

u8 USART_u8ReceiveBufferSynch (u8 *Copy_pchString , u32 Copy_u32BufferSize)
{
    19fe:	df 93       	push	r29
    1a00:	cf 93       	push	r28
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	2c 97       	sbiw	r28, 0x0c	; 12
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	9f 83       	std	Y+7, r25	; 0x07
    1a14:	8e 83       	std	Y+6, r24	; 0x06
    1a16:	48 87       	std	Y+8, r20	; 0x08
    1a18:	59 87       	std	Y+9, r21	; 0x09
    1a1a:	6a 87       	std	Y+10, r22	; 0x0a
    1a1c:	7b 87       	std	Y+11, r23	; 0x0b
	u8 Local_u8ErrorState = ES_OK ;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    1a22:	19 82       	std	Y+1, r1	; 0x01
    1a24:	1a 82       	std	Y+2, r1	; 0x02
    1a26:	1b 82       	std	Y+3, r1	; 0x03
    1a28:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    1a2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a2e:	00 97       	sbiw	r24, 0x00	; 0
    1a30:	49 f1       	breq	.+82     	; 0x1a84 <USART_u8ReceiveBufferSynch+0x86>
    1a32:	1a c0       	rjmp	.+52     	; 0x1a68 <USART_u8ReceiveBufferSynch+0x6a>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    1a34:	29 81       	ldd	r18, Y+1	; 0x01
    1a36:	3a 81       	ldd	r19, Y+2	; 0x02
    1a38:	8e 81       	ldd	r24, Y+6	; 0x06
    1a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3c:	82 0f       	add	r24, r18
    1a3e:	93 1f       	adc	r25, r19
    1a40:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <USART_u8RecevieData>
    1a44:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	ab 81       	ldd	r26, Y+3	; 0x03
    1a4c:	bc 81       	ldd	r27, Y+4	; 0x04
    1a4e:	01 96       	adiw	r24, 0x01	; 1
    1a50:	a1 1d       	adc	r26, r1
    1a52:	b1 1d       	adc	r27, r1
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	9a 83       	std	Y+2, r25	; 0x02
    1a58:	ab 83       	std	Y+3, r26	; 0x03
    1a5a:	bc 83       	std	Y+4, r27	; 0x04

			if (Local_u8ErrorState != ES_OK)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	19 f0       	breq	.+6      	; 0x1a68 <USART_u8ReceiveBufferSynch+0x6a>
				return Local_u8ErrorState ;
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	8c 87       	std	Y+12, r24	; 0x0c
    1a66:	12 c0       	rjmp	.+36     	; 0x1a8c <USART_u8ReceiveBufferSynch+0x8e>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    1a68:	29 81       	ldd	r18, Y+1	; 0x01
    1a6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1a6c:	4b 81       	ldd	r20, Y+3	; 0x03
    1a6e:	5c 81       	ldd	r21, Y+4	; 0x04
    1a70:	88 85       	ldd	r24, Y+8	; 0x08
    1a72:	99 85       	ldd	r25, Y+9	; 0x09
    1a74:	aa 85       	ldd	r26, Y+10	; 0x0a
    1a76:	bb 85       	ldd	r27, Y+11	; 0x0b
    1a78:	28 17       	cp	r18, r24
    1a7a:	39 07       	cpc	r19, r25
    1a7c:	4a 07       	cpc	r20, r26
    1a7e:	5b 07       	cpc	r21, r27
    1a80:	c8 f2       	brcs	.-78     	; 0x1a34 <USART_u8ReceiveBufferSynch+0x36>
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <USART_u8ReceiveBufferSynch+0x8a>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    1a88:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8a:	8c 87       	std	Y+12, r24	; 0x0c
    1a8c:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    1a8e:	2c 96       	adiw	r28, 0x0c	; 12
    1a90:	0f b6       	in	r0, 0x3f	; 63
    1a92:	f8 94       	cli
    1a94:	de bf       	out	0x3e, r29	; 62
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	cd bf       	out	0x3d, r28	; 61
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <USART_u8ReceiveBufferAsynch>:

u8 USART_u8ReceiveBufferAsynch (u8 *Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	29 97       	sbiw	r28, 0x09	; 9
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	9b 83       	std	Y+3, r25	; 0x03
    1ab6:	8a 83       	std	Y+2, r24	; 0x02
    1ab8:	4c 83       	std	Y+4, r20	; 0x04
    1aba:	5d 83       	std	Y+5, r21	; 0x05
    1abc:	6e 83       	std	Y+6, r22	; 0x06
    1abe:	7f 83       	std	Y+7, r23	; 0x07
    1ac0:	39 87       	std	Y+9, r19	; 0x09
    1ac2:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = ES_OK ;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    1ac8:	80 91 74 00 	lds	r24, 0x0074
    1acc:	88 23       	and	r24, r24
    1ace:	39 f5       	brne	.+78     	; 0x1b1e <USART_u8ReceiveBufferAsynch+0x7e>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	01 f1       	breq	.+64     	; 0x1b18 <USART_u8ReceiveBufferAsynch+0x78>
    1ad8:	88 85       	ldd	r24, Y+8	; 0x08
    1ada:	99 85       	ldd	r25, Y+9	; 0x09
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	e1 f0       	breq	.+56     	; 0x1b18 <USART_u8ReceiveBufferAsynch+0x78>
		{
			USART_u8State = BUSY ;
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	80 93 74 00 	sts	0x0074, r24

			USART_pu8ReceiveData = Copy_pchString ;
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aea:	90 93 71 00 	sts	0x0071, r25
    1aee:	80 93 70 00 	sts	0x0070, r24
			USART_pvNotificationFunc = NotificationFunc ;
    1af2:	88 85       	ldd	r24, Y+8	; 0x08
    1af4:	99 85       	ldd	r25, Y+9	; 0x09
    1af6:	90 93 73 00 	sts	0x0073, r25
    1afa:	80 93 72 00 	sts	0x0072, r24
			USART_u8BufferSize = Copy_u32BufferSize;
    1afe:	8c 81       	ldd	r24, Y+4	; 0x04
    1b00:	80 93 75 00 	sts	0x0075, r24

			USART_u8Index = 0 ;
    1b04:	10 92 76 00 	sts	0x0076, r1

			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    1b08:	aa e2       	ldi	r26, 0x2A	; 42
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	ea e2       	ldi	r30, 0x2A	; 42
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	80 81       	ld	r24, Z
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	8c 93       	st	X, r24
    1b16:	04 c0       	rjmp	.+8      	; 0x1b20 <USART_u8ReceiveBufferAsynch+0x80>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	89 83       	std	Y+1, r24	; 0x01
    1b1c:	01 c0       	rjmp	.+2      	; 0x1b20 <USART_u8ReceiveBufferAsynch+0x80>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    1b1e:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b22:	29 96       	adiw	r28, 0x09	; 9
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	cf 91       	pop	r28
    1b30:	df 91       	pop	r29
    1b32:	08 95       	ret

00001b34 <__vector_13>:


void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	2f 93       	push	r18
    1b40:	3f 93       	push	r19
    1b42:	4f 93       	push	r20
    1b44:	5f 93       	push	r21
    1b46:	6f 93       	push	r22
    1b48:	7f 93       	push	r23
    1b4a:	8f 93       	push	r24
    1b4c:	9f 93       	push	r25
    1b4e:	af 93       	push	r26
    1b50:	bf 93       	push	r27
    1b52:	ef 93       	push	r30
    1b54:	ff 93       	push	r31
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	cd b7       	in	r28, 0x3d	; 61
    1b5c:	de b7       	in	r29, 0x3e	; 62
	USART_pu8ReceiveData[USART_u8Index] = UDR ;
    1b5e:	20 91 70 00 	lds	r18, 0x0070
    1b62:	30 91 71 00 	lds	r19, 0x0071
    1b66:	80 91 76 00 	lds	r24, 0x0076
    1b6a:	88 2f       	mov	r24, r24
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	d9 01       	movw	r26, r18
    1b70:	a8 0f       	add	r26, r24
    1b72:	b9 1f       	adc	r27, r25
    1b74:	ec e2       	ldi	r30, 0x2C	; 44
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8c 93       	st	X, r24
	USART_u8Index++ ;
    1b7c:	80 91 76 00 	lds	r24, 0x0076
    1b80:	8f 5f       	subi	r24, 0xFF	; 255
    1b82:	80 93 76 00 	sts	0x0076, r24

	if (USART_u8Index == USART_u8BufferSize)
    1b86:	90 91 76 00 	lds	r25, 0x0076
    1b8a:	80 91 75 00 	lds	r24, 0x0075
    1b8e:	98 17       	cp	r25, r24
    1b90:	81 f4       	brne	.+32     	; 0x1bb2 <__vector_13+0x7e>
	{
		USART_u8Index=0;
    1b92:	10 92 76 00 	sts	0x0076, r1
		USART_u8State = IDLE ;
    1b96:	10 92 74 00 	sts	0x0074, r1
		USART_pvNotificationFunc() ;
    1b9a:	e0 91 72 00 	lds	r30, 0x0072
    1b9e:	f0 91 73 00 	lds	r31, 0x0073
    1ba2:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    1ba4:	aa e2       	ldi	r26, 0x2A	; 42
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	ea e2       	ldi	r30, 0x2A	; 42
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	80 81       	ld	r24, Z
    1bae:	8f 77       	andi	r24, 0x7F	; 127
    1bb0:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Noting*/
	}
}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__vector_15>:

void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	2f 93       	push	r18
    1be4:	3f 93       	push	r19
    1be6:	4f 93       	push	r20
    1be8:	5f 93       	push	r21
    1bea:	6f 93       	push	r22
    1bec:	7f 93       	push	r23
    1bee:	8f 93       	push	r24
    1bf0:	9f 93       	push	r25
    1bf2:	af 93       	push	r26
    1bf4:	bf 93       	push	r27
    1bf6:	ef 93       	push	r30
    1bf8:	ff 93       	push	r31
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
	USART_u8Index++ ;
    1c02:	80 91 76 00 	lds	r24, 0x0076
    1c06:	8f 5f       	subi	r24, 0xFF	; 255
    1c08:	80 93 76 00 	sts	0x0076, r24

	if (USART_pu8SendData[USART_u8Index] == '\0')
    1c0c:	20 91 6e 00 	lds	r18, 0x006E
    1c10:	30 91 6f 00 	lds	r19, 0x006F
    1c14:	80 91 76 00 	lds	r24, 0x0076
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	f9 01       	movw	r30, r18
    1c1e:	e8 0f       	add	r30, r24
    1c20:	f9 1f       	adc	r31, r25
    1c22:	80 81       	ld	r24, Z
    1c24:	88 23       	and	r24, r24
    1c26:	89 f4       	brne	.+34     	; 0x1c4a <__vector_15+0x72>
	{
		USART_u8Index=0;
    1c28:	10 92 76 00 	sts	0x0076, r1
		USART_u8State = IDLE ;
    1c2c:	10 92 74 00 	sts	0x0074, r1
		USART_pvNotificationFunc() ;
    1c30:	e0 91 72 00 	lds	r30, 0x0072
    1c34:	f0 91 73 00 	lds	r31, 0x0073
    1c38:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    1c3a:	aa e2       	ldi	r26, 0x2A	; 42
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	ea e2       	ldi	r30, 0x2A	; 42
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	8f 7b       	andi	r24, 0xBF	; 191
    1c46:	8c 93       	st	X, r24
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <__vector_15+0x90>
	}
	else
	{
		UDR = USART_pu8SendData[USART_u8Index] ;
    1c4a:	ac e2       	ldi	r26, 0x2C	; 44
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	20 91 6e 00 	lds	r18, 0x006E
    1c52:	30 91 6f 00 	lds	r19, 0x006F
    1c56:	80 91 76 00 	lds	r24, 0x0076
    1c5a:	88 2f       	mov	r24, r24
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	f9 01       	movw	r30, r18
    1c60:	e8 0f       	add	r30, r24
    1c62:	f9 1f       	adc	r31, r25
    1c64:	80 81       	ld	r24, Z
    1c66:	8c 93       	st	X, r24
	}
}
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	ff 91       	pop	r31
    1c6e:	ef 91       	pop	r30
    1c70:	bf 91       	pop	r27
    1c72:	af 91       	pop	r26
    1c74:	9f 91       	pop	r25
    1c76:	8f 91       	pop	r24
    1c78:	7f 91       	pop	r23
    1c7a:	6f 91       	pop	r22
    1c7c:	5f 91       	pop	r21
    1c7e:	4f 91       	pop	r20
    1c80:	3f 91       	pop	r19
    1c82:	2f 91       	pop	r18
    1c84:	0f 90       	pop	r0
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	0f 90       	pop	r0
    1c8a:	1f 90       	pop	r1
    1c8c:	18 95       	reti

00001c8e <main>:
#include "USART_Interface.h"

#include <util/delay.h>

int main(void)
{
    1c8e:	df 93       	push	r29
    1c90:	cf 93       	push	r28
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	62 97       	sbiw	r28, 0x12	; 18
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
	u16 Res = 0;
    1ca2:	1a 8a       	std	Y+18, r1	; 0x12
    1ca4:	19 8a       	std	Y+17, r1	; 0x11
	u16 AnalogRes = 0;
    1ca6:	18 8a       	std	Y+16, r1	; 0x10
    1ca8:	1f 86       	std	Y+15, r1	; 0x0f
	DIO_enuSetPinDirection(DIO_u8PORTA , DIO_PIN0 , DIO_u8INPUT);
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	40 e0       	ldi	r20, 0x00	; 0
    1cb0:	0e 94 2c 08 	call	0x1058	; 0x1058 <DIO_enuSetPinDirection>
	DIO_enuInit();
    1cb4:	0e 94 b3 06 	call	0xd66	; 0xd66 <DIO_enuInit>
	ADC_voidInit();
    1cb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>
	USART_voidInit();
    1cbc:	0e 94 30 0b 	call	0x1660	; 0x1660 <USART_voidInit>
	while(1)
	{
		Res = ADC_u16ADCStartConvertPolling(0b00000);
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <ADC_u16ADCStartConvertPolling>
    1cc6:	9a 8b       	std	Y+18, r25	; 0x12
    1cc8:	89 8b       	std	Y+17, r24	; 0x11
		AnalogRes = (Res *5)/1023;
    1cca:	29 89       	ldd	r18, Y+17	; 0x11
    1ccc:	3a 89       	ldd	r19, Y+18	; 0x12
    1cce:	c9 01       	movw	r24, r18
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	2f ef       	ldi	r18, 0xFF	; 255
    1cde:	33 e0       	ldi	r19, 0x03	; 3
    1ce0:	b9 01       	movw	r22, r18
    1ce2:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__udivmodhi4>
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	98 8b       	std	Y+16, r25	; 0x10
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
		USART_u8SendData(AnalogRes);
    1cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cee:	0e 94 9d 0b 	call	0x173a	; 0x173a <USART_u8SendData>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	aa ef       	ldi	r26, 0xFA	; 250
    1cf8:	b3 e4       	ldi	r27, 0x43	; 67
    1cfa:	8b 87       	std	Y+11, r24	; 0x0b
    1cfc:	9c 87       	std	Y+12, r25	; 0x0c
    1cfe:	ad 87       	std	Y+13, r26	; 0x0d
    1d00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4a ef       	ldi	r20, 0xFA	; 250
    1d10:	54 e4       	ldi	r21, 0x44	; 68
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	8f 83       	std	Y+7, r24	; 0x07
    1d1c:	98 87       	std	Y+8, r25	; 0x08
    1d1e:	a9 87       	std	Y+9, r26	; 0x09
    1d20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d22:	6f 81       	ldd	r22, Y+7	; 0x07
    1d24:	78 85       	ldd	r23, Y+8	; 0x08
    1d26:	89 85       	ldd	r24, Y+9	; 0x09
    1d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	40 e8       	ldi	r20, 0x80	; 128
    1d30:	5f e3       	ldi	r21, 0x3F	; 63
    1d32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d36:	88 23       	and	r24, r24
    1d38:	2c f4       	brge	.+10     	; 0x1d44 <main+0xb6>
		__ticks = 1;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	9e 83       	std	Y+6, r25	; 0x06
    1d40:	8d 83       	std	Y+5, r24	; 0x05
    1d42:	3f c0       	rjmp	.+126    	; 0x1dc2 <main+0x134>
	else if (__tmp > 65535)
    1d44:	6f 81       	ldd	r22, Y+7	; 0x07
    1d46:	78 85       	ldd	r23, Y+8	; 0x08
    1d48:	89 85       	ldd	r24, Y+9	; 0x09
    1d4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	3f ef       	ldi	r19, 0xFF	; 255
    1d50:	4f e7       	ldi	r20, 0x7F	; 127
    1d52:	57 e4       	ldi	r21, 0x47	; 71
    1d54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d58:	18 16       	cp	r1, r24
    1d5a:	4c f5       	brge	.+82     	; 0x1dae <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e2       	ldi	r20, 0x20	; 32
    1d6a:	51 e4       	ldi	r21, 0x41	; 65
    1d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	bc 01       	movw	r22, r24
    1d76:	cd 01       	movw	r24, r26
    1d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	9e 83       	std	Y+6, r25	; 0x06
    1d82:	8d 83       	std	Y+5, r24	; 0x05
    1d84:	0f c0       	rjmp	.+30     	; 0x1da4 <main+0x116>
    1d86:	88 ec       	ldi	r24, 0xC8	; 200
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9c 83       	std	Y+4, r25	; 0x04
    1d8c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	9c 81       	ldd	r25, Y+4	; 0x04
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <main+0x104>
    1d96:	9c 83       	std	Y+4, r25	; 0x04
    1d98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
    1da6:	9e 81       	ldd	r25, Y+6	; 0x06
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	69 f7       	brne	.-38     	; 0x1d86 <main+0xf8>
    1dac:	89 cf       	rjmp	.-238    	; 0x1cc0 <main+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dae:	6f 81       	ldd	r22, Y+7	; 0x07
    1db0:	78 85       	ldd	r23, Y+8	; 0x08
    1db2:	89 85       	ldd	r24, Y+9	; 0x09
    1db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    1dca:	89 81       	ldd	r24, Y+1	; 0x01
    1dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <main+0x140>
    1dd2:	9a 83       	std	Y+2, r25	; 0x02
    1dd4:	89 83       	std	Y+1, r24	; 0x01
    1dd6:	74 cf       	rjmp	.-280    	; 0x1cc0 <main+0x32>

00001dd8 <__udivmodhi4>:
    1dd8:	aa 1b       	sub	r26, r26
    1dda:	bb 1b       	sub	r27, r27
    1ddc:	51 e1       	ldi	r21, 0x11	; 17
    1dde:	07 c0       	rjmp	.+14     	; 0x1dee <__udivmodhi4_ep>

00001de0 <__udivmodhi4_loop>:
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27
    1de4:	a6 17       	cp	r26, r22
    1de6:	b7 07       	cpc	r27, r23
    1de8:	10 f0       	brcs	.+4      	; 0x1dee <__udivmodhi4_ep>
    1dea:	a6 1b       	sub	r26, r22
    1dec:	b7 0b       	sbc	r27, r23

00001dee <__udivmodhi4_ep>:
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	5a 95       	dec	r21
    1df4:	a9 f7       	brne	.-22     	; 0x1de0 <__udivmodhi4_loop>
    1df6:	80 95       	com	r24
    1df8:	90 95       	com	r25
    1dfa:	bc 01       	movw	r22, r24
    1dfc:	cd 01       	movw	r24, r26
    1dfe:	08 95       	ret

00001e00 <__prologue_saves__>:
    1e00:	2f 92       	push	r2
    1e02:	3f 92       	push	r3
    1e04:	4f 92       	push	r4
    1e06:	5f 92       	push	r5
    1e08:	6f 92       	push	r6
    1e0a:	7f 92       	push	r7
    1e0c:	8f 92       	push	r8
    1e0e:	9f 92       	push	r9
    1e10:	af 92       	push	r10
    1e12:	bf 92       	push	r11
    1e14:	cf 92       	push	r12
    1e16:	df 92       	push	r13
    1e18:	ef 92       	push	r14
    1e1a:	ff 92       	push	r15
    1e1c:	0f 93       	push	r16
    1e1e:	1f 93       	push	r17
    1e20:	cf 93       	push	r28
    1e22:	df 93       	push	r29
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	ca 1b       	sub	r28, r26
    1e2a:	db 0b       	sbc	r29, r27
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
    1e36:	09 94       	ijmp

00001e38 <__epilogue_restores__>:
    1e38:	2a 88       	ldd	r2, Y+18	; 0x12
    1e3a:	39 88       	ldd	r3, Y+17	; 0x11
    1e3c:	48 88       	ldd	r4, Y+16	; 0x10
    1e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1e4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1e4e:	df 80       	ldd	r13, Y+7	; 0x07
    1e50:	ee 80       	ldd	r14, Y+6	; 0x06
    1e52:	fd 80       	ldd	r15, Y+5	; 0x05
    1e54:	0c 81       	ldd	r16, Y+4	; 0x04
    1e56:	1b 81       	ldd	r17, Y+3	; 0x03
    1e58:	aa 81       	ldd	r26, Y+2	; 0x02
    1e5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1e5c:	ce 0f       	add	r28, r30
    1e5e:	d1 1d       	adc	r29, r1
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	de bf       	out	0x3e, r29	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	cd bf       	out	0x3d, r28	; 61
    1e6a:	ed 01       	movw	r28, r26
    1e6c:	08 95       	ret

00001e6e <_exit>:
    1e6e:	f8 94       	cli

00001e70 <__stop_program>:
    1e70:	ff cf       	rjmp	.-2      	; 0x1e70 <__stop_program>
