
AVR3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d00  00000d94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000d96  2**0
                  ALLOC
  3 .stab         000010c8  00000000  00000000  00000d98  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000068d  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e0       	ldi	r30, 0x00	; 0
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 36 06 	call	0xc6c	; 0xc6c <main>
  8a:	0c 94 7e 06 	jmp	0xcfc	; 0xcfc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:

//IDLE or BUSY
static u8 ADC_State = IDLE ;

void ADC_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
  9a:	a6 e2       	ldi	r26, 0x26	; 38
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	8c 93       	st	X, r24

	//ref -> AVCC
	SET_BIT(ADMUX , ADMUX_REFS0);
  a8:	a7 e2       	ldi	r26, 0x27	; 39
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e7 e2       	ldi	r30, 0x27	; 39
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , ADMUX_REFS1);
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	8c 93       	st	X, r24

	//Prescaler -> 128
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
  c4:	a6 e2       	ldi	r26, 0x26	; 38
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e6 e2       	ldi	r30, 0x26	; 38
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
  d2:	a6 e2       	ldi	r26, 0x26	; 38
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e2       	ldi	r30, 0x26	; 38
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	82 60       	ori	r24, 0x02	; 2
  de:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e2       	ldi	r30, 0x26	; 38
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	8c 93       	st	X, r24

	//ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8c 93       	st	X, r24
}
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <ADC_u16ADCStartConvertPolling>:

u16 ADC_u16ADCStartConvertPolling(u8 Copy_u8Channel)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <ADC_u16ADCStartConvertPolling+0x6>
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_Read = 0;
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= 0b11100000;
 114:	a7 e2       	ldi	r26, 0x27	; 39
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e7 e2       	ldi	r30, 0x27	; 39
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 7e       	andi	r24, 0xE0	; 224
 120:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
 122:	a7 e2       	ldi	r26, 0x27	; 39
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e7 e2       	ldi	r30, 0x27	; 39
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	90 81       	ld	r25, Z
 12c:	8b 81       	ldd	r24, Y+3	; 0x03
 12e:	89 2b       	or	r24, r25
 130:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA , ADCSRA_ADSC);
 132:	a6 e2       	ldi	r26, 0x26	; 38
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e6 e2       	ldi	r30, 0x26	; 38
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	8c 93       	st	X, r24

	while(0 == GET_BIT(ADCSRA , ADCSRA_ADIF));
 140:	e6 e2       	ldi	r30, 0x26	; 38
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 95       	swap	r24
 148:	8f 70       	andi	r24, 0x0F	; 15
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	81 70       	andi	r24, 0x01	; 1
 150:	90 70       	andi	r25, 0x00	; 0
 152:	00 97       	sbiw	r24, 0x00	; 0
 154:	a9 f3       	breq	.-22     	; 0x140 <ADC_u16ADCStartConvertPolling+0x3e>

	ADC_Read = ADCLH;
 156:	e4 e2       	ldi	r30, 0x24	; 36
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	9a 83       	std	Y+2, r25	; 0x02
 160:	89 83       	std	Y+1, r24	; 0x01

	//CLR flag
	SET_BIT(ADCSRA , ADCSRA_ADSC);
 162:	a6 e2       	ldi	r26, 0x26	; 38
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e6 e2       	ldi	r30, 0x26	; 38
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	8c 93       	st	X, r24

	return ADC_Read;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
}
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	cf 91       	pop	r28
 17c:	df 91       	pop	r29
 17e:	08 95       	ret

00000180 <ADC_u8ADCStartConvertInt>:

u8 ADC_u8ADCStartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*ptrFunc)(void))
{
 180:	df 93       	push	r29
 182:	cf 93       	push	r28
 184:	00 d0       	rcall	.+0      	; 0x186 <ADC_u8ADCStartConvertInt+0x6>
 186:	00 d0       	rcall	.+0      	; 0x188 <ADC_u8ADCStartConvertInt+0x8>
 188:	00 d0       	rcall	.+0      	; 0x18a <ADC_u8ADCStartConvertInt+0xa>
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	8a 83       	std	Y+2, r24	; 0x02
 190:	7c 83       	std	Y+4, r23	; 0x04
 192:	6b 83       	std	Y+3, r22	; 0x03
 194:	5e 83       	std	Y+6, r21	; 0x06
 196:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = ES_OK;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	89 83       	std	Y+1, r24	; 0x01
	if((ADC_State == IDLE) && (NULL != pu16Reading) && (NULL != ptrFunc))
 19c:	80 91 60 00 	lds	r24, 0x0060
 1a0:	81 30       	cpi	r24, 0x01	; 1
 1a2:	a9 f5       	brne	.+106    	; 0x20e <ADC_u8ADCStartConvertInt+0x8e>
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	9c 81       	ldd	r25, Y+4	; 0x04
 1a8:	00 97       	sbiw	r24, 0x00	; 0
 1aa:	89 f1       	breq	.+98     	; 0x20e <ADC_u8ADCStartConvertInt+0x8e>
 1ac:	8d 81       	ldd	r24, Y+5	; 0x05
 1ae:	9e 81       	ldd	r25, Y+6	; 0x06
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	69 f1       	breq	.+90     	; 0x20e <ADC_u8ADCStartConvertInt+0x8e>
	{
		ADC_State = BUSY;
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	80 93 60 00 	sts	0x0060, r24
		Global_ptr = pu16Reading;
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	9c 81       	ldd	r25, Y+4	; 0x04
 1be:	90 93 63 00 	sts	0x0063, r25
 1c2:	80 93 62 00 	sts	0x0062, r24
		GlobalPtrFunc = ptrFunc;
 1c6:	8d 81       	ldd	r24, Y+5	; 0x05
 1c8:	9e 81       	ldd	r25, Y+6	; 0x06
 1ca:	90 93 65 00 	sts	0x0065, r25
 1ce:	80 93 64 00 	sts	0x0064, r24

		ADMUX &= 0b11100000;
 1d2:	a7 e2       	ldi	r26, 0x27	; 39
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e7 e2       	ldi	r30, 0x27	; 39
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	80 7e       	andi	r24, 0xE0	; 224
 1de:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;
 1e0:	a7 e2       	ldi	r26, 0x27	; 39
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	e7 e2       	ldi	r30, 0x27	; 39
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	90 81       	ld	r25, Z
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	89 2b       	or	r24, r25
 1ee:	8c 93       	st	X, r24

		//Enable interrupt
		SET_BIT(ADCSRA , ADCSRA_ADIE);
 1f0:	a6 e2       	ldi	r26, 0x26	; 38
 1f2:	b0 e0       	ldi	r27, 0x00	; 0
 1f4:	e6 e2       	ldi	r30, 0x26	; 38
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	88 60       	ori	r24, 0x08	; 8
 1fc:	8c 93       	st	X, r24

		//Start Conversion
		SET_BIT(ADCSRA , ADCSRA_ADSC);
 1fe:	a6 e2       	ldi	r26, 0x26	; 38
 200:	b0 e0       	ldi	r27, 0x00	; 0
 202:	e6 e2       	ldi	r30, 0x26	; 38
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 64       	ori	r24, 0x40	; 64
 20a:	8c 93       	st	X, r24
 20c:	01 c0       	rjmp	.+2      	; 0x210 <ADC_u8ADCStartConvertInt+0x90>


	}
	else
	{
		Local_u8Error = ES_NOK;
 20e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
 210:	89 81       	ldd	r24, Y+1	; 0x01
}
 212:	26 96       	adiw	r28, 0x06	; 6
 214:	0f b6       	in	r0, 0x3f	; 63
 216:	f8 94       	cli
 218:	de bf       	out	0x3e, r29	; 62
 21a:	0f be       	out	0x3f, r0	; 63
 21c:	cd bf       	out	0x3d, r28	; 61
 21e:	cf 91       	pop	r28
 220:	df 91       	pop	r29
 222:	08 95       	ret

00000224 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
 22e:	2f 93       	push	r18
 230:	3f 93       	push	r19
 232:	4f 93       	push	r20
 234:	5f 93       	push	r21
 236:	6f 93       	push	r22
 238:	7f 93       	push	r23
 23a:	8f 93       	push	r24
 23c:	9f 93       	push	r25
 23e:	af 93       	push	r26
 240:	bf 93       	push	r27
 242:	ef 93       	push	r30
 244:	ff 93       	push	r31
 246:	df 93       	push	r29
 248:	cf 93       	push	r28
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
	//Return Reading
	*Global_ptr = ADCLH;
 24e:	a0 91 62 00 	lds	r26, 0x0062
 252:	b0 91 63 00 	lds	r27, 0x0063
 256:	e4 e2       	ldi	r30, 0x24	; 36
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	91 81       	ldd	r25, Z+1	; 0x01
 25e:	8d 93       	st	X+, r24
 260:	9c 93       	st	X, r25
	//Execute function
	GlobalPtrFunc();
 262:	e0 91 64 00 	lds	r30, 0x0064
 266:	f0 91 65 00 	lds	r31, 0x0065
 26a:	09 95       	icall
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
 26c:	a6 e2       	ldi	r26, 0x26	; 38
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	e6 e2       	ldi	r30, 0x26	; 38
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	87 7f       	andi	r24, 0xF7	; 247
 278:	8c 93       	st	X, r24
	//Change state
	ADC_State = IDLE;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 60 00 	sts	0x0060, r24
}
 280:	cf 91       	pop	r28
 282:	df 91       	pop	r29
 284:	ff 91       	pop	r31
 286:	ef 91       	pop	r30
 288:	bf 91       	pop	r27
 28a:	af 91       	pop	r26
 28c:	9f 91       	pop	r25
 28e:	8f 91       	pop	r24
 290:	7f 91       	pop	r23
 292:	6f 91       	pop	r22
 294:	5f 91       	pop	r21
 296:	4f 91       	pop	r20
 298:	3f 91       	pop	r19
 29a:	2f 91       	pop	r18
 29c:	0f 90       	pop	r0
 29e:	0f be       	out	0x3f, r0	; 63
 2a0:	0f 90       	pop	r0
 2a2:	1f 90       	pop	r1
 2a4:	18 95       	reti

000002a6 <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
 2a6:	df 93       	push	r29
 2a8:	cf 93       	push	r28
 2aa:	0f 92       	push	r0
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
 2b0:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
 2b2:	ea e3       	ldi	r30, 0x3A	; 58
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	8f ef       	ldi	r24, 0xFF	; 255
 2b8:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
 2ba:	e7 e3       	ldi	r30, 0x37	; 55
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
 2c2:	e4 e3       	ldi	r30, 0x34	; 52
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
 2ca:	e1 e3       	ldi	r30, 0x31	; 49
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	8f ef       	ldi	r24, 0xFF	; 255
 2d0:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
 2d2:	eb e3       	ldi	r30, 0x3B	; 59
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
 2d8:	e8 e3       	ldi	r30, 0x38	; 56
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
 2de:	e5 e3       	ldi	r30, 0x35	; 53
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	10 82       	st	Z, r1
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
 2e4:	e2 e3       	ldi	r30, 0x32	; 50
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f0:	0f 90       	pop	r0
 2f2:	cf 91       	pop	r28
 2f4:	df 91       	pop	r29
 2f6:	08 95       	ret

000002f8 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
 2f8:	df 93       	push	r29
 2fa:	cf 93       	push	r28
 2fc:	00 d0       	rcall	.+0      	; 0x2fe <DIO_enuSetPortDirection+0x6>
 2fe:	00 d0       	rcall	.+0      	; 0x300 <DIO_enuSetPortDirection+0x8>
 300:	0f 92       	push	r0
 302:	cd b7       	in	r28, 0x3d	; 61
 304:	de b7       	in	r29, 0x3e	; 62
 306:	8a 83       	std	Y+2, r24	; 0x02
 308:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 30a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	84 30       	cpi	r24, 0x04	; 4
 310:	a8 f5       	brcc	.+106    	; 0x37c <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	3d 83       	std	Y+5, r19	; 0x05
 31a:	2c 83       	std	Y+4, r18	; 0x04
 31c:	8c 81       	ldd	r24, Y+4	; 0x04
 31e:	9d 81       	ldd	r25, Y+5	; 0x05
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	91 05       	cpc	r25, r1
 324:	d1 f0       	breq	.+52     	; 0x35a <DIO_enuSetPortDirection+0x62>
 326:	2c 81       	ldd	r18, Y+4	; 0x04
 328:	3d 81       	ldd	r19, Y+5	; 0x05
 32a:	22 30       	cpi	r18, 0x02	; 2
 32c:	31 05       	cpc	r19, r1
 32e:	2c f4       	brge	.+10     	; 0x33a <DIO_enuSetPortDirection+0x42>
 330:	8c 81       	ldd	r24, Y+4	; 0x04
 332:	9d 81       	ldd	r25, Y+5	; 0x05
 334:	00 97       	sbiw	r24, 0x00	; 0
 336:	61 f0       	breq	.+24     	; 0x350 <DIO_enuSetPortDirection+0x58>
 338:	1e c0       	rjmp	.+60     	; 0x376 <DIO_enuSetPortDirection+0x7e>
 33a:	2c 81       	ldd	r18, Y+4	; 0x04
 33c:	3d 81       	ldd	r19, Y+5	; 0x05
 33e:	22 30       	cpi	r18, 0x02	; 2
 340:	31 05       	cpc	r19, r1
 342:	81 f0       	breq	.+32     	; 0x364 <DIO_enuSetPortDirection+0x6c>
 344:	8c 81       	ldd	r24, Y+4	; 0x04
 346:	9d 81       	ldd	r25, Y+5	; 0x05
 348:	83 30       	cpi	r24, 0x03	; 3
 34a:	91 05       	cpc	r25, r1
 34c:	81 f0       	breq	.+32     	; 0x36e <DIO_enuSetPortDirection+0x76>
 34e:	13 c0       	rjmp	.+38     	; 0x376 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
 350:	ea e3       	ldi	r30, 0x3A	; 58
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	8b 81       	ldd	r24, Y+3	; 0x03
 356:	80 83       	st	Z, r24
 358:	0e c0       	rjmp	.+28     	; 0x376 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
 35a:	e7 e3       	ldi	r30, 0x37	; 55
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	8b 81       	ldd	r24, Y+3	; 0x03
 360:	80 83       	st	Z, r24
 362:	09 c0       	rjmp	.+18     	; 0x376 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
 364:	e4 e3       	ldi	r30, 0x34	; 52
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	8b 81       	ldd	r24, Y+3	; 0x03
 36a:	80 83       	st	Z, r24
 36c:	04 c0       	rjmp	.+8      	; 0x376 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
 36e:	e1 e3       	ldi	r30, 0x31	; 49
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	8b 81       	ldd	r24, Y+3	; 0x03
 374:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	89 83       	std	Y+1, r24	; 0x01
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 37c:	83 e0       	ldi	r24, 0x03	; 3
 37e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 380:	89 81       	ldd	r24, Y+1	; 0x01
}
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	cf 91       	pop	r28
 38e:	df 91       	pop	r29
 390:	08 95       	ret

00000392 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
 392:	df 93       	push	r29
 394:	cf 93       	push	r28
 396:	00 d0       	rcall	.+0      	; 0x398 <DIO_enuSetPortValue+0x6>
 398:	00 d0       	rcall	.+0      	; 0x39a <DIO_enuSetPortValue+0x8>
 39a:	0f 92       	push	r0
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	8a 83       	std	Y+2, r24	; 0x02
 3a2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 3a4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	84 30       	cpi	r24, 0x04	; 4
 3aa:	a8 f5       	brcc	.+106    	; 0x416 <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
 3ac:	8a 81       	ldd	r24, Y+2	; 0x02
 3ae:	28 2f       	mov	r18, r24
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	3d 83       	std	Y+5, r19	; 0x05
 3b4:	2c 83       	std	Y+4, r18	; 0x04
 3b6:	8c 81       	ldd	r24, Y+4	; 0x04
 3b8:	9d 81       	ldd	r25, Y+5	; 0x05
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	91 05       	cpc	r25, r1
 3be:	d1 f0       	breq	.+52     	; 0x3f4 <DIO_enuSetPortValue+0x62>
 3c0:	2c 81       	ldd	r18, Y+4	; 0x04
 3c2:	3d 81       	ldd	r19, Y+5	; 0x05
 3c4:	22 30       	cpi	r18, 0x02	; 2
 3c6:	31 05       	cpc	r19, r1
 3c8:	2c f4       	brge	.+10     	; 0x3d4 <DIO_enuSetPortValue+0x42>
 3ca:	8c 81       	ldd	r24, Y+4	; 0x04
 3cc:	9d 81       	ldd	r25, Y+5	; 0x05
 3ce:	00 97       	sbiw	r24, 0x00	; 0
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_enuSetPortValue+0x58>
 3d2:	1e c0       	rjmp	.+60     	; 0x410 <DIO_enuSetPortValue+0x7e>
 3d4:	2c 81       	ldd	r18, Y+4	; 0x04
 3d6:	3d 81       	ldd	r19, Y+5	; 0x05
 3d8:	22 30       	cpi	r18, 0x02	; 2
 3da:	31 05       	cpc	r19, r1
 3dc:	81 f0       	breq	.+32     	; 0x3fe <DIO_enuSetPortValue+0x6c>
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	9d 81       	ldd	r25, Y+5	; 0x05
 3e2:	83 30       	cpi	r24, 0x03	; 3
 3e4:	91 05       	cpc	r25, r1
 3e6:	81 f0       	breq	.+32     	; 0x408 <DIO_enuSetPortValue+0x76>
 3e8:	13 c0       	rjmp	.+38     	; 0x410 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
 3ea:	eb e3       	ldi	r30, 0x3B	; 59
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	8b 81       	ldd	r24, Y+3	; 0x03
 3f0:	80 83       	st	Z, r24
 3f2:	0e c0       	rjmp	.+28     	; 0x410 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
 3f4:	e8 e3       	ldi	r30, 0x38	; 56
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	8b 81       	ldd	r24, Y+3	; 0x03
 3fa:	80 83       	st	Z, r24
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
 3fe:	e5 e3       	ldi	r30, 0x35	; 53
 400:	f0 e0       	ldi	r31, 0x00	; 0
 402:	8b 81       	ldd	r24, Y+3	; 0x03
 404:	80 83       	st	Z, r24
 406:	04 c0       	rjmp	.+8      	; 0x410 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
 408:	e2 e3       	ldi	r30, 0x32	; 50
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	89 83       	std	Y+1, r24	; 0x01
 414:	02 c0       	rjmp	.+4      	; 0x41a <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
 41a:	89 81       	ldd	r24, Y+1	; 0x01
}
 41c:	0f 90       	pop	r0
 41e:	0f 90       	pop	r0
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	cf 91       	pop	r28
 428:	df 91       	pop	r29
 42a:	08 95       	ret

0000042c <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
 42c:	df 93       	push	r29
 42e:	cf 93       	push	r28
 430:	00 d0       	rcall	.+0      	; 0x432 <DIO_enuTogPort+0x6>
 432:	00 d0       	rcall	.+0      	; 0x434 <DIO_enuTogPort+0x8>
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
 43a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	84 30       	cpi	r24, 0x04	; 4
 440:	08 f0       	brcs	.+2      	; 0x444 <DIO_enuTogPort+0x18>
 442:	41 c0       	rjmp	.+130    	; 0x4c6 <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
 444:	8a 81       	ldd	r24, Y+2	; 0x02
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	3c 83       	std	Y+4, r19	; 0x04
 44c:	2b 83       	std	Y+3, r18	; 0x03
 44e:	8b 81       	ldd	r24, Y+3	; 0x03
 450:	9c 81       	ldd	r25, Y+4	; 0x04
 452:	81 30       	cpi	r24, 0x01	; 1
 454:	91 05       	cpc	r25, r1
 456:	e9 f0       	breq	.+58     	; 0x492 <DIO_enuTogPort+0x66>
 458:	2b 81       	ldd	r18, Y+3	; 0x03
 45a:	3c 81       	ldd	r19, Y+4	; 0x04
 45c:	22 30       	cpi	r18, 0x02	; 2
 45e:	31 05       	cpc	r19, r1
 460:	2c f4       	brge	.+10     	; 0x46c <DIO_enuTogPort+0x40>
 462:	8b 81       	ldd	r24, Y+3	; 0x03
 464:	9c 81       	ldd	r25, Y+4	; 0x04
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	61 f0       	breq	.+24     	; 0x482 <DIO_enuTogPort+0x56>
 46a:	2a c0       	rjmp	.+84     	; 0x4c0 <DIO_enuTogPort+0x94>
 46c:	2b 81       	ldd	r18, Y+3	; 0x03
 46e:	3c 81       	ldd	r19, Y+4	; 0x04
 470:	22 30       	cpi	r18, 0x02	; 2
 472:	31 05       	cpc	r19, r1
 474:	b1 f0       	breq	.+44     	; 0x4a2 <DIO_enuTogPort+0x76>
 476:	8b 81       	ldd	r24, Y+3	; 0x03
 478:	9c 81       	ldd	r25, Y+4	; 0x04
 47a:	83 30       	cpi	r24, 0x03	; 3
 47c:	91 05       	cpc	r25, r1
 47e:	c9 f0       	breq	.+50     	; 0x4b2 <DIO_enuTogPort+0x86>
 480:	1f c0       	rjmp	.+62     	; 0x4c0 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
 482:	ab e3       	ldi	r26, 0x3B	; 59
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	eb e3       	ldi	r30, 0x3B	; 59
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	80 95       	com	r24
 48e:	8c 93       	st	X, r24
 490:	17 c0       	rjmp	.+46     	; 0x4c0 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
 492:	a8 e3       	ldi	r26, 0x38	; 56
 494:	b0 e0       	ldi	r27, 0x00	; 0
 496:	e8 e3       	ldi	r30, 0x38	; 56
 498:	f0 e0       	ldi	r31, 0x00	; 0
 49a:	80 81       	ld	r24, Z
 49c:	80 95       	com	r24
 49e:	8c 93       	st	X, r24
 4a0:	0f c0       	rjmp	.+30     	; 0x4c0 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
 4a2:	a5 e3       	ldi	r26, 0x35	; 53
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e5 e3       	ldi	r30, 0x35	; 53
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	80 95       	com	r24
 4ae:	8c 93       	st	X, r24
 4b0:	07 c0       	rjmp	.+14     	; 0x4c0 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
 4b2:	a2 e3       	ldi	r26, 0x32	; 50
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e2 e3       	ldi	r30, 0x32	; 50
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	80 95       	com	r24
 4be:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	89 83       	std	Y+1, r24	; 0x01
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 4c6:	83 e0       	ldi	r24, 0x03	; 3
 4c8:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
}
 4cc:	0f 90       	pop	r0
 4ce:	0f 90       	pop	r0
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	cf 91       	pop	r28
 4d6:	df 91       	pop	r29
 4d8:	08 95       	ret

000004da <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
 4da:	df 93       	push	r29
 4dc:	cf 93       	push	r28
 4de:	00 d0       	rcall	.+0      	; 0x4e0 <DIO_enuGetPortValue+0x6>
 4e0:	00 d0       	rcall	.+0      	; 0x4e2 <DIO_enuGetPortValue+0x8>
 4e2:	00 d0       	rcall	.+0      	; 0x4e4 <DIO_enuGetPortValue+0xa>
 4e4:	cd b7       	in	r28, 0x3d	; 61
 4e6:	de b7       	in	r29, 0x3e	; 62
 4e8:	8a 83       	std	Y+2, r24	; 0x02
 4ea:	7c 83       	std	Y+4, r23	; 0x04
 4ec:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 4ee:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
 4f0:	8b 81       	ldd	r24, Y+3	; 0x03
 4f2:	9c 81       	ldd	r25, Y+4	; 0x04
 4f4:	00 97       	sbiw	r24, 0x00	; 0
 4f6:	09 f4       	brne	.+2      	; 0x4fa <DIO_enuGetPortValue+0x20>
 4f8:	43 c0       	rjmp	.+134    	; 0x580 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	84 30       	cpi	r24, 0x04	; 4
 4fe:	e8 f5       	brcc	.+122    	; 0x57a <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
 500:	8a 81       	ldd	r24, Y+2	; 0x02
 502:	28 2f       	mov	r18, r24
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	3e 83       	std	Y+6, r19	; 0x06
 508:	2d 83       	std	Y+5, r18	; 0x05
 50a:	8d 81       	ldd	r24, Y+5	; 0x05
 50c:	9e 81       	ldd	r25, Y+6	; 0x06
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	91 05       	cpc	r25, r1
 512:	e1 f0       	breq	.+56     	; 0x54c <DIO_enuGetPortValue+0x72>
 514:	2d 81       	ldd	r18, Y+5	; 0x05
 516:	3e 81       	ldd	r19, Y+6	; 0x06
 518:	22 30       	cpi	r18, 0x02	; 2
 51a:	31 05       	cpc	r19, r1
 51c:	2c f4       	brge	.+10     	; 0x528 <DIO_enuGetPortValue+0x4e>
 51e:	8d 81       	ldd	r24, Y+5	; 0x05
 520:	9e 81       	ldd	r25, Y+6	; 0x06
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	61 f0       	breq	.+24     	; 0x53e <DIO_enuGetPortValue+0x64>
 526:	26 c0       	rjmp	.+76     	; 0x574 <DIO_enuGetPortValue+0x9a>
 528:	2d 81       	ldd	r18, Y+5	; 0x05
 52a:	3e 81       	ldd	r19, Y+6	; 0x06
 52c:	22 30       	cpi	r18, 0x02	; 2
 52e:	31 05       	cpc	r19, r1
 530:	a1 f0       	breq	.+40     	; 0x55a <DIO_enuGetPortValue+0x80>
 532:	8d 81       	ldd	r24, Y+5	; 0x05
 534:	9e 81       	ldd	r25, Y+6	; 0x06
 536:	83 30       	cpi	r24, 0x03	; 3
 538:	91 05       	cpc	r25, r1
 53a:	b1 f0       	breq	.+44     	; 0x568 <DIO_enuGetPortValue+0x8e>
 53c:	1b c0       	rjmp	.+54     	; 0x574 <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
 53e:	e9 e3       	ldi	r30, 0x39	; 57
 540:	f0 e0       	ldi	r31, 0x00	; 0
 542:	80 81       	ld	r24, Z
 544:	eb 81       	ldd	r30, Y+3	; 0x03
 546:	fc 81       	ldd	r31, Y+4	; 0x04
 548:	80 83       	st	Z, r24
 54a:	14 c0       	rjmp	.+40     	; 0x574 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
 54c:	e6 e3       	ldi	r30, 0x36	; 54
 54e:	f0 e0       	ldi	r31, 0x00	; 0
 550:	80 81       	ld	r24, Z
 552:	eb 81       	ldd	r30, Y+3	; 0x03
 554:	fc 81       	ldd	r31, Y+4	; 0x04
 556:	80 83       	st	Z, r24
 558:	0d c0       	rjmp	.+26     	; 0x574 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
 55a:	e3 e3       	ldi	r30, 0x33	; 51
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	eb 81       	ldd	r30, Y+3	; 0x03
 562:	fc 81       	ldd	r31, Y+4	; 0x04
 564:	80 83       	st	Z, r24
 566:	06 c0       	rjmp	.+12     	; 0x574 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
 568:	e0 e3       	ldi	r30, 0x30	; 48
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	eb 81       	ldd	r30, Y+3	; 0x03
 570:	fc 81       	ldd	r31, Y+4	; 0x04
 572:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	89 83       	std	Y+1, r24	; 0x01
 578:	05 c0       	rjmp	.+10     	; 0x584 <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 57a:	83 e0       	ldi	r24, 0x03	; 3
 57c:	89 83       	std	Y+1, r24	; 0x01
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 584:	89 81       	ldd	r24, Y+1	; 0x01
}
 586:	26 96       	adiw	r28, 0x06	; 6
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	cf 91       	pop	r28
 594:	df 91       	pop	r29
 596:	08 95       	ret

00000598 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
 598:	df 93       	push	r29
 59a:	cf 93       	push	r28
 59c:	00 d0       	rcall	.+0      	; 0x59e <DIO_enuSetPinDirection+0x6>
 59e:	00 d0       	rcall	.+0      	; 0x5a0 <DIO_enuSetPinDirection+0x8>
 5a0:	00 d0       	rcall	.+0      	; 0x5a2 <DIO_enuSetPinDirection+0xa>
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
 5a6:	8a 83       	std	Y+2, r24	; 0x02
 5a8:	6b 83       	std	Y+3, r22	; 0x03
 5aa:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 5ac:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 5ae:	8a 81       	ldd	r24, Y+2	; 0x02
 5b0:	84 30       	cpi	r24, 0x04	; 4
 5b2:	08 f0       	brcs	.+2      	; 0x5b6 <DIO_enuSetPinDirection+0x1e>
 5b4:	d1 c0       	rjmp	.+418    	; 0x758 <DIO_enuSetPinDirection+0x1c0>
 5b6:	8b 81       	ldd	r24, Y+3	; 0x03
 5b8:	88 30       	cpi	r24, 0x08	; 8
 5ba:	08 f0       	brcs	.+2      	; 0x5be <DIO_enuSetPinDirection+0x26>
 5bc:	cd c0       	rjmp	.+410    	; 0x758 <DIO_enuSetPinDirection+0x1c0>
 5be:	8c 81       	ldd	r24, Y+4	; 0x04
 5c0:	82 30       	cpi	r24, 0x02	; 2
 5c2:	08 f0       	brcs	.+2      	; 0x5c6 <DIO_enuSetPinDirection+0x2e>
 5c4:	c9 c0       	rjmp	.+402    	; 0x758 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
 5c6:	8a 81       	ldd	r24, Y+2	; 0x02
 5c8:	28 2f       	mov	r18, r24
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	3e 83       	std	Y+6, r19	; 0x06
 5ce:	2d 83       	std	Y+5, r18	; 0x05
 5d0:	6d 81       	ldd	r22, Y+5	; 0x05
 5d2:	7e 81       	ldd	r23, Y+6	; 0x06
 5d4:	61 30       	cpi	r22, 0x01	; 1
 5d6:	71 05       	cpc	r23, r1
 5d8:	09 f4       	brne	.+2      	; 0x5dc <DIO_enuSetPinDirection+0x44>
 5da:	41 c0       	rjmp	.+130    	; 0x65e <DIO_enuSetPinDirection+0xc6>
 5dc:	8d 81       	ldd	r24, Y+5	; 0x05
 5de:	9e 81       	ldd	r25, Y+6	; 0x06
 5e0:	82 30       	cpi	r24, 0x02	; 2
 5e2:	91 05       	cpc	r25, r1
 5e4:	34 f4       	brge	.+12     	; 0x5f2 <DIO_enuSetPinDirection+0x5a>
 5e6:	2d 81       	ldd	r18, Y+5	; 0x05
 5e8:	3e 81       	ldd	r19, Y+6	; 0x06
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	71 f0       	breq	.+28     	; 0x60c <DIO_enuSetPinDirection+0x74>
 5f0:	b0 c0       	rjmp	.+352    	; 0x752 <DIO_enuSetPinDirection+0x1ba>
 5f2:	6d 81       	ldd	r22, Y+5	; 0x05
 5f4:	7e 81       	ldd	r23, Y+6	; 0x06
 5f6:	62 30       	cpi	r22, 0x02	; 2
 5f8:	71 05       	cpc	r23, r1
 5fa:	09 f4       	brne	.+2      	; 0x5fe <DIO_enuSetPinDirection+0x66>
 5fc:	59 c0       	rjmp	.+178    	; 0x6b0 <DIO_enuSetPinDirection+0x118>
 5fe:	8d 81       	ldd	r24, Y+5	; 0x05
 600:	9e 81       	ldd	r25, Y+6	; 0x06
 602:	83 30       	cpi	r24, 0x03	; 3
 604:	91 05       	cpc	r25, r1
 606:	09 f4       	brne	.+2      	; 0x60a <DIO_enuSetPinDirection+0x72>
 608:	7c c0       	rjmp	.+248    	; 0x702 <DIO_enuSetPinDirection+0x16a>
 60a:	a3 c0       	rjmp	.+326    	; 0x752 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 60c:	aa e3       	ldi	r26, 0x3A	; 58
 60e:	b0 e0       	ldi	r27, 0x00	; 0
 610:	ea e3       	ldi	r30, 0x3A	; 58
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	48 2f       	mov	r20, r24
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	28 2f       	mov	r18, r24
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_enuSetPinDirection+0x90>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	2a 95       	dec	r18
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_enuSetPinDirection+0x8c>
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
 632:	aa e3       	ldi	r26, 0x3A	; 58
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	ea e3       	ldi	r30, 0x3A	; 58
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	48 2f       	mov	r20, r24
 63e:	8c 81       	ldd	r24, Y+4	; 0x04
 640:	28 2f       	mov	r18, r24
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	8b 81       	ldd	r24, Y+3	; 0x03
 646:	88 2f       	mov	r24, r24
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	b9 01       	movw	r22, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <DIO_enuSetPinDirection+0xba>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	8a 95       	dec	r24
 654:	e2 f7       	brpl	.-8      	; 0x64e <DIO_enuSetPinDirection+0xb6>
 656:	cb 01       	movw	r24, r22
 658:	84 2b       	or	r24, r20
 65a:	8c 93       	st	X, r24
 65c:	7a c0       	rjmp	.+244    	; 0x752 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 65e:	a7 e3       	ldi	r26, 0x37	; 55
 660:	b0 e0       	ldi	r27, 0x00	; 0
 662:	e7 e3       	ldi	r30, 0x37	; 55
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 81       	ld	r24, Z
 668:	48 2f       	mov	r20, r24
 66a:	8b 81       	ldd	r24, Y+3	; 0x03
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_enuSetPinDirection+0xe2>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_enuSetPinDirection+0xde>
 67e:	80 95       	com	r24
 680:	84 23       	and	r24, r20
 682:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
 684:	a7 e3       	ldi	r26, 0x37	; 55
 686:	b0 e0       	ldi	r27, 0x00	; 0
 688:	e7 e3       	ldi	r30, 0x37	; 55
 68a:	f0 e0       	ldi	r31, 0x00	; 0
 68c:	80 81       	ld	r24, Z
 68e:	48 2f       	mov	r20, r24
 690:	8c 81       	ldd	r24, Y+4	; 0x04
 692:	28 2f       	mov	r18, r24
 694:	30 e0       	ldi	r19, 0x00	; 0
 696:	8b 81       	ldd	r24, Y+3	; 0x03
 698:	88 2f       	mov	r24, r24
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_enuSetPinDirection+0x10c>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_enuSetPinDirection+0x108>
 6a8:	cb 01       	movw	r24, r22
 6aa:	84 2b       	or	r24, r20
 6ac:	8c 93       	st	X, r24
 6ae:	51 c0       	rjmp	.+162    	; 0x752 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 6b0:	a4 e3       	ldi	r26, 0x34	; 52
 6b2:	b0 e0       	ldi	r27, 0x00	; 0
 6b4:	e4 e3       	ldi	r30, 0x34	; 52
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	48 2f       	mov	r20, r24
 6bc:	8b 81       	ldd	r24, Y+3	; 0x03
 6be:	28 2f       	mov	r18, r24
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_enuSetPinDirection+0x134>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	2a 95       	dec	r18
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_enuSetPinDirection+0x130>
 6d0:	80 95       	com	r24
 6d2:	84 23       	and	r24, r20
 6d4:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
 6d6:	a4 e3       	ldi	r26, 0x34	; 52
 6d8:	b0 e0       	ldi	r27, 0x00	; 0
 6da:	e4 e3       	ldi	r30, 0x34	; 52
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	48 2f       	mov	r20, r24
 6e2:	8c 81       	ldd	r24, Y+4	; 0x04
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	b9 01       	movw	r22, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_enuSetPinDirection+0x15e>
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <DIO_enuSetPinDirection+0x15a>
 6fa:	cb 01       	movw	r24, r22
 6fc:	84 2b       	or	r24, r20
 6fe:	8c 93       	st	X, r24
 700:	28 c0       	rjmp	.+80     	; 0x752 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 702:	a1 e3       	ldi	r26, 0x31	; 49
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	e1 e3       	ldi	r30, 0x31	; 49
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	48 2f       	mov	r20, r24
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	28 2f       	mov	r18, r24
 712:	30 e0       	ldi	r19, 0x00	; 0
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <DIO_enuSetPinDirection+0x186>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	2a 95       	dec	r18
 720:	e2 f7       	brpl	.-8      	; 0x71a <DIO_enuSetPinDirection+0x182>
 722:	80 95       	com	r24
 724:	84 23       	and	r24, r20
 726:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
 728:	a1 e3       	ldi	r26, 0x31	; 49
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	e1 e3       	ldi	r30, 0x31	; 49
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	80 81       	ld	r24, Z
 732:	48 2f       	mov	r20, r24
 734:	8c 81       	ldd	r24, Y+4	; 0x04
 736:	28 2f       	mov	r18, r24
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	8b 81       	ldd	r24, Y+3	; 0x03
 73c:	88 2f       	mov	r24, r24
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	b9 01       	movw	r22, r18
 742:	02 c0       	rjmp	.+4      	; 0x748 <DIO_enuSetPinDirection+0x1b0>
 744:	66 0f       	add	r22, r22
 746:	77 1f       	adc	r23, r23
 748:	8a 95       	dec	r24
 74a:	e2 f7       	brpl	.-8      	; 0x744 <DIO_enuSetPinDirection+0x1ac>
 74c:	cb 01       	movw	r24, r22
 74e:	84 2b       	or	r24, r20
 750:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	02 c0       	rjmp	.+4      	; 0x75c <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
 75c:	89 81       	ldd	r24, Y+1	; 0x01
}
 75e:	26 96       	adiw	r28, 0x06	; 6
 760:	0f b6       	in	r0, 0x3f	; 63
 762:	f8 94       	cli
 764:	de bf       	out	0x3e, r29	; 62
 766:	0f be       	out	0x3f, r0	; 63
 768:	cd bf       	out	0x3d, r28	; 61
 76a:	cf 91       	pop	r28
 76c:	df 91       	pop	r29
 76e:	08 95       	ret

00000770 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
 770:	df 93       	push	r29
 772:	cf 93       	push	r28
 774:	00 d0       	rcall	.+0      	; 0x776 <DIO_enuSetPinValue+0x6>
 776:	00 d0       	rcall	.+0      	; 0x778 <DIO_enuSetPinValue+0x8>
 778:	00 d0       	rcall	.+0      	; 0x77a <DIO_enuSetPinValue+0xa>
 77a:	cd b7       	in	r28, 0x3d	; 61
 77c:	de b7       	in	r29, 0x3e	; 62
 77e:	8a 83       	std	Y+2, r24	; 0x02
 780:	6b 83       	std	Y+3, r22	; 0x03
 782:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 784:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
 786:	8a 81       	ldd	r24, Y+2	; 0x02
 788:	84 30       	cpi	r24, 0x04	; 4
 78a:	08 f0       	brcs	.+2      	; 0x78e <DIO_enuSetPinValue+0x1e>
 78c:	d1 c0       	rjmp	.+418    	; 0x930 <__stack+0xd1>
 78e:	8b 81       	ldd	r24, Y+3	; 0x03
 790:	88 30       	cpi	r24, 0x08	; 8
 792:	08 f0       	brcs	.+2      	; 0x796 <DIO_enuSetPinValue+0x26>
 794:	cd c0       	rjmp	.+410    	; 0x930 <__stack+0xd1>
 796:	8c 81       	ldd	r24, Y+4	; 0x04
 798:	82 30       	cpi	r24, 0x02	; 2
 79a:	08 f0       	brcs	.+2      	; 0x79e <DIO_enuSetPinValue+0x2e>
 79c:	c9 c0       	rjmp	.+402    	; 0x930 <__stack+0xd1>
		{
			switch(Copy_u8PortID)
 79e:	8a 81       	ldd	r24, Y+2	; 0x02
 7a0:	28 2f       	mov	r18, r24
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	3e 83       	std	Y+6, r19	; 0x06
 7a6:	2d 83       	std	Y+5, r18	; 0x05
 7a8:	6d 81       	ldd	r22, Y+5	; 0x05
 7aa:	7e 81       	ldd	r23, Y+6	; 0x06
 7ac:	61 30       	cpi	r22, 0x01	; 1
 7ae:	71 05       	cpc	r23, r1
 7b0:	09 f4       	brne	.+2      	; 0x7b4 <DIO_enuSetPinValue+0x44>
 7b2:	41 c0       	rjmp	.+130    	; 0x836 <DIO_enuSetPinValue+0xc6>
 7b4:	8d 81       	ldd	r24, Y+5	; 0x05
 7b6:	9e 81       	ldd	r25, Y+6	; 0x06
 7b8:	82 30       	cpi	r24, 0x02	; 2
 7ba:	91 05       	cpc	r25, r1
 7bc:	34 f4       	brge	.+12     	; 0x7ca <DIO_enuSetPinValue+0x5a>
 7be:	2d 81       	ldd	r18, Y+5	; 0x05
 7c0:	3e 81       	ldd	r19, Y+6	; 0x06
 7c2:	21 15       	cp	r18, r1
 7c4:	31 05       	cpc	r19, r1
 7c6:	71 f0       	breq	.+28     	; 0x7e4 <DIO_enuSetPinValue+0x74>
 7c8:	b0 c0       	rjmp	.+352    	; 0x92a <__stack+0xcb>
 7ca:	6d 81       	ldd	r22, Y+5	; 0x05
 7cc:	7e 81       	ldd	r23, Y+6	; 0x06
 7ce:	62 30       	cpi	r22, 0x02	; 2
 7d0:	71 05       	cpc	r23, r1
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <DIO_enuSetPinValue+0x66>
 7d4:	59 c0       	rjmp	.+178    	; 0x888 <__stack+0x29>
 7d6:	8d 81       	ldd	r24, Y+5	; 0x05
 7d8:	9e 81       	ldd	r25, Y+6	; 0x06
 7da:	83 30       	cpi	r24, 0x03	; 3
 7dc:	91 05       	cpc	r25, r1
 7de:	09 f4       	brne	.+2      	; 0x7e2 <DIO_enuSetPinValue+0x72>
 7e0:	7c c0       	rjmp	.+248    	; 0x8da <__stack+0x7b>
 7e2:	a3 c0       	rjmp	.+326    	; 0x92a <__stack+0xcb>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 7e4:	ab e3       	ldi	r26, 0x3B	; 59
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	eb e3       	ldi	r30, 0x3B	; 59
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	48 2f       	mov	r20, r24
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	02 c0       	rjmp	.+4      	; 0x800 <DIO_enuSetPinValue+0x90>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	2a 95       	dec	r18
 802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_enuSetPinValue+0x8c>
 804:	80 95       	com	r24
 806:	84 23       	and	r24, r20
 808:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
 80a:	ab e3       	ldi	r26, 0x3B	; 59
 80c:	b0 e0       	ldi	r27, 0x00	; 0
 80e:	eb e3       	ldi	r30, 0x3B	; 59
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	80 81       	ld	r24, Z
 814:	48 2f       	mov	r20, r24
 816:	8c 81       	ldd	r24, Y+4	; 0x04
 818:	28 2f       	mov	r18, r24
 81a:	30 e0       	ldi	r19, 0x00	; 0
 81c:	8b 81       	ldd	r24, Y+3	; 0x03
 81e:	88 2f       	mov	r24, r24
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	b9 01       	movw	r22, r18
 824:	02 c0       	rjmp	.+4      	; 0x82a <DIO_enuSetPinValue+0xba>
 826:	66 0f       	add	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	8a 95       	dec	r24
 82c:	e2 f7       	brpl	.-8      	; 0x826 <DIO_enuSetPinValue+0xb6>
 82e:	cb 01       	movw	r24, r22
 830:	84 2b       	or	r24, r20
 832:	8c 93       	st	X, r24
 834:	7a c0       	rjmp	.+244    	; 0x92a <__stack+0xcb>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 836:	a8 e3       	ldi	r26, 0x38	; 56
 838:	b0 e0       	ldi	r27, 0x00	; 0
 83a:	e8 e3       	ldi	r30, 0x38	; 56
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	48 2f       	mov	r20, r24
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	28 2f       	mov	r18, r24
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_enuSetPinValue+0xe2>
 84e:	88 0f       	add	r24, r24
 850:	99 1f       	adc	r25, r25
 852:	2a 95       	dec	r18
 854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_enuSetPinValue+0xde>
 856:	80 95       	com	r24
 858:	84 23       	and	r24, r20
 85a:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
 85c:	a8 e3       	ldi	r26, 0x38	; 56
 85e:	b0 e0       	ldi	r27, 0x00	; 0
 860:	e8 e3       	ldi	r30, 0x38	; 56
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	48 2f       	mov	r20, r24
 868:	8c 81       	ldd	r24, Y+4	; 0x04
 86a:	28 2f       	mov	r18, r24
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	8b 81       	ldd	r24, Y+3	; 0x03
 870:	88 2f       	mov	r24, r24
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	b9 01       	movw	r22, r18
 876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
 878:	66 0f       	add	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	8a 95       	dec	r24
 87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
 880:	cb 01       	movw	r24, r22
 882:	84 2b       	or	r24, r20
 884:	8c 93       	st	X, r24
 886:	51 c0       	rjmp	.+162    	; 0x92a <__stack+0xcb>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 888:	a5 e3       	ldi	r26, 0x35	; 53
 88a:	b0 e0       	ldi	r27, 0x00	; 0
 88c:	e5 e3       	ldi	r30, 0x35	; 53
 88e:	f0 e0       	ldi	r31, 0x00	; 0
 890:	80 81       	ld	r24, Z
 892:	48 2f       	mov	r20, r24
 894:	8b 81       	ldd	r24, Y+3	; 0x03
 896:	28 2f       	mov	r18, r24
 898:	30 e0       	ldi	r19, 0x00	; 0
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	2a 95       	dec	r18
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	80 95       	com	r24
 8aa:	84 23       	and	r24, r20
 8ac:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
 8ae:	a5 e3       	ldi	r26, 0x35	; 53
 8b0:	b0 e0       	ldi	r27, 0x00	; 0
 8b2:	e5 e3       	ldi	r30, 0x35	; 53
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	80 81       	ld	r24, Z
 8b8:	48 2f       	mov	r20, r24
 8ba:	8c 81       	ldd	r24, Y+4	; 0x04
 8bc:	28 2f       	mov	r18, r24
 8be:	30 e0       	ldi	r19, 0x00	; 0
 8c0:	8b 81       	ldd	r24, Y+3	; 0x03
 8c2:	88 2f       	mov	r24, r24
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	b9 01       	movw	r22, r18
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	8a 95       	dec	r24
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	cb 01       	movw	r24, r22
 8d4:	84 2b       	or	r24, r20
 8d6:	8c 93       	st	X, r24
 8d8:	28 c0       	rjmp	.+80     	; 0x92a <__stack+0xcb>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
 8da:	a2 e3       	ldi	r26, 0x32	; 50
 8dc:	b0 e0       	ldi	r27, 0x00	; 0
 8de:	e2 e3       	ldi	r30, 0x32	; 50
 8e0:	f0 e0       	ldi	r31, 0x00	; 0
 8e2:	80 81       	ld	r24, Z
 8e4:	48 2f       	mov	r20, r24
 8e6:	8b 81       	ldd	r24, Y+3	; 0x03
 8e8:	28 2f       	mov	r18, r24
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__stack+0x97>
 8f2:	88 0f       	add	r24, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	2a 95       	dec	r18
 8f8:	e2 f7       	brpl	.-8      	; 0x8f2 <__stack+0x93>
 8fa:	80 95       	com	r24
 8fc:	84 23       	and	r24, r20
 8fe:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
 900:	a2 e3       	ldi	r26, 0x32	; 50
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	e2 e3       	ldi	r30, 0x32	; 50
 906:	f0 e0       	ldi	r31, 0x00	; 0
 908:	80 81       	ld	r24, Z
 90a:	48 2f       	mov	r20, r24
 90c:	8c 81       	ldd	r24, Y+4	; 0x04
 90e:	28 2f       	mov	r18, r24
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	8b 81       	ldd	r24, Y+3	; 0x03
 914:	88 2f       	mov	r24, r24
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	b9 01       	movw	r22, r18
 91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
 91c:	66 0f       	add	r22, r22
 91e:	77 1f       	adc	r23, r23
 920:	8a 95       	dec	r24
 922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
 924:	cb 01       	movw	r24, r22
 926:	84 2b       	or	r24, r20
 928:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	89 83       	std	Y+1, r24	; 0x01
 92e:	02 c0       	rjmp	.+4      	; 0x934 <__stack+0xd5>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 930:	83 e0       	ldi	r24, 0x03	; 3
 932:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
 934:	89 81       	ldd	r24, Y+1	; 0x01
}
 936:	26 96       	adiw	r28, 0x06	; 6
 938:	0f b6       	in	r0, 0x3f	; 63
 93a:	f8 94       	cli
 93c:	de bf       	out	0x3e, r29	; 62
 93e:	0f be       	out	0x3f, r0	; 63
 940:	cd bf       	out	0x3d, r28	; 61
 942:	cf 91       	pop	r28
 944:	df 91       	pop	r29
 946:	08 95       	ret

00000948 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
 948:	df 93       	push	r29
 94a:	cf 93       	push	r28
 94c:	00 d0       	rcall	.+0      	; 0x94e <DIO_enuTogPin+0x6>
 94e:	00 d0       	rcall	.+0      	; 0x950 <DIO_enuTogPin+0x8>
 950:	0f 92       	push	r0
 952:	cd b7       	in	r28, 0x3d	; 61
 954:	de b7       	in	r29, 0x3e	; 62
 956:	8a 83       	std	Y+2, r24	; 0x02
 958:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
 95a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
 95c:	8a 81       	ldd	r24, Y+2	; 0x02
 95e:	84 30       	cpi	r24, 0x04	; 4
 960:	08 f0       	brcs	.+2      	; 0x964 <DIO_enuTogPin+0x1c>
 962:	75 c0       	rjmp	.+234    	; 0xa4e <DIO_enuTogPin+0x106>
 964:	8b 81       	ldd	r24, Y+3	; 0x03
 966:	88 30       	cpi	r24, 0x08	; 8
 968:	08 f0       	brcs	.+2      	; 0x96c <DIO_enuTogPin+0x24>
 96a:	71 c0       	rjmp	.+226    	; 0xa4e <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
 96c:	8a 81       	ldd	r24, Y+2	; 0x02
 96e:	28 2f       	mov	r18, r24
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	3d 83       	std	Y+5, r19	; 0x05
 974:	2c 83       	std	Y+4, r18	; 0x04
 976:	8c 81       	ldd	r24, Y+4	; 0x04
 978:	9d 81       	ldd	r25, Y+5	; 0x05
 97a:	81 30       	cpi	r24, 0x01	; 1
 97c:	91 05       	cpc	r25, r1
 97e:	49 f1       	breq	.+82     	; 0x9d2 <DIO_enuTogPin+0x8a>
 980:	2c 81       	ldd	r18, Y+4	; 0x04
 982:	3d 81       	ldd	r19, Y+5	; 0x05
 984:	22 30       	cpi	r18, 0x02	; 2
 986:	31 05       	cpc	r19, r1
 988:	2c f4       	brge	.+10     	; 0x994 <DIO_enuTogPin+0x4c>
 98a:	8c 81       	ldd	r24, Y+4	; 0x04
 98c:	9d 81       	ldd	r25, Y+5	; 0x05
 98e:	00 97       	sbiw	r24, 0x00	; 0
 990:	61 f0       	breq	.+24     	; 0x9aa <DIO_enuTogPin+0x62>
 992:	5a c0       	rjmp	.+180    	; 0xa48 <DIO_enuTogPin+0x100>
 994:	2c 81       	ldd	r18, Y+4	; 0x04
 996:	3d 81       	ldd	r19, Y+5	; 0x05
 998:	22 30       	cpi	r18, 0x02	; 2
 99a:	31 05       	cpc	r19, r1
 99c:	71 f1       	breq	.+92     	; 0x9fa <DIO_enuTogPin+0xb2>
 99e:	8c 81       	ldd	r24, Y+4	; 0x04
 9a0:	9d 81       	ldd	r25, Y+5	; 0x05
 9a2:	83 30       	cpi	r24, 0x03	; 3
 9a4:	91 05       	cpc	r25, r1
 9a6:	e9 f1       	breq	.+122    	; 0xa22 <DIO_enuTogPin+0xda>
 9a8:	4f c0       	rjmp	.+158    	; 0xa48 <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
 9aa:	aa e3       	ldi	r26, 0x3A	; 58
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	ea e3       	ldi	r30, 0x3A	; 58
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	48 2f       	mov	r20, r24
 9b6:	8b 81       	ldd	r24, Y+3	; 0x03
 9b8:	28 2f       	mov	r18, r24
 9ba:	30 e0       	ldi	r19, 0x00	; 0
 9bc:	81 e0       	ldi	r24, 0x01	; 1
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 2e       	mov	r0, r18
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_enuTogPin+0x80>
 9c4:	88 0f       	add	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	0a 94       	dec	r0
 9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_enuTogPin+0x7c>
 9cc:	84 27       	eor	r24, r20
 9ce:	8c 93       	st	X, r24
 9d0:	3b c0       	rjmp	.+118    	; 0xa48 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
 9d2:	a7 e3       	ldi	r26, 0x37	; 55
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	e7 e3       	ldi	r30, 0x37	; 55
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	48 2f       	mov	r20, r24
 9de:	8b 81       	ldd	r24, Y+3	; 0x03
 9e0:	28 2f       	mov	r18, r24
 9e2:	30 e0       	ldi	r19, 0x00	; 0
 9e4:	81 e0       	ldi	r24, 0x01	; 1
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	02 2e       	mov	r0, r18
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <DIO_enuTogPin+0xa8>
 9ec:	88 0f       	add	r24, r24
 9ee:	99 1f       	adc	r25, r25
 9f0:	0a 94       	dec	r0
 9f2:	e2 f7       	brpl	.-8      	; 0x9ec <DIO_enuTogPin+0xa4>
 9f4:	84 27       	eor	r24, r20
 9f6:	8c 93       	st	X, r24
 9f8:	27 c0       	rjmp	.+78     	; 0xa48 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
 9fa:	a4 e3       	ldi	r26, 0x34	; 52
 9fc:	b0 e0       	ldi	r27, 0x00	; 0
 9fe:	e4 e3       	ldi	r30, 0x34	; 52
 a00:	f0 e0       	ldi	r31, 0x00	; 0
 a02:	80 81       	ld	r24, Z
 a04:	48 2f       	mov	r20, r24
 a06:	8b 81       	ldd	r24, Y+3	; 0x03
 a08:	28 2f       	mov	r18, r24
 a0a:	30 e0       	ldi	r19, 0x00	; 0
 a0c:	81 e0       	ldi	r24, 0x01	; 1
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	02 2e       	mov	r0, r18
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <DIO_enuTogPin+0xd0>
 a14:	88 0f       	add	r24, r24
 a16:	99 1f       	adc	r25, r25
 a18:	0a 94       	dec	r0
 a1a:	e2 f7       	brpl	.-8      	; 0xa14 <DIO_enuTogPin+0xcc>
 a1c:	84 27       	eor	r24, r20
 a1e:	8c 93       	st	X, r24
 a20:	13 c0       	rjmp	.+38     	; 0xa48 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
 a22:	a1 e3       	ldi	r26, 0x31	; 49
 a24:	b0 e0       	ldi	r27, 0x00	; 0
 a26:	e1 e3       	ldi	r30, 0x31	; 49
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	80 81       	ld	r24, Z
 a2c:	48 2f       	mov	r20, r24
 a2e:	8b 81       	ldd	r24, Y+3	; 0x03
 a30:	28 2f       	mov	r18, r24
 a32:	30 e0       	ldi	r19, 0x00	; 0
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	02 2e       	mov	r0, r18
 a3a:	02 c0       	rjmp	.+4      	; 0xa40 <DIO_enuTogPin+0xf8>
 a3c:	88 0f       	add	r24, r24
 a3e:	99 1f       	adc	r25, r25
 a40:	0a 94       	dec	r0
 a42:	e2 f7       	brpl	.-8      	; 0xa3c <DIO_enuTogPin+0xf4>
 a44:	84 27       	eor	r24, r20
 a46:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	89 83       	std	Y+1, r24	; 0x01
 a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
 a4e:	83 e0       	ldi	r24, 0x03	; 3
 a50:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
 a52:	89 81       	ldd	r24, Y+1	; 0x01
}
 a54:	0f 90       	pop	r0
 a56:	0f 90       	pop	r0
 a58:	0f 90       	pop	r0
 a5a:	0f 90       	pop	r0
 a5c:	0f 90       	pop	r0
 a5e:	cf 91       	pop	r28
 a60:	df 91       	pop	r29
 a62:	08 95       	ret

00000a64 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
 a64:	df 93       	push	r29
 a66:	cf 93       	push	r28
 a68:	cd b7       	in	r28, 0x3d	; 61
 a6a:	de b7       	in	r29, 0x3e	; 62
 a6c:	27 97       	sbiw	r28, 0x07	; 7
 a6e:	0f b6       	in	r0, 0x3f	; 63
 a70:	f8 94       	cli
 a72:	de bf       	out	0x3e, r29	; 62
 a74:	0f be       	out	0x3f, r0	; 63
 a76:	cd bf       	out	0x3d, r28	; 61
 a78:	8a 83       	std	Y+2, r24	; 0x02
 a7a:	6b 83       	std	Y+3, r22	; 0x03
 a7c:	5d 83       	std	Y+5, r21	; 0x05
 a7e:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
 a80:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
 a82:	8c 81       	ldd	r24, Y+4	; 0x04
 a84:	9d 81       	ldd	r25, Y+5	; 0x05
 a86:	00 97       	sbiw	r24, 0x00	; 0
 a88:	09 f4       	brne	.+2      	; 0xa8c <DIO_enuGetPinValue+0x28>
 a8a:	7e c0       	rjmp	.+252    	; 0xb88 <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	84 30       	cpi	r24, 0x04	; 4
 a90:	08 f0       	brcs	.+2      	; 0xa94 <DIO_enuGetPinValue+0x30>
 a92:	77 c0       	rjmp	.+238    	; 0xb82 <DIO_enuGetPinValue+0x11e>
 a94:	8b 81       	ldd	r24, Y+3	; 0x03
 a96:	88 30       	cpi	r24, 0x08	; 8
 a98:	08 f0       	brcs	.+2      	; 0xa9c <DIO_enuGetPinValue+0x38>
 a9a:	73 c0       	rjmp	.+230    	; 0xb82 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
 a9c:	8a 81       	ldd	r24, Y+2	; 0x02
 a9e:	28 2f       	mov	r18, r24
 aa0:	30 e0       	ldi	r19, 0x00	; 0
 aa2:	3f 83       	std	Y+7, r19	; 0x07
 aa4:	2e 83       	std	Y+6, r18	; 0x06
 aa6:	4e 81       	ldd	r20, Y+6	; 0x06
 aa8:	5f 81       	ldd	r21, Y+7	; 0x07
 aaa:	41 30       	cpi	r20, 0x01	; 1
 aac:	51 05       	cpc	r21, r1
 aae:	59 f1       	breq	.+86     	; 0xb06 <DIO_enuGetPinValue+0xa2>
 ab0:	8e 81       	ldd	r24, Y+6	; 0x06
 ab2:	9f 81       	ldd	r25, Y+7	; 0x07
 ab4:	82 30       	cpi	r24, 0x02	; 2
 ab6:	91 05       	cpc	r25, r1
 ab8:	34 f4       	brge	.+12     	; 0xac6 <DIO_enuGetPinValue+0x62>
 aba:	2e 81       	ldd	r18, Y+6	; 0x06
 abc:	3f 81       	ldd	r19, Y+7	; 0x07
 abe:	21 15       	cp	r18, r1
 ac0:	31 05       	cpc	r19, r1
 ac2:	69 f0       	breq	.+26     	; 0xade <DIO_enuGetPinValue+0x7a>
 ac4:	5b c0       	rjmp	.+182    	; 0xb7c <DIO_enuGetPinValue+0x118>
 ac6:	4e 81       	ldd	r20, Y+6	; 0x06
 ac8:	5f 81       	ldd	r21, Y+7	; 0x07
 aca:	42 30       	cpi	r20, 0x02	; 2
 acc:	51 05       	cpc	r21, r1
 ace:	79 f1       	breq	.+94     	; 0xb2e <DIO_enuGetPinValue+0xca>
 ad0:	8e 81       	ldd	r24, Y+6	; 0x06
 ad2:	9f 81       	ldd	r25, Y+7	; 0x07
 ad4:	83 30       	cpi	r24, 0x03	; 3
 ad6:	91 05       	cpc	r25, r1
 ad8:	09 f4       	brne	.+2      	; 0xadc <DIO_enuGetPinValue+0x78>
 ada:	3d c0       	rjmp	.+122    	; 0xb56 <DIO_enuGetPinValue+0xf2>
 adc:	4f c0       	rjmp	.+158    	; 0xb7c <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
 ade:	e9 e3       	ldi	r30, 0x39	; 57
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	28 2f       	mov	r18, r24
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	8b 81       	ldd	r24, Y+3	; 0x03
 aea:	88 2f       	mov	r24, r24
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	a9 01       	movw	r20, r18
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <DIO_enuGetPinValue+0x92>
 af2:	55 95       	asr	r21
 af4:	47 95       	ror	r20
 af6:	8a 95       	dec	r24
 af8:	e2 f7       	brpl	.-8      	; 0xaf2 <DIO_enuGetPinValue+0x8e>
 afa:	ca 01       	movw	r24, r20
 afc:	81 70       	andi	r24, 0x01	; 1
 afe:	ec 81       	ldd	r30, Y+4	; 0x04
 b00:	fd 81       	ldd	r31, Y+5	; 0x05
 b02:	80 83       	st	Z, r24
 b04:	3b c0       	rjmp	.+118    	; 0xb7c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
 b06:	e6 e3       	ldi	r30, 0x36	; 54
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	28 2f       	mov	r18, r24
 b0e:	30 e0       	ldi	r19, 0x00	; 0
 b10:	8b 81       	ldd	r24, Y+3	; 0x03
 b12:	88 2f       	mov	r24, r24
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	a9 01       	movw	r20, r18
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_enuGetPinValue+0xba>
 b1a:	55 95       	asr	r21
 b1c:	47 95       	ror	r20
 b1e:	8a 95       	dec	r24
 b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_enuGetPinValue+0xb6>
 b22:	ca 01       	movw	r24, r20
 b24:	81 70       	andi	r24, 0x01	; 1
 b26:	ec 81       	ldd	r30, Y+4	; 0x04
 b28:	fd 81       	ldd	r31, Y+5	; 0x05
 b2a:	80 83       	st	Z, r24
 b2c:	27 c0       	rjmp	.+78     	; 0xb7c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
 b2e:	e3 e3       	ldi	r30, 0x33	; 51
 b30:	f0 e0       	ldi	r31, 0x00	; 0
 b32:	80 81       	ld	r24, Z
 b34:	28 2f       	mov	r18, r24
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	8b 81       	ldd	r24, Y+3	; 0x03
 b3a:	88 2f       	mov	r24, r24
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	a9 01       	movw	r20, r18
 b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_enuGetPinValue+0xe2>
 b42:	55 95       	asr	r21
 b44:	47 95       	ror	r20
 b46:	8a 95       	dec	r24
 b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_enuGetPinValue+0xde>
 b4a:	ca 01       	movw	r24, r20
 b4c:	81 70       	andi	r24, 0x01	; 1
 b4e:	ec 81       	ldd	r30, Y+4	; 0x04
 b50:	fd 81       	ldd	r31, Y+5	; 0x05
 b52:	80 83       	st	Z, r24
 b54:	13 c0       	rjmp	.+38     	; 0xb7c <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
 b56:	e0 e3       	ldi	r30, 0x30	; 48
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	80 81       	ld	r24, Z
 b5c:	28 2f       	mov	r18, r24
 b5e:	30 e0       	ldi	r19, 0x00	; 0
 b60:	8b 81       	ldd	r24, Y+3	; 0x03
 b62:	88 2f       	mov	r24, r24
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	a9 01       	movw	r20, r18
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_enuGetPinValue+0x10a>
 b6a:	55 95       	asr	r21
 b6c:	47 95       	ror	r20
 b6e:	8a 95       	dec	r24
 b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_enuGetPinValue+0x106>
 b72:	ca 01       	movw	r24, r20
 b74:	81 70       	andi	r24, 0x01	; 1
 b76:	ec 81       	ldd	r30, Y+4	; 0x04
 b78:	fd 81       	ldd	r31, Y+5	; 0x05
 b7a:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
 b7c:	81 e0       	ldi	r24, 0x01	; 1
 b7e:	89 83       	std	Y+1, r24	; 0x01
 b80:	05 c0       	rjmp	.+10     	; 0xb8c <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
 b82:	83 e0       	ldi	r24, 0x03	; 3
 b84:	89 83       	std	Y+1, r24	; 0x01
 b86:	02 c0       	rjmp	.+4      	; 0xb8c <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
 b88:	82 e0       	ldi	r24, 0x02	; 2
 b8a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
 b8c:	89 81       	ldd	r24, Y+1	; 0x01
}
 b8e:	27 96       	adiw	r28, 0x07	; 7
 b90:	0f b6       	in	r0, 0x3f	; 63
 b92:	f8 94       	cli
 b94:	de bf       	out	0x3e, r29	; 62
 b96:	0f be       	out	0x3f, r0	; 63
 b98:	cd bf       	out	0x3d, r28	; 61
 b9a:	cf 91       	pop	r28
 b9c:	df 91       	pop	r29
 b9e:	08 95       	ret

00000ba0 <SPI_voidInit>:
#include "SPI_Private.h"
#include "SPI_Interface.h"
#include "SPI_Configuration.h"

void SPI_voidInit(u8 Copy_u8SPIMode)
{
 ba0:	df 93       	push	r29
 ba2:	cf 93       	push	r28
 ba4:	0f 92       	push	r0
 ba6:	cd b7       	in	r28, 0x3d	; 61
 ba8:	de b7       	in	r29, 0x3e	; 62
 baa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SPIMode == SPI_MASTER_MODE)
 bac:	89 81       	ldd	r24, Y+1	; 0x01
 bae:	88 23       	and	r24, r24
 bb0:	91 f5       	brne	.+100    	; 0xc16 <SPI_voidInit+0x76>
	{
		//Set in master mode
		SET_BIT(SPCR , SPCR_MSTR);
 bb2:	ad e2       	ldi	r26, 0x2D	; 45
 bb4:	b0 e0       	ldi	r27, 0x00	; 0
 bb6:	ed e2       	ldi	r30, 0x2D	; 45
 bb8:	f0 e0       	ldi	r31, 0x00	; 0
 bba:	80 81       	ld	r24, Z
 bbc:	80 61       	ori	r24, 0x10	; 16
 bbe:	8c 93       	st	X, r24

		//Clock polarity -> rising
		CLR_BIT(SPCR , SPCR_CPOL);
 bc0:	ad e2       	ldi	r26, 0x2D	; 45
 bc2:	b0 e0       	ldi	r27, 0x00	; 0
 bc4:	ed e2       	ldi	r30, 0x2D	; 45
 bc6:	f0 e0       	ldi	r31, 0x00	; 0
 bc8:	80 81       	ld	r24, Z
 bca:	87 7f       	andi	r24, 0xF7	; 247
 bcc:	8c 93       	st	X, r24

		//Clock phase -> sample
		CLR_BIT(SPCR , SPCR_CPHA);
 bce:	ad e2       	ldi	r26, 0x2D	; 45
 bd0:	b0 e0       	ldi	r27, 0x00	; 0
 bd2:	ed e2       	ldi	r30, 0x2D	; 45
 bd4:	f0 e0       	ldi	r31, 0x00	; 0
 bd6:	80 81       	ld	r24, Z
 bd8:	8b 7f       	andi	r24, 0xFB	; 251
 bda:	8c 93       	st	X, r24

		//Set clock prescaler -> 64
		CLR_BIT(SPCR , SPCR_SPR0);
 bdc:	ad e2       	ldi	r26, 0x2D	; 45
 bde:	b0 e0       	ldi	r27, 0x00	; 0
 be0:	ed e2       	ldi	r30, 0x2D	; 45
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	8e 7f       	andi	r24, 0xFE	; 254
 be8:	8c 93       	st	X, r24
		SET_BIT(SPCR , SPCR_SPR1);
 bea:	ad e2       	ldi	r26, 0x2D	; 45
 bec:	b0 e0       	ldi	r27, 0x00	; 0
 bee:	ed e2       	ldi	r30, 0x2D	; 45
 bf0:	f0 e0       	ldi	r31, 0x00	; 0
 bf2:	80 81       	ld	r24, Z
 bf4:	82 60       	ori	r24, 0x02	; 2
 bf6:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X);
 bf8:	ae e2       	ldi	r26, 0x2E	; 46
 bfa:	b0 e0       	ldi	r27, 0x00	; 0
 bfc:	ee e2       	ldi	r30, 0x2E	; 46
 bfe:	f0 e0       	ldi	r31, 0x00	; 0
 c00:	80 81       	ld	r24, Z
 c02:	8e 7f       	andi	r24, 0xFE	; 254
 c04:	8c 93       	st	X, r24

		//SPI -> enable
		SET_BIT(SPCR , SPCR_SPE);
 c06:	ad e2       	ldi	r26, 0x2D	; 45
 c08:	b0 e0       	ldi	r27, 0x00	; 0
 c0a:	ed e2       	ldi	r30, 0x2D	; 45
 c0c:	f0 e0       	ldi	r31, 0x00	; 0
 c0e:	80 81       	ld	r24, Z
 c10:	80 64       	ori	r24, 0x40	; 64
 c12:	8c 93       	st	X, r24
 c14:	11 c0       	rjmp	.+34     	; 0xc38 <SPI_voidInit+0x98>

	}
	else if(Copy_u8SPIMode == SPI_SLAVE_MODE)
 c16:	89 81       	ldd	r24, Y+1	; 0x01
 c18:	81 30       	cpi	r24, 0x01	; 1
 c1a:	71 f4       	brne	.+28     	; 0xc38 <SPI_voidInit+0x98>
	{
		//Set in slave mode
		CLR_BIT(SPCR , SPCR_MSTR);
 c1c:	ad e2       	ldi	r26, 0x2D	; 45
 c1e:	b0 e0       	ldi	r27, 0x00	; 0
 c20:	ed e2       	ldi	r30, 0x2D	; 45
 c22:	f0 e0       	ldi	r31, 0x00	; 0
 c24:	80 81       	ld	r24, Z
 c26:	8f 7e       	andi	r24, 0xEF	; 239
 c28:	8c 93       	st	X, r24

		//SPI -> enable
		SET_BIT(SPCR , SPCR_SPE);
 c2a:	ad e2       	ldi	r26, 0x2D	; 45
 c2c:	b0 e0       	ldi	r27, 0x00	; 0
 c2e:	ed e2       	ldi	r30, 0x2D	; 45
 c30:	f0 e0       	ldi	r31, 0x00	; 0
 c32:	80 81       	ld	r24, Z
 c34:	80 64       	ori	r24, 0x40	; 64
 c36:	8c 93       	st	X, r24
	}
}
 c38:	0f 90       	pop	r0
 c3a:	cf 91       	pop	r28
 c3c:	df 91       	pop	r29
 c3e:	08 95       	ret

00000c40 <SPI_u8DataSendReceive>:

u8 SPI_u8DataSendReceive(u8 Copy_u8Data)
{
 c40:	df 93       	push	r29
 c42:	cf 93       	push	r28
 c44:	0f 92       	push	r0
 c46:	cd b7       	in	r28, 0x3d	; 61
 c48:	de b7       	in	r29, 0x3e	; 62
 c4a:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
 c4c:	ef e2       	ldi	r30, 0x2F	; 47
 c4e:	f0 e0       	ldi	r31, 0x00	; 0
 c50:	89 81       	ldd	r24, Y+1	; 0x01
 c52:	80 83       	st	Z, r24
	while(GET_BIT(SPSR , SPSR_SPIF) == 0);
 c54:	ee e2       	ldi	r30, 0x2E	; 46
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	80 81       	ld	r24, Z
 c5a:	88 23       	and	r24, r24
 c5c:	dc f7       	brge	.-10     	; 0xc54 <SPI_u8DataSendReceive+0x14>
	return SPDR;
 c5e:	ef e2       	ldi	r30, 0x2F	; 47
 c60:	f0 e0       	ldi	r31, 0x00	; 0
 c62:	80 81       	ld	r24, Z
}
 c64:	0f 90       	pop	r0
 c66:	cf 91       	pop	r28
 c68:	df 91       	pop	r29
 c6a:	08 95       	ret

00000c6c <main>:
#include "DIO_int.h"
#include "SPI_Interface.h"
#include "ADC_Interface.h"

void main()
{
 c6c:	df 93       	push	r29
 c6e:	cf 93       	push	r28
 c70:	0f 92       	push	r0
 c72:	cd b7       	in	r28, 0x3d	; 61
 c74:	de b7       	in	r29, 0x3e	; 62
	u8 Read;
	DIO_enuSetPinDirection(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8INPUT); //Sensor PIN
 c76:	80 e0       	ldi	r24, 0x00	; 0
 c78:	60 e0       	ldi	r22, 0x00	; 0
 c7a:	40 e0       	ldi	r20, 0x00	; 0
 c7c:	0e 94 cc 02 	call	0x598	; 0x598 <DIO_enuSetPinDirection>

	ADC_voidInit();
 c80:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	SPI_voidInit(SPI_SLAVE_MODE);
 c84:	81 e0       	ldi	r24, 0x01	; 1
 c86:	0e 94 d0 05 	call	0xba0	; 0xba0 <SPI_voidInit>

	while(1)
	{
		Read = ADC_u16ADCStartConvertPolling(0b00000);
 c8a:	80 e0       	ldi	r24, 0x00	; 0
 c8c:	0e 94 81 00 	call	0x102	; 0x102 <ADC_u16ADCStartConvertPolling>
 c90:	89 83       	std	Y+1, r24	; 0x01
		SPI_u8DataSendReceive((Read * 256) / 1023);
 c92:	89 81       	ldd	r24, Y+1	; 0x01
 c94:	88 2f       	mov	r24, r24
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	98 2f       	mov	r25, r24
 c9a:	88 27       	eor	r24, r24
 c9c:	2f ef       	ldi	r18, 0xFF	; 255
 c9e:	33 e0       	ldi	r19, 0x03	; 3
 ca0:	b9 01       	movw	r22, r18
 ca2:	0e 94 57 06 	call	0xcae	; 0xcae <__divmodhi4>
 ca6:	cb 01       	movw	r24, r22
 ca8:	0e 94 20 06 	call	0xc40	; 0xc40 <SPI_u8DataSendReceive>
 cac:	ee cf       	rjmp	.-36     	; 0xc8a <main+0x1e>

00000cae <__divmodhi4>:
 cae:	97 fb       	bst	r25, 7
 cb0:	09 2e       	mov	r0, r25
 cb2:	07 26       	eor	r0, r23
 cb4:	0a d0       	rcall	.+20     	; 0xcca <__divmodhi4_neg1>
 cb6:	77 fd       	sbrc	r23, 7
 cb8:	04 d0       	rcall	.+8      	; 0xcc2 <__divmodhi4_neg2>
 cba:	0c d0       	rcall	.+24     	; 0xcd4 <__udivmodhi4>
 cbc:	06 d0       	rcall	.+12     	; 0xcca <__divmodhi4_neg1>
 cbe:	00 20       	and	r0, r0
 cc0:	1a f4       	brpl	.+6      	; 0xcc8 <__divmodhi4_exit>

00000cc2 <__divmodhi4_neg2>:
 cc2:	70 95       	com	r23
 cc4:	61 95       	neg	r22
 cc6:	7f 4f       	sbci	r23, 0xFF	; 255

00000cc8 <__divmodhi4_exit>:
 cc8:	08 95       	ret

00000cca <__divmodhi4_neg1>:
 cca:	f6 f7       	brtc	.-4      	; 0xcc8 <__divmodhi4_exit>
 ccc:	90 95       	com	r25
 cce:	81 95       	neg	r24
 cd0:	9f 4f       	sbci	r25, 0xFF	; 255
 cd2:	08 95       	ret

00000cd4 <__udivmodhi4>:
 cd4:	aa 1b       	sub	r26, r26
 cd6:	bb 1b       	sub	r27, r27
 cd8:	51 e1       	ldi	r21, 0x11	; 17
 cda:	07 c0       	rjmp	.+14     	; 0xcea <__udivmodhi4_ep>

00000cdc <__udivmodhi4_loop>:
 cdc:	aa 1f       	adc	r26, r26
 cde:	bb 1f       	adc	r27, r27
 ce0:	a6 17       	cp	r26, r22
 ce2:	b7 07       	cpc	r27, r23
 ce4:	10 f0       	brcs	.+4      	; 0xcea <__udivmodhi4_ep>
 ce6:	a6 1b       	sub	r26, r22
 ce8:	b7 0b       	sbc	r27, r23

00000cea <__udivmodhi4_ep>:
 cea:	88 1f       	adc	r24, r24
 cec:	99 1f       	adc	r25, r25
 cee:	5a 95       	dec	r21
 cf0:	a9 f7       	brne	.-22     	; 0xcdc <__udivmodhi4_loop>
 cf2:	80 95       	com	r24
 cf4:	90 95       	com	r25
 cf6:	bc 01       	movw	r22, r24
 cf8:	cd 01       	movw	r24, r26
 cfa:	08 95       	ret

00000cfc <_exit>:
 cfc:	f8 94       	cli

00000cfe <__stop_program>:
 cfe:	ff cf       	rjmp	.-2      	; 0xcfe <__stop_program>
