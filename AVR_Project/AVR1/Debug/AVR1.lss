
AVR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  00002cbc  00002d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800172  00800172  00002e62  2**0
                  ALLOC
  3 .stab         0000294c  00000000  00000000  00002e64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fd9  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006789  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00006909  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00006adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00008aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00009c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ac5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000adfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000b0bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b96b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__vector_15>
      40:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c8 14 	call	0x2990	; 0x2990 <main>
      8a:	0c 94 5c 16 	jmp	0x2cb8	; 0x2cb8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 16 	jmp	0x2c82	; 0x2c82 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 49 16 	jmp	0x2c92	; 0x2c92 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 59       	subi	r30, 0x90	; 144
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <ADC_voidInit>:

//IDLE or BUSY
static u8 ADC_State = IDLE ;

void ADC_voidInit(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	87 7f       	andi	r24, 0xF7	; 247
     cea:	8c 93       	st	X, r24

	//ref -> AVCC
	SET_BIT(ADMUX , ADMUX_REFS0);
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 64       	ori	r24, 0x40	; 64
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX , ADMUX_REFS1);
     cfa:	a7 e2       	ldi	r26, 0x27	; 39
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e7 e2       	ldi	r30, 0x27	; 39
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8f 77       	andi	r24, 0x7F	; 127
     d06:	8c 93       	st	X, r24

	//Prescaler -> 128
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	81 60       	ori	r24, 0x01	; 1
     d14:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
     d16:	a6 e2       	ldi	r26, 0x26	; 38
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e6 e2       	ldi	r30, 0x26	; 38
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	80 81       	ld	r24, Z
     d20:	82 60       	ori	r24, 0x02	; 2
     d22:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
     d24:	a6 e2       	ldi	r26, 0x26	; 38
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e6 e2       	ldi	r30, 0x26	; 38
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	84 60       	ori	r24, 0x04	; 4
     d30:	8c 93       	st	X, r24

	//ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
     d32:	a6 e2       	ldi	r26, 0x26	; 38
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e6 e2       	ldi	r30, 0x26	; 38
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	80 68       	ori	r24, 0x80	; 128
     d3e:	8c 93       	st	X, r24
}
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <ADC_u16ADCStartConvertPolling>:

u16 ADC_u16ADCStartConvertPolling(u8 Copy_u8Channel)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	00 d0       	rcall	.+0      	; 0xd4c <ADC_u16ADCStartConvertPolling+0x6>
     d4c:	0f 92       	push	r0
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_Read = 0;
     d54:	1a 82       	std	Y+2, r1	; 0x02
     d56:	19 82       	std	Y+1, r1	; 0x01

	ADMUX &= 0b11100000;
     d58:	a7 e2       	ldi	r26, 0x27	; 39
     d5a:	b0 e0       	ldi	r27, 0x00	; 0
     d5c:	e7 e2       	ldi	r30, 0x27	; 39
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 7e       	andi	r24, 0xE0	; 224
     d64:	8c 93       	st	X, r24
	ADMUX |= Copy_u8Channel;
     d66:	a7 e2       	ldi	r26, 0x27	; 39
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e7 e2       	ldi	r30, 0x27	; 39
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	90 81       	ld	r25, Z
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	89 2b       	or	r24, r25
     d74:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA , ADCSRA_ADSC);
     d76:	a6 e2       	ldi	r26, 0x26	; 38
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e2       	ldi	r30, 0x26	; 38
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 64       	ori	r24, 0x40	; 64
     d82:	8c 93       	st	X, r24

	while(0 == GET_BIT(ADCSRA , ADCSRA_ADIF));
     d84:	e6 e2       	ldi	r30, 0x26	; 38
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	80 71       	andi	r24, 0x10	; 16
     d90:	90 70       	andi	r25, 0x00	; 0
     d92:	95 95       	asr	r25
     d94:	87 95       	ror	r24
     d96:	95 95       	asr	r25
     d98:	87 95       	ror	r24
     d9a:	95 95       	asr	r25
     d9c:	87 95       	ror	r24
     d9e:	95 95       	asr	r25
     da0:	87 95       	ror	r24
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	79 f3       	breq	.-34     	; 0xd84 <ADC_u16ADCStartConvertPolling+0x3e>

	ADC_Read = ADCLH;
     da6:	e4 e2       	ldi	r30, 0x24	; 36
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	91 81       	ldd	r25, Z+1	; 0x01
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01

	//CLR flag
	SET_BIT(ADCSRA , ADCSRA_ADSC);
     db2:	a6 e2       	ldi	r26, 0x26	; 38
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	e6 e2       	ldi	r30, 0x26	; 38
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	80 64       	ori	r24, 0x40	; 64
     dbe:	8c 93       	st	X, r24

	return ADC_Read;
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <ADC_u8ADCStartConvertInt>:

u8 ADC_u8ADCStartConvertInt(u8 Copy_u8Channel , u16 *pu16Reading , void(*ptrFunc)(void))
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <ADC_u8ADCStartConvertInt+0x6>
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <ADC_u8ADCStartConvertInt+0x8>
     dd8:	00 d0       	rcall	.+0      	; 0xdda <ADC_u8ADCStartConvertInt+0xa>
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	8a 83       	std	Y+2, r24	; 0x02
     de0:	7c 83       	std	Y+4, r23	; 0x04
     de2:	6b 83       	std	Y+3, r22	; 0x03
     de4:	5e 83       	std	Y+6, r21	; 0x06
     de6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8Error = ES_OK;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	89 83       	std	Y+1, r24	; 0x01
	if((ADC_State == IDLE) && (NULL != pu16Reading) && (NULL != ptrFunc))
     dec:	80 91 70 01 	lds	r24, 0x0170
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	a9 f5       	brne	.+106    	; 0xe5e <ADC_u8ADCStartConvertInt+0x8e>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	9c 81       	ldd	r25, Y+4	; 0x04
     df8:	00 97       	sbiw	r24, 0x00	; 0
     dfa:	89 f1       	breq	.+98     	; 0xe5e <ADC_u8ADCStartConvertInt+0x8e>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	69 f1       	breq	.+90     	; 0xe5e <ADC_u8ADCStartConvertInt+0x8e>
	{
		ADC_State = BUSY;
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	80 93 70 01 	sts	0x0170, r24
		Global_ptr = pu16Reading;
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	9c 81       	ldd	r25, Y+4	; 0x04
     e0e:	90 93 73 01 	sts	0x0173, r25
     e12:	80 93 72 01 	sts	0x0172, r24
		GlobalPtrFunc = ptrFunc;
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	90 93 75 01 	sts	0x0175, r25
     e1e:	80 93 74 01 	sts	0x0174, r24

		ADMUX &= 0b11100000;
     e22:	a7 e2       	ldi	r26, 0x27	; 39
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 7e       	andi	r24, 0xE0	; 224
     e2e:	8c 93       	st	X, r24
		ADMUX |= Copy_u8Channel;
     e30:	a7 e2       	ldi	r26, 0x27	; 39
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	e7 e2       	ldi	r30, 0x27	; 39
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	90 81       	ld	r25, Z
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	89 2b       	or	r24, r25
     e3e:	8c 93       	st	X, r24

		//Enable interrupt
		SET_BIT(ADCSRA , ADCSRA_ADIE);
     e40:	a6 e2       	ldi	r26, 0x26	; 38
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e6 e2       	ldi	r30, 0x26	; 38
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 60       	ori	r24, 0x08	; 8
     e4c:	8c 93       	st	X, r24

		//Start Conversion
		SET_BIT(ADCSRA , ADCSRA_ADSC);
     e4e:	a6 e2       	ldi	r26, 0x26	; 38
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e6 e2       	ldi	r30, 0x26	; 38
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	80 64       	ori	r24, 0x40	; 64
     e5a:	8c 93       	st	X, r24
     e5c:	01 c0       	rjmp	.+2      	; 0xe60 <ADC_u8ADCStartConvertInt+0x90>


	}
	else
	{
		Local_u8Error = ES_NOK;
     e5e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8Error;
     e60:	89 81       	ldd	r24, Y+1	; 0x01
}
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <__vector_16>:

void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	2f 93       	push	r18
     e80:	3f 93       	push	r19
     e82:	4f 93       	push	r20
     e84:	5f 93       	push	r21
     e86:	6f 93       	push	r22
     e88:	7f 93       	push	r23
     e8a:	8f 93       	push	r24
     e8c:	9f 93       	push	r25
     e8e:	af 93       	push	r26
     e90:	bf 93       	push	r27
     e92:	ef 93       	push	r30
     e94:	ff 93       	push	r31
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
	//Return Reading
	*Global_ptr = ADCLH;
     e9e:	a0 91 72 01 	lds	r26, 0x0172
     ea2:	b0 91 73 01 	lds	r27, 0x0173
     ea6:	e4 e2       	ldi	r30, 0x24	; 36
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	91 81       	ldd	r25, Z+1	; 0x01
     eae:	8d 93       	st	X+, r24
     eb0:	9c 93       	st	X, r25
	//Execute function
	GlobalPtrFunc();
     eb2:	e0 91 74 01 	lds	r30, 0x0174
     eb6:	f0 91 75 01 	lds	r31, 0x0175
     eba:	09 95       	icall
	//Disable interrupt
	CLR_BIT(ADCSRA , ADCSRA_ADIE);
     ebc:	a6 e2       	ldi	r26, 0x26	; 38
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	87 7f       	andi	r24, 0xF7	; 247
     ec8:	8c 93       	st	X, r24
	//Change state
	ADC_State = IDLE;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	80 93 70 01 	sts	0x0170, r24
}
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	ff 91       	pop	r31
     ed6:	ef 91       	pop	r30
     ed8:	bf 91       	pop	r27
     eda:	af 91       	pop	r26
     edc:	9f 91       	pop	r25
     ede:	8f 91       	pop	r24
     ee0:	7f 91       	pop	r23
     ee2:	6f 91       	pop	r22
     ee4:	5f 91       	pop	r21
     ee6:	4f 91       	pop	r20
     ee8:	3f 91       	pop	r19
     eea:	2f 91       	pop	r18
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <DIO_enuInit>:
 */

#include "DIO_int.h"

ES_t DIO_enuInit(void)
{
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
		ES_t Local_enuErrorstate = ES_NOK;
     f00:	19 82       	std	Y+1, r1	; 0x01
		DDRA = CONC(PA_PIN7_DIR,PA_PIN6_DIR,PA_PIN5_DIR,PA_PIN4_DIR,PA_PIN3_DIR,PA_PIN2_DIR,PA_PIN1_DIR,PA_PIN0_DIR);
     f02:	ea e3       	ldi	r30, 0x3A	; 58
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	80 83       	st	Z, r24
		DDRB = CONC(PB_PIN7_DIR,PB_PIN6_DIR,PB_PIN5_DIR,PB_PIN4_DIR,PB_PIN3_DIR,PB_PIN2_DIR,PB_PIN1_DIR,PB_PIN0_DIR);
     f0a:	e7 e3       	ldi	r30, 0x37	; 55
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	80 83       	st	Z, r24
		DDRC = CONC(PC_PIN7_DIR,PC_PIN6_DIR,PC_PIN5_DIR,PC_PIN4_DIR,PC_PIN3_DIR,PC_PIN2_DIR,PC_PIN1_DIR,PC_PIN0_DIR);
     f12:	e4 e3       	ldi	r30, 0x34	; 52
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	80 83       	st	Z, r24
		DDRD = CONC(PD_PIN7_DIR,PD_PIN6_DIR,PD_PIN5_DIR,PD_PIN4_DIR,PD_PIN3_DIR,PD_PIN2_DIR,PD_PIN1_DIR,PD_PIN0_DIR);
     f1a:	e1 e3       	ldi	r30, 0x31	; 49
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	80 83       	st	Z, r24

		PORTA = CONC(PA_PIN7_VAL,PA_PIN6_VAL,PA_PIN5_VAL,PA_PIN4_VAL,PA_PIN3_VAL,PA_PIN2_VAL,PA_PIN1_VAL,PA_PIN0_VAL);
     f22:	eb e3       	ldi	r30, 0x3B	; 59
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	10 82       	st	Z, r1
		PORTB = CONC(PB_PIN7_VAL,PB_PIN6_VAL,PB_PIN5_VAL,PB_PIN4_VAL,PB_PIN3_VAL,PB_PIN2_VAL,PB_PIN1_VAL,PB_PIN0_VAL);
     f28:	e8 e3       	ldi	r30, 0x38	; 56
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	10 82       	st	Z, r1
		PORTC = CONC(PC_PIN7_VAL,PC_PIN6_VAL,PC_PIN5_VAL,PC_PIN4_VAL,PC_PIN3_VAL,PC_PIN2_VAL,PC_PIN1_VAL,PC_PIN0_VAL);
     f2e:	e5 e3       	ldi	r30, 0x35	; 53
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	10 82       	st	Z, r1
		PORTD = CONC(PD_PIN7_VAL,PD_PIN6_VAL,PD_PIN5_VAL,PD_PIN4_VAL,PD_PIN3_VAL,PD_PIN2_VAL,PD_PIN1_VAL,PD_PIN0_VAL);
     f34:	e2 e3       	ldi	r30, 0x32	; 50
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	10 82       	st	Z, r1

		Local_enuErrorstate = ES_OK;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	89 83       	std	Y+1, r24	; 0x01

		return Local_enuErrorstate;
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_enuSetPortDirection>:

ES_t DIO_enuSetPortDirection(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_enuSetPortDirection+0x6>
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <DIO_enuSetPortDirection+0x8>
     f50:	0f 92       	push	r0
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
     f56:	8a 83       	std	Y+2, r24	; 0x02
     f58:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     f5a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	84 30       	cpi	r24, 0x04	; 4
     f60:	a8 f5       	brcc	.+106    	; 0xfcc <DIO_enuSetPortDirection+0x84>
	{
		switch(Copy_u8PortID)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3d 83       	std	Y+5, r19	; 0x05
     f6a:	2c 83       	std	Y+4, r18	; 0x04
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	d1 f0       	breq	.+52     	; 0xfaa <DIO_enuSetPortDirection+0x62>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <DIO_enuSetPortDirection+0x42>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	61 f0       	breq	.+24     	; 0xfa0 <DIO_enuSetPortDirection+0x58>
     f88:	1e c0       	rjmp	.+60     	; 0xfc6 <DIO_enuSetPortDirection+0x7e>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	81 f0       	breq	.+32     	; 0xfb4 <DIO_enuSetPortDirection+0x6c>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	81 f0       	breq	.+32     	; 0xfbe <DIO_enuSetPortDirection+0x76>
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <DIO_enuSetPortDirection+0x7e>
		{
		case DIO_PORTA:
			DDRA = Copy_u8Value;
     fa0:	ea e3       	ldi	r30, 0x3A	; 58
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	80 83       	st	Z, r24
     fa8:	0e c0       	rjmp	.+28     	; 0xfc6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTB:
			DDRB = Copy_u8Value;
     faa:	e7 e3       	ldi	r30, 0x37	; 55
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	80 83       	st	Z, r24
     fb2:	09 c0       	rjmp	.+18     	; 0xfc6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTC:
			DDRC = Copy_u8Value;
     fb4:	e4 e3       	ldi	r30, 0x34	; 52
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	80 83       	st	Z, r24
     fbc:	04 c0       	rjmp	.+8      	; 0xfc6 <DIO_enuSetPortDirection+0x7e>
			break;
		case DIO_PORTD:
			DDRD = Copy_u8Value;
     fbe:	e1 e3       	ldi	r30, 0x31	; 49
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	80 83       	st	Z, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_enuSetPortDirection+0x88>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <DIO_enuSetPortValue>:

ES_t DIO_enuSetPortValue(u8 Copy_u8PortID , u8 Copy_u8Value)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <DIO_enuSetPortValue+0x6>
     fe8:	00 d0       	rcall	.+0      	; 0xfea <DIO_enuSetPortValue+0x8>
     fea:	0f 92       	push	r0
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
     ff0:	8a 83       	std	Y+2, r24	; 0x02
     ff2:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     ff4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	a8 f5       	brcc	.+106    	; 0x1066 <DIO_enuSetPortValue+0x84>
		{
			switch(Copy_u8PortID)
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	3d 83       	std	Y+5, r19	; 0x05
    1004:	2c 83       	std	Y+4, r18	; 0x04
    1006:	8c 81       	ldd	r24, Y+4	; 0x04
    1008:	9d 81       	ldd	r25, Y+5	; 0x05
    100a:	81 30       	cpi	r24, 0x01	; 1
    100c:	91 05       	cpc	r25, r1
    100e:	d1 f0       	breq	.+52     	; 0x1044 <DIO_enuSetPortValue+0x62>
    1010:	2c 81       	ldd	r18, Y+4	; 0x04
    1012:	3d 81       	ldd	r19, Y+5	; 0x05
    1014:	22 30       	cpi	r18, 0x02	; 2
    1016:	31 05       	cpc	r19, r1
    1018:	2c f4       	brge	.+10     	; 0x1024 <DIO_enuSetPortValue+0x42>
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	61 f0       	breq	.+24     	; 0x103a <DIO_enuSetPortValue+0x58>
    1022:	1e c0       	rjmp	.+60     	; 0x1060 <DIO_enuSetPortValue+0x7e>
    1024:	2c 81       	ldd	r18, Y+4	; 0x04
    1026:	3d 81       	ldd	r19, Y+5	; 0x05
    1028:	22 30       	cpi	r18, 0x02	; 2
    102a:	31 05       	cpc	r19, r1
    102c:	81 f0       	breq	.+32     	; 0x104e <DIO_enuSetPortValue+0x6c>
    102e:	8c 81       	ldd	r24, Y+4	; 0x04
    1030:	9d 81       	ldd	r25, Y+5	; 0x05
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	81 f0       	breq	.+32     	; 0x1058 <DIO_enuSetPortValue+0x76>
    1038:	13 c0       	rjmp	.+38     	; 0x1060 <DIO_enuSetPortValue+0x7e>
			{
			case DIO_PORTA:
				PORTA = Copy_u8Value;
    103a:	eb e3       	ldi	r30, 0x3B	; 59
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	80 83       	st	Z, r24
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTB:
				PORTB = Copy_u8Value;
    1044:	e8 e3       	ldi	r30, 0x38	; 56
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	80 83       	st	Z, r24
    104c:	09 c0       	rjmp	.+18     	; 0x1060 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTC:
				PORTC = Copy_u8Value;
    104e:	e5 e3       	ldi	r30, 0x35	; 53
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	80 83       	st	Z, r24
    1056:	04 c0       	rjmp	.+8      	; 0x1060 <DIO_enuSetPortValue+0x7e>
				break;
			case DIO_PORTD:
				PORTD = Copy_u8Value;
    1058:	e2 e3       	ldi	r30, 0x32	; 50
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_enuSetPortValue+0x88>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1066:	83 e0       	ldi	r24, 0x03	; 3
    1068:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    106a:	89 81       	ldd	r24, Y+1	; 0x01
}
    106c:	0f 90       	pop	r0
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <DIO_enuTogPort>:

ES_t DIO_enuTogPort(u8 Copy_u8PortID)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <DIO_enuTogPort+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <DIO_enuTogPort+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD)
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	84 30       	cpi	r24, 0x04	; 4
    1090:	08 f0       	brcs	.+2      	; 0x1094 <DIO_enuTogPort+0x18>
    1092:	41 c0       	rjmp	.+130    	; 0x1116 <DIO_enuTogPort+0x9a>
		{
			switch(Copy_u8PortID)
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	3c 83       	std	Y+4, r19	; 0x04
    109c:	2b 83       	std	Y+3, r18	; 0x03
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	91 05       	cpc	r25, r1
    10a6:	e9 f0       	breq	.+58     	; 0x10e2 <DIO_enuTogPort+0x66>
    10a8:	2b 81       	ldd	r18, Y+3	; 0x03
    10aa:	3c 81       	ldd	r19, Y+4	; 0x04
    10ac:	22 30       	cpi	r18, 0x02	; 2
    10ae:	31 05       	cpc	r19, r1
    10b0:	2c f4       	brge	.+10     	; 0x10bc <DIO_enuTogPort+0x40>
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	61 f0       	breq	.+24     	; 0x10d2 <DIO_enuTogPort+0x56>
    10ba:	2a c0       	rjmp	.+84     	; 0x1110 <DIO_enuTogPort+0x94>
    10bc:	2b 81       	ldd	r18, Y+3	; 0x03
    10be:	3c 81       	ldd	r19, Y+4	; 0x04
    10c0:	22 30       	cpi	r18, 0x02	; 2
    10c2:	31 05       	cpc	r19, r1
    10c4:	b1 f0       	breq	.+44     	; 0x10f2 <DIO_enuTogPort+0x76>
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	83 30       	cpi	r24, 0x03	; 3
    10cc:	91 05       	cpc	r25, r1
    10ce:	c9 f0       	breq	.+50     	; 0x1102 <DIO_enuTogPort+0x86>
    10d0:	1f c0       	rjmp	.+62     	; 0x1110 <DIO_enuTogPort+0x94>
			{
			case DIO_PORTA:
				PORTA = ~PORTA;
    10d2:	ab e3       	ldi	r26, 0x3B	; 59
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	eb e3       	ldi	r30, 0x3B	; 59
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 95       	com	r24
    10de:	8c 93       	st	X, r24
    10e0:	17 c0       	rjmp	.+46     	; 0x1110 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTB:
				PORTB = ~PORTB;
    10e2:	a8 e3       	ldi	r26, 0x38	; 56
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e8 e3       	ldi	r30, 0x38	; 56
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	80 95       	com	r24
    10ee:	8c 93       	st	X, r24
    10f0:	0f c0       	rjmp	.+30     	; 0x1110 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTC:
				PORTC = ~PORTC;
    10f2:	a5 e3       	ldi	r26, 0x35	; 53
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 95       	com	r24
    10fe:	8c 93       	st	X, r24
    1100:	07 c0       	rjmp	.+14     	; 0x1110 <DIO_enuTogPort+0x94>
				break;
			case DIO_PORTD:
				PORTD = ~PORTD;
    1102:	a2 e3       	ldi	r26, 0x32	; 50
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	e2 e3       	ldi	r30, 0x32	; 50
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	80 95       	com	r24
    110e:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_enuTogPort+0x9e>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1116:	83 e0       	ldi	r24, 0x03	; 3
    1118:	89 83       	std	Y+1, r24	; 0x01
		}
		return Local_enuErrorState;
    111a:	89 81       	ldd	r24, Y+1	; 0x01
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	08 95       	ret

0000112a <DIO_enuGetPortValue>:

ES_t DIO_enuGetPortValue(u8 Copy_u8PortID , u8 *Copy_u8Value)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	00 d0       	rcall	.+0      	; 0x1130 <DIO_enuGetPortValue+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <DIO_enuGetPortValue+0x8>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <DIO_enuGetPortValue+0xa>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	7c 83       	std	Y+4, r23	; 0x04
    113c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    113e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	09 f4       	brne	.+2      	; 0x114a <DIO_enuGetPortValue+0x20>
    1148:	43 c0       	rjmp	.+134    	; 0x11d0 <DIO_enuGetPortValue+0xa6>
	{
		if(Copy_u8PortID <= DIO_PORTD)
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	84 30       	cpi	r24, 0x04	; 4
    114e:	e8 f5       	brcc	.+122    	; 0x11ca <DIO_enuGetPortValue+0xa0>
			{
				switch(Copy_u8PortID)
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3e 83       	std	Y+6, r19	; 0x06
    1158:	2d 83       	std	Y+5, r18	; 0x05
    115a:	8d 81       	ldd	r24, Y+5	; 0x05
    115c:	9e 81       	ldd	r25, Y+6	; 0x06
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	91 05       	cpc	r25, r1
    1162:	e1 f0       	breq	.+56     	; 0x119c <DIO_enuGetPortValue+0x72>
    1164:	2d 81       	ldd	r18, Y+5	; 0x05
    1166:	3e 81       	ldd	r19, Y+6	; 0x06
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	2c f4       	brge	.+10     	; 0x1178 <DIO_enuGetPortValue+0x4e>
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	00 97       	sbiw	r24, 0x00	; 0
    1174:	61 f0       	breq	.+24     	; 0x118e <DIO_enuGetPortValue+0x64>
    1176:	26 c0       	rjmp	.+76     	; 0x11c4 <DIO_enuGetPortValue+0x9a>
    1178:	2d 81       	ldd	r18, Y+5	; 0x05
    117a:	3e 81       	ldd	r19, Y+6	; 0x06
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	a1 f0       	breq	.+40     	; 0x11aa <DIO_enuGetPortValue+0x80>
    1182:	8d 81       	ldd	r24, Y+5	; 0x05
    1184:	9e 81       	ldd	r25, Y+6	; 0x06
    1186:	83 30       	cpi	r24, 0x03	; 3
    1188:	91 05       	cpc	r25, r1
    118a:	b1 f0       	breq	.+44     	; 0x11b8 <DIO_enuGetPortValue+0x8e>
    118c:	1b c0       	rjmp	.+54     	; 0x11c4 <DIO_enuGetPortValue+0x9a>
				{
				case DIO_PORTA:
					*Copy_u8Value = PINA;
    118e:	e9 e3       	ldi	r30, 0x39	; 57
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	eb 81       	ldd	r30, Y+3	; 0x03
    1196:	fc 81       	ldd	r31, Y+4	; 0x04
    1198:	80 83       	st	Z, r24
    119a:	14 c0       	rjmp	.+40     	; 0x11c4 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTB:
					*Copy_u8Value = PINB;
    119c:	e6 e3       	ldi	r30, 0x36	; 54
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	eb 81       	ldd	r30, Y+3	; 0x03
    11a4:	fc 81       	ldd	r31, Y+4	; 0x04
    11a6:	80 83       	st	Z, r24
    11a8:	0d c0       	rjmp	.+26     	; 0x11c4 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTC:
					*Copy_u8Value = PINC;
    11aa:	e3 e3       	ldi	r30, 0x33	; 51
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	eb 81       	ldd	r30, Y+3	; 0x03
    11b2:	fc 81       	ldd	r31, Y+4	; 0x04
    11b4:	80 83       	st	Z, r24
    11b6:	06 c0       	rjmp	.+12     	; 0x11c4 <DIO_enuGetPortValue+0x9a>
					break;
				case DIO_PORTD:
					*Copy_u8Value = PIND;
    11b8:	e0 e3       	ldi	r30, 0x30	; 48
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	eb 81       	ldd	r30, Y+3	; 0x03
    11c0:	fc 81       	ldd	r31, Y+4	; 0x04
    11c2:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	89 83       	std	Y+1, r24	; 0x01
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <DIO_enuGetPortValue+0xaa>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    11ca:	83 e0       	ldi	r24, 0x03	; 3
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_enuGetPortValue+0xaa>
			}

	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11d6:	26 96       	adiw	r28, 0x06	; 6
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	de bf       	out	0x3e, r29	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	cd bf       	out	0x3d, r28	; 61
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <DIO_enuSetPinDirection+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <DIO_enuSetPinDirection+0x8>
    11f0:	00 d0       	rcall	.+0      	; 0x11f2 <DIO_enuSetPinDirection+0xa>
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	8a 83       	std	Y+2, r24	; 0x02
    11f8:	6b 83       	std	Y+3, r22	; 0x03
    11fa:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    11fc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	84 30       	cpi	r24, 0x04	; 4
    1202:	08 f0       	brcs	.+2      	; 0x1206 <DIO_enuSetPinDirection+0x1e>
    1204:	d1 c0       	rjmp	.+418    	; 0x13a8 <DIO_enuSetPinDirection+0x1c0>
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	88 30       	cpi	r24, 0x08	; 8
    120a:	08 f0       	brcs	.+2      	; 0x120e <DIO_enuSetPinDirection+0x26>
    120c:	cd c0       	rjmp	.+410    	; 0x13a8 <DIO_enuSetPinDirection+0x1c0>
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	08 f0       	brcs	.+2      	; 0x1216 <DIO_enuSetPinDirection+0x2e>
    1214:	c9 c0       	rjmp	.+402    	; 0x13a8 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	3e 83       	std	Y+6, r19	; 0x06
    121e:	2d 83       	std	Y+5, r18	; 0x05
    1220:	6d 81       	ldd	r22, Y+5	; 0x05
    1222:	7e 81       	ldd	r23, Y+6	; 0x06
    1224:	61 30       	cpi	r22, 0x01	; 1
    1226:	71 05       	cpc	r23, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_enuSetPinDirection+0x44>
    122a:	41 c0       	rjmp	.+130    	; 0x12ae <DIO_enuSetPinDirection+0xc6>
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	82 30       	cpi	r24, 0x02	; 2
    1232:	91 05       	cpc	r25, r1
    1234:	34 f4       	brge	.+12     	; 0x1242 <DIO_enuSetPinDirection+0x5a>
    1236:	2d 81       	ldd	r18, Y+5	; 0x05
    1238:	3e 81       	ldd	r19, Y+6	; 0x06
    123a:	21 15       	cp	r18, r1
    123c:	31 05       	cpc	r19, r1
    123e:	71 f0       	breq	.+28     	; 0x125c <DIO_enuSetPinDirection+0x74>
    1240:	b0 c0       	rjmp	.+352    	; 0x13a2 <DIO_enuSetPinDirection+0x1ba>
    1242:	6d 81       	ldd	r22, Y+5	; 0x05
    1244:	7e 81       	ldd	r23, Y+6	; 0x06
    1246:	62 30       	cpi	r22, 0x02	; 2
    1248:	71 05       	cpc	r23, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <DIO_enuSetPinDirection+0x66>
    124c:	59 c0       	rjmp	.+178    	; 0x1300 <DIO_enuSetPinDirection+0x118>
    124e:	8d 81       	ldd	r24, Y+5	; 0x05
    1250:	9e 81       	ldd	r25, Y+6	; 0x06
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	09 f4       	brne	.+2      	; 0x125a <DIO_enuSetPinDirection+0x72>
    1258:	7c c0       	rjmp	.+248    	; 0x1352 <DIO_enuSetPinDirection+0x16a>
    125a:	a3 c0       	rjmp	.+326    	; 0x13a2 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_PORTA:
			DDRA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    125c:	aa e3       	ldi	r26, 0x3A	; 58
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	ea e3       	ldi	r30, 0x3A	; 58
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	48 2f       	mov	r20, r24
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_enuSetPinDirection+0x90>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	2a 95       	dec	r18
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_enuSetPinDirection+0x8c>
    127c:	80 95       	com	r24
    127e:	84 23       	and	r24, r20
    1280:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value<<Copy_u8PinID);
    1282:	aa e3       	ldi	r26, 0x3A	; 58
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	ea e3       	ldi	r30, 0x3A	; 58
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	48 2f       	mov	r20, r24
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	b9 01       	movw	r22, r18
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <DIO_enuSetPinDirection+0xba>
    129e:	66 0f       	add	r22, r22
    12a0:	77 1f       	adc	r23, r23
    12a2:	8a 95       	dec	r24
    12a4:	e2 f7       	brpl	.-8      	; 0x129e <DIO_enuSetPinDirection+0xb6>
    12a6:	cb 01       	movw	r24, r22
    12a8:	84 2b       	or	r24, r20
    12aa:	8c 93       	st	X, r24
    12ac:	7a c0       	rjmp	.+244    	; 0x13a2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTB:
			DDRB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    12ae:	a7 e3       	ldi	r26, 0x37	; 55
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e7 e3       	ldi	r30, 0x37	; 55
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_enuSetPinDirection+0xe2>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	2a 95       	dec	r18
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_enuSetPinDirection+0xde>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value<<Copy_u8PinID);
    12d4:	a7 e3       	ldi	r26, 0x37	; 55
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e7 e3       	ldi	r30, 0x37	; 55
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8c 81       	ldd	r24, Y+4	; 0x04
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	88 2f       	mov	r24, r24
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	b9 01       	movw	r22, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_enuSetPinDirection+0x10c>
    12f0:	66 0f       	add	r22, r22
    12f2:	77 1f       	adc	r23, r23
    12f4:	8a 95       	dec	r24
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_enuSetPinDirection+0x108>
    12f8:	cb 01       	movw	r24, r22
    12fa:	84 2b       	or	r24, r20
    12fc:	8c 93       	st	X, r24
    12fe:	51 c0       	rjmp	.+162    	; 0x13a2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTC:
			DDRC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1300:	a4 e3       	ldi	r26, 0x34	; 52
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	e4 e3       	ldi	r30, 0x34	; 52
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	48 2f       	mov	r20, r24
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_enuSetPinDirection+0x134>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	2a 95       	dec	r18
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_enuSetPinDirection+0x130>
    1320:	80 95       	com	r24
    1322:	84 23       	and	r24, r20
    1324:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value<<Copy_u8PinID);
    1326:	a4 e3       	ldi	r26, 0x34	; 52
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e4 e3       	ldi	r30, 0x34	; 52
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	b9 01       	movw	r22, r18
    1340:	02 c0       	rjmp	.+4      	; 0x1346 <DIO_enuSetPinDirection+0x15e>
    1342:	66 0f       	add	r22, r22
    1344:	77 1f       	adc	r23, r23
    1346:	8a 95       	dec	r24
    1348:	e2 f7       	brpl	.-8      	; 0x1342 <DIO_enuSetPinDirection+0x15a>
    134a:	cb 01       	movw	r24, r22
    134c:	84 2b       	or	r24, r20
    134e:	8c 93       	st	X, r24
    1350:	28 c0       	rjmp	.+80     	; 0x13a2 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_PORTD:
			DDRD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1352:	a1 e3       	ldi	r26, 0x31	; 49
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	e1 e3       	ldi	r30, 0x31	; 49
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8b 81       	ldd	r24, Y+3	; 0x03
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_enuSetPinDirection+0x186>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	2a 95       	dec	r18
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_enuSetPinDirection+0x182>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value<<Copy_u8PinID);
    1378:	a1 e3       	ldi	r26, 0x31	; 49
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 2f       	mov	r24, r24
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	b9 01       	movw	r22, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_enuSetPinDirection+0x1b0>
    1394:	66 0f       	add	r22, r22
    1396:	77 1f       	adc	r23, r23
    1398:	8a 95       	dec	r24
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_enuSetPinDirection+0x1ac>
    139c:	cb 01       	movw	r24, r22
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    13a8:	83 e0       	ldi	r24, 0x03	; 3
    13aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ae:	26 96       	adiw	r28, 0x06	; 6
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <DIO_enuSetPinValue+0x6>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <DIO_enuSetPinValue+0x8>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <DIO_enuSetPinValue+0xa>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    13d0:	6b 83       	std	Y+3, r22	; 0x03
    13d2:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    13d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	84 30       	cpi	r24, 0x04	; 4
    13da:	08 f0       	brcs	.+2      	; 0x13de <DIO_enuSetPinValue+0x1e>
    13dc:	d1 c0       	rjmp	.+418    	; 0x1580 <DIO_enuSetPinValue+0x1c0>
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <DIO_enuSetPinValue+0x26>
    13e4:	cd c0       	rjmp	.+410    	; 0x1580 <DIO_enuSetPinValue+0x1c0>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	82 30       	cpi	r24, 0x02	; 2
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_enuSetPinValue+0x2e>
    13ec:	c9 c0       	rjmp	.+402    	; 0x1580 <DIO_enuSetPinValue+0x1c0>
		{
			switch(Copy_u8PortID)
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3e 83       	std	Y+6, r19	; 0x06
    13f6:	2d 83       	std	Y+5, r18	; 0x05
    13f8:	6d 81       	ldd	r22, Y+5	; 0x05
    13fa:	7e 81       	ldd	r23, Y+6	; 0x06
    13fc:	61 30       	cpi	r22, 0x01	; 1
    13fe:	71 05       	cpc	r23, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <DIO_enuSetPinValue+0x44>
    1402:	41 c0       	rjmp	.+130    	; 0x1486 <DIO_enuSetPinValue+0xc6>
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	91 05       	cpc	r25, r1
    140c:	34 f4       	brge	.+12     	; 0x141a <DIO_enuSetPinValue+0x5a>
    140e:	2d 81       	ldd	r18, Y+5	; 0x05
    1410:	3e 81       	ldd	r19, Y+6	; 0x06
    1412:	21 15       	cp	r18, r1
    1414:	31 05       	cpc	r19, r1
    1416:	71 f0       	breq	.+28     	; 0x1434 <DIO_enuSetPinValue+0x74>
    1418:	b0 c0       	rjmp	.+352    	; 0x157a <DIO_enuSetPinValue+0x1ba>
    141a:	6d 81       	ldd	r22, Y+5	; 0x05
    141c:	7e 81       	ldd	r23, Y+6	; 0x06
    141e:	62 30       	cpi	r22, 0x02	; 2
    1420:	71 05       	cpc	r23, r1
    1422:	09 f4       	brne	.+2      	; 0x1426 <DIO_enuSetPinValue+0x66>
    1424:	59 c0       	rjmp	.+178    	; 0x14d8 <DIO_enuSetPinValue+0x118>
    1426:	8d 81       	ldd	r24, Y+5	; 0x05
    1428:	9e 81       	ldd	r25, Y+6	; 0x06
    142a:	83 30       	cpi	r24, 0x03	; 3
    142c:	91 05       	cpc	r25, r1
    142e:	09 f4       	brne	.+2      	; 0x1432 <DIO_enuSetPinValue+0x72>
    1430:	7c c0       	rjmp	.+248    	; 0x152a <DIO_enuSetPinValue+0x16a>
    1432:	a3 c0       	rjmp	.+326    	; 0x157a <DIO_enuSetPinValue+0x1ba>
			{
			case DIO_PORTA:
				PORTA &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1434:	ab e3       	ldi	r26, 0x3B	; 59
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	eb e3       	ldi	r30, 0x3B	; 59
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	48 2f       	mov	r20, r24
    1440:	8b 81       	ldd	r24, Y+3	; 0x03
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_enuSetPinValue+0x90>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	2a 95       	dec	r18
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_enuSetPinValue+0x8c>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
				PORTA |= (Copy_u8Value<<Copy_u8PinID);
    145a:	ab e3       	ldi	r26, 0x3B	; 59
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	eb e3       	ldi	r30, 0x3B	; 59
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8c 81       	ldd	r24, Y+4	; 0x04
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	b9 01       	movw	r22, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_enuSetPinValue+0xba>
    1476:	66 0f       	add	r22, r22
    1478:	77 1f       	adc	r23, r23
    147a:	8a 95       	dec	r24
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_enuSetPinValue+0xb6>
    147e:	cb 01       	movw	r24, r22
    1480:	84 2b       	or	r24, r20
    1482:	8c 93       	st	X, r24
    1484:	7a c0       	rjmp	.+244    	; 0x157a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTB:
				PORTB &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    1486:	a8 e3       	ldi	r26, 0x38	; 56
    1488:	b0 e0       	ldi	r27, 0x00	; 0
    148a:	e8 e3       	ldi	r30, 0x38	; 56
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	48 2f       	mov	r20, r24
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <DIO_enuSetPinValue+0xe2>
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	2a 95       	dec	r18
    14a4:	e2 f7       	brpl	.-8      	; 0x149e <DIO_enuSetPinValue+0xde>
    14a6:	80 95       	com	r24
    14a8:	84 23       	and	r24, r20
    14aa:	8c 93       	st	X, r24
				PORTB |= (Copy_u8Value<<Copy_u8PinID);
    14ac:	a8 e3       	ldi	r26, 0x38	; 56
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	80 81       	ld	r24, Z
    14b6:	48 2f       	mov	r20, r24
    14b8:	8c 81       	ldd	r24, Y+4	; 0x04
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	b9 01       	movw	r22, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_enuSetPinValue+0x10c>
    14c8:	66 0f       	add	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	8a 95       	dec	r24
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_enuSetPinValue+0x108>
    14d0:	cb 01       	movw	r24, r22
    14d2:	84 2b       	or	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	51 c0       	rjmp	.+162    	; 0x157a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTC:
				PORTC &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    14d8:	a5 e3       	ldi	r26, 0x35	; 53
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e5 e3       	ldi	r30, 0x35	; 53
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <DIO_enuSetPinValue+0x134>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	2a 95       	dec	r18
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <DIO_enuSetPinValue+0x130>
    14f8:	80 95       	com	r24
    14fa:	84 23       	and	r24, r20
    14fc:	8c 93       	st	X, r24
				PORTC |= (Copy_u8Value<<Copy_u8PinID);
    14fe:	a5 e3       	ldi	r26, 0x35	; 53
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8c 81       	ldd	r24, Y+4	; 0x04
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	88 2f       	mov	r24, r24
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	b9 01       	movw	r22, r18
    1518:	02 c0       	rjmp	.+4      	; 0x151e <DIO_enuSetPinValue+0x15e>
    151a:	66 0f       	add	r22, r22
    151c:	77 1f       	adc	r23, r23
    151e:	8a 95       	dec	r24
    1520:	e2 f7       	brpl	.-8      	; 0x151a <DIO_enuSetPinValue+0x15a>
    1522:	cb 01       	movw	r24, r22
    1524:	84 2b       	or	r24, r20
    1526:	8c 93       	st	X, r24
    1528:	28 c0       	rjmp	.+80     	; 0x157a <DIO_enuSetPinValue+0x1ba>
				break;
			case DIO_PORTD:
				PORTD &= ~(DIO_MASK_BIT<<Copy_u8PinID);
    152a:	a2 e3       	ldi	r26, 0x32	; 50
    152c:	b0 e0       	ldi	r27, 0x00	; 0
    152e:	e2 e3       	ldi	r30, 0x32	; 50
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	80 81       	ld	r24, Z
    1534:	48 2f       	mov	r20, r24
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <DIO_enuSetPinValue+0x186>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	2a 95       	dec	r18
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <DIO_enuSetPinValue+0x182>
    154a:	80 95       	com	r24
    154c:	84 23       	and	r24, r20
    154e:	8c 93       	st	X, r24
				PORTD |= (Copy_u8Value<<Copy_u8PinID);
    1550:	a2 e3       	ldi	r26, 0x32	; 50
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e2 e3       	ldi	r30, 0x32	; 50
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	b9 01       	movw	r22, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_enuSetPinValue+0x1b0>
    156c:	66 0f       	add	r22, r22
    156e:	77 1f       	adc	r23, r23
    1570:	8a 95       	dec	r24
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_enuSetPinValue+0x1ac>
    1574:	cb 01       	movw	r24, r22
    1576:	84 2b       	or	r24, r20
    1578:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	89 83       	std	Y+1, r24	; 0x01
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <DIO_enuSetPinValue+0x1c4>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1580:	83 e0       	ldi	r24, 0x03	; 3
    1582:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    1584:	89 81       	ldd	r24, Y+1	; 0x01
}
    1586:	26 96       	adiw	r28, 0x06	; 6
    1588:	0f b6       	in	r0, 0x3f	; 63
    158a:	f8 94       	cli
    158c:	de bf       	out	0x3e, r29	; 62
    158e:	0f be       	out	0x3f, r0	; 63
    1590:	cd bf       	out	0x3d, r28	; 61
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1598:	df 93       	push	r29
    159a:	cf 93       	push	r28
    159c:	00 d0       	rcall	.+0      	; 0x159e <DIO_enuTogPin+0x6>
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <DIO_enuTogPin+0x8>
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    15aa:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	84 30       	cpi	r24, 0x04	; 4
    15b0:	08 f0       	brcs	.+2      	; 0x15b4 <DIO_enuTogPin+0x1c>
    15b2:	75 c0       	rjmp	.+234    	; 0x169e <DIO_enuTogPin+0x106>
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	08 f0       	brcs	.+2      	; 0x15bc <DIO_enuTogPin+0x24>
    15ba:	71 c0       	rjmp	.+226    	; 0x169e <DIO_enuTogPin+0x106>
		{
			switch(Copy_u8PortID)
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	28 2f       	mov	r18, r24
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	3d 83       	std	Y+5, r19	; 0x05
    15c4:	2c 83       	std	Y+4, r18	; 0x04
    15c6:	8c 81       	ldd	r24, Y+4	; 0x04
    15c8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ca:	81 30       	cpi	r24, 0x01	; 1
    15cc:	91 05       	cpc	r25, r1
    15ce:	49 f1       	breq	.+82     	; 0x1622 <DIO_enuTogPin+0x8a>
    15d0:	2c 81       	ldd	r18, Y+4	; 0x04
    15d2:	3d 81       	ldd	r19, Y+5	; 0x05
    15d4:	22 30       	cpi	r18, 0x02	; 2
    15d6:	31 05       	cpc	r19, r1
    15d8:	2c f4       	brge	.+10     	; 0x15e4 <DIO_enuTogPin+0x4c>
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	61 f0       	breq	.+24     	; 0x15fa <DIO_enuTogPin+0x62>
    15e2:	5a c0       	rjmp	.+180    	; 0x1698 <DIO_enuTogPin+0x100>
    15e4:	2c 81       	ldd	r18, Y+4	; 0x04
    15e6:	3d 81       	ldd	r19, Y+5	; 0x05
    15e8:	22 30       	cpi	r18, 0x02	; 2
    15ea:	31 05       	cpc	r19, r1
    15ec:	71 f1       	breq	.+92     	; 0x164a <DIO_enuTogPin+0xb2>
    15ee:	8c 81       	ldd	r24, Y+4	; 0x04
    15f0:	9d 81       	ldd	r25, Y+5	; 0x05
    15f2:	83 30       	cpi	r24, 0x03	; 3
    15f4:	91 05       	cpc	r25, r1
    15f6:	e9 f1       	breq	.+122    	; 0x1672 <DIO_enuTogPin+0xda>
    15f8:	4f c0       	rjmp	.+158    	; 0x1698 <DIO_enuTogPin+0x100>
			{
			case DIO_PORTA:
				DDRA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    15fa:	aa e3       	ldi	r26, 0x3A	; 58
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	ea e3       	ldi	r30, 0x3A	; 58
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_enuTogPin+0x80>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_enuTogPin+0x7c>
    161c:	84 27       	eor	r24, r20
    161e:	8c 93       	st	X, r24
    1620:	3b c0       	rjmp	.+118    	; 0x1698 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTB:
				DDRB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1622:	a7 e3       	ldi	r26, 0x37	; 55
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e7 e3       	ldi	r30, 0x37	; 55
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_enuTogPin+0xa8>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_enuTogPin+0xa4>
    1644:	84 27       	eor	r24, r20
    1646:	8c 93       	st	X, r24
    1648:	27 c0       	rjmp	.+78     	; 0x1698 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTC:
				DDRC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    164a:	a4 e3       	ldi	r26, 0x34	; 52
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e4 e3       	ldi	r30, 0x34	; 52
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	48 2f       	mov	r20, r24
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	02 2e       	mov	r0, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_enuTogPin+0xd0>
    1664:	88 0f       	add	r24, r24
    1666:	99 1f       	adc	r25, r25
    1668:	0a 94       	dec	r0
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_enuTogPin+0xcc>
    166c:	84 27       	eor	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	13 c0       	rjmp	.+38     	; 0x1698 <DIO_enuTogPin+0x100>
				break;
			case DIO_PORTD:
				DDRD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1672:	a1 e3       	ldi	r26, 0x31	; 49
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e1 e3       	ldi	r30, 0x31	; 49
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_enuTogPin+0xf8>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_enuTogPin+0xf4>
    1694:	84 27       	eor	r24, r20
    1696:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <DIO_enuTogPin+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	89 83       	std	Y+1, r24	; 0x01
		}
	return Local_enuErrorState;
    16a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 *Copy_u8Value)
{
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	27 97       	sbiw	r28, 0x07	; 7
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	de bf       	out	0x3e, r29	; 62
    16c4:	0f be       	out	0x3f, r0	; 63
    16c6:	cd bf       	out	0x3d, r28	; 61
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	6b 83       	std	Y+3, r22	; 0x03
    16cc:	5d 83       	std	Y+5, r21	; 0x05
    16ce:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    16d0:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Value != NULL)
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	9d 81       	ldd	r25, Y+5	; 0x05
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	09 f4       	brne	.+2      	; 0x16dc <DIO_enuGetPinValue+0x28>
    16da:	7e c0       	rjmp	.+252    	; 0x17d8 <DIO_enuGetPinValue+0x124>
	{
	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <DIO_enuGetPinValue+0x30>
    16e2:	77 c0       	rjmp	.+238    	; 0x17d2 <DIO_enuGetPinValue+0x11e>
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_enuGetPinValue+0x38>
    16ea:	73 c0       	rjmp	.+230    	; 0x17d2 <DIO_enuGetPinValue+0x11e>
			{
				switch(Copy_u8PortID)
    16ec:	8a 81       	ldd	r24, Y+2	; 0x02
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	3f 83       	std	Y+7, r19	; 0x07
    16f4:	2e 83       	std	Y+6, r18	; 0x06
    16f6:	4e 81       	ldd	r20, Y+6	; 0x06
    16f8:	5f 81       	ldd	r21, Y+7	; 0x07
    16fa:	41 30       	cpi	r20, 0x01	; 1
    16fc:	51 05       	cpc	r21, r1
    16fe:	59 f1       	breq	.+86     	; 0x1756 <DIO_enuGetPinValue+0xa2>
    1700:	8e 81       	ldd	r24, Y+6	; 0x06
    1702:	9f 81       	ldd	r25, Y+7	; 0x07
    1704:	82 30       	cpi	r24, 0x02	; 2
    1706:	91 05       	cpc	r25, r1
    1708:	34 f4       	brge	.+12     	; 0x1716 <DIO_enuGetPinValue+0x62>
    170a:	2e 81       	ldd	r18, Y+6	; 0x06
    170c:	3f 81       	ldd	r19, Y+7	; 0x07
    170e:	21 15       	cp	r18, r1
    1710:	31 05       	cpc	r19, r1
    1712:	69 f0       	breq	.+26     	; 0x172e <DIO_enuGetPinValue+0x7a>
    1714:	5b c0       	rjmp	.+182    	; 0x17cc <DIO_enuGetPinValue+0x118>
    1716:	4e 81       	ldd	r20, Y+6	; 0x06
    1718:	5f 81       	ldd	r21, Y+7	; 0x07
    171a:	42 30       	cpi	r20, 0x02	; 2
    171c:	51 05       	cpc	r21, r1
    171e:	79 f1       	breq	.+94     	; 0x177e <DIO_enuGetPinValue+0xca>
    1720:	8e 81       	ldd	r24, Y+6	; 0x06
    1722:	9f 81       	ldd	r25, Y+7	; 0x07
    1724:	83 30       	cpi	r24, 0x03	; 3
    1726:	91 05       	cpc	r25, r1
    1728:	09 f4       	brne	.+2      	; 0x172c <DIO_enuGetPinValue+0x78>
    172a:	3d c0       	rjmp	.+122    	; 0x17a6 <DIO_enuGetPinValue+0xf2>
    172c:	4f c0       	rjmp	.+158    	; 0x17cc <DIO_enuGetPinValue+0x118>
				{
				case DIO_PORTA:
					*Copy_u8Value = ((PINA >> Copy_u8PinID) & DIO_MASK_BIT);
    172e:	e9 e3       	ldi	r30, 0x39	; 57
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	80 81       	ld	r24, Z
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	a9 01       	movw	r20, r18
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <DIO_enuGetPinValue+0x92>
    1742:	55 95       	asr	r21
    1744:	47 95       	ror	r20
    1746:	8a 95       	dec	r24
    1748:	e2 f7       	brpl	.-8      	; 0x1742 <DIO_enuGetPinValue+0x8e>
    174a:	ca 01       	movw	r24, r20
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	ec 81       	ldd	r30, Y+4	; 0x04
    1750:	fd 81       	ldd	r31, Y+5	; 0x05
    1752:	80 83       	st	Z, r24
    1754:	3b c0       	rjmp	.+118    	; 0x17cc <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTB:
					*Copy_u8Value = ((PINB >> Copy_u8PinID) & DIO_MASK_BIT);
    1756:	e6 e3       	ldi	r30, 0x36	; 54
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	88 2f       	mov	r24, r24
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a9 01       	movw	r20, r18
    1768:	02 c0       	rjmp	.+4      	; 0x176e <DIO_enuGetPinValue+0xba>
    176a:	55 95       	asr	r21
    176c:	47 95       	ror	r20
    176e:	8a 95       	dec	r24
    1770:	e2 f7       	brpl	.-8      	; 0x176a <DIO_enuGetPinValue+0xb6>
    1772:	ca 01       	movw	r24, r20
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	ec 81       	ldd	r30, Y+4	; 0x04
    1778:	fd 81       	ldd	r31, Y+5	; 0x05
    177a:	80 83       	st	Z, r24
    177c:	27 c0       	rjmp	.+78     	; 0x17cc <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTC:
					*Copy_u8Value = ((PINC >> Copy_u8PinID) & DIO_MASK_BIT);
    177e:	e3 e3       	ldi	r30, 0x33	; 51
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a9 01       	movw	r20, r18
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <DIO_enuGetPinValue+0xe2>
    1792:	55 95       	asr	r21
    1794:	47 95       	ror	r20
    1796:	8a 95       	dec	r24
    1798:	e2 f7       	brpl	.-8      	; 0x1792 <DIO_enuGetPinValue+0xde>
    179a:	ca 01       	movw	r24, r20
    179c:	81 70       	andi	r24, 0x01	; 1
    179e:	ec 81       	ldd	r30, Y+4	; 0x04
    17a0:	fd 81       	ldd	r31, Y+5	; 0x05
    17a2:	80 83       	st	Z, r24
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <DIO_enuGetPinValue+0x118>
					break;
				case DIO_PORTD:
					*Copy_u8Value = ((PIND >> Copy_u8PinID) & DIO_MASK_BIT);
    17a6:	e0 e3       	ldi	r30, 0x30	; 48
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <DIO_enuGetPinValue+0x10a>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <DIO_enuGetPinValue+0x106>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	ec 81       	ldd	r30, Y+4	; 0x04
    17c8:	fd 81       	ldd	r31, Y+5	; 0x05
    17ca:	80 83       	st	Z, r24
					break;
				}
				Local_enuErrorState = ES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <DIO_enuGetPinValue+0x128>
			}
			else
			{
				Local_enuErrorState = ES_OUT_OF_RANGE;
    17d2:	83 e0       	ldi	r24, 0x03	; 3
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_enuGetPinValue+0x128>
			}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER ;
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    17dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17de:	27 96       	adiw	r28, 0x07	; 7
    17e0:	0f b6       	in	r0, 0x3f	; 63
    17e2:	f8 94       	cli
    17e4:	de bf       	out	0x3e, r29	; 62
    17e6:	0f be       	out	0x3f, r0	; 63
    17e8:	cd bf       	out	0x3d, r28	; 61
    17ea:	cf 91       	pop	r28
    17ec:	df 91       	pop	r29
    17ee:	08 95       	ret

000017f0 <LCD_voidInit>:
#include "LCD_priv.h"

#include "util/delay.h"

void LCD_voidInit(void)
{
    17f0:	df 93       	push	r29
    17f2:	cf 93       	push	r28
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	aa 97       	sbiw	r28, 0x2a	; 42
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	a0 e2       	ldi	r26, 0x20	; 32
    180a:	b2 e4       	ldi	r27, 0x42	; 66
    180c:	8f a3       	std	Y+39, r24	; 0x27
    180e:	98 a7       	std	Y+40, r25	; 0x28
    1810:	a9 a7       	std	Y+41, r26	; 0x29
    1812:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1814:	6f a1       	ldd	r22, Y+39	; 0x27
    1816:	78 a5       	ldd	r23, Y+40	; 0x28
    1818:	89 a5       	ldd	r24, Y+41	; 0x29
    181a:	9a a5       	ldd	r25, Y+42	; 0x2a
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	4a ef       	ldi	r20, 0xFA	; 250
    1822:	54 e4       	ldi	r21, 0x44	; 68
    1824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1828:	dc 01       	movw	r26, r24
    182a:	cb 01       	movw	r24, r22
    182c:	8b a3       	std	Y+35, r24	; 0x23
    182e:	9c a3       	std	Y+36, r25	; 0x24
    1830:	ad a3       	std	Y+37, r26	; 0x25
    1832:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1834:	6b a1       	ldd	r22, Y+35	; 0x23
    1836:	7c a1       	ldd	r23, Y+36	; 0x24
    1838:	8d a1       	ldd	r24, Y+37	; 0x25
    183a:	9e a1       	ldd	r25, Y+38	; 0x26
    183c:	20 e0       	ldi	r18, 0x00	; 0
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	40 e8       	ldi	r20, 0x80	; 128
    1842:	5f e3       	ldi	r21, 0x3F	; 63
    1844:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1848:	88 23       	and	r24, r24
    184a:	2c f4       	brge	.+10     	; 0x1856 <LCD_voidInit+0x66>
		__ticks = 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9a a3       	std	Y+34, r25	; 0x22
    1852:	89 a3       	std	Y+33, r24	; 0x21
    1854:	3f c0       	rjmp	.+126    	; 0x18d4 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1856:	6b a1       	ldd	r22, Y+35	; 0x23
    1858:	7c a1       	ldd	r23, Y+36	; 0x24
    185a:	8d a1       	ldd	r24, Y+37	; 0x25
    185c:	9e a1       	ldd	r25, Y+38	; 0x26
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	3f ef       	ldi	r19, 0xFF	; 255
    1862:	4f e7       	ldi	r20, 0x7F	; 127
    1864:	57 e4       	ldi	r21, 0x47	; 71
    1866:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    186a:	18 16       	cp	r1, r24
    186c:	4c f5       	brge	.+82     	; 0x18c0 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    186e:	6f a1       	ldd	r22, Y+39	; 0x27
    1870:	78 a5       	ldd	r23, Y+40	; 0x28
    1872:	89 a5       	ldd	r24, Y+41	; 0x29
    1874:	9a a5       	ldd	r25, Y+42	; 0x2a
    1876:	20 e0       	ldi	r18, 0x00	; 0
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	40 e2       	ldi	r20, 0x20	; 32
    187c:	51 e4       	ldi	r21, 0x41	; 65
    187e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	bc 01       	movw	r22, r24
    1888:	cd 01       	movw	r24, r26
    188a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188e:	dc 01       	movw	r26, r24
    1890:	cb 01       	movw	r24, r22
    1892:	9a a3       	std	Y+34, r25	; 0x22
    1894:	89 a3       	std	Y+33, r24	; 0x21
    1896:	0f c0       	rjmp	.+30     	; 0x18b6 <LCD_voidInit+0xc6>
    1898:	88 ec       	ldi	r24, 0xC8	; 200
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	98 a3       	std	Y+32, r25	; 0x20
    189e:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18a2:	98 a1       	ldd	r25, Y+32	; 0x20
    18a4:	01 97       	sbiw	r24, 0x01	; 1
    18a6:	f1 f7       	brne	.-4      	; 0x18a4 <LCD_voidInit+0xb4>
    18a8:	98 a3       	std	Y+32, r25	; 0x20
    18aa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18ac:	89 a1       	ldd	r24, Y+33	; 0x21
    18ae:	9a a1       	ldd	r25, Y+34	; 0x22
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	9a a3       	std	Y+34, r25	; 0x22
    18b4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18b6:	89 a1       	ldd	r24, Y+33	; 0x21
    18b8:	9a a1       	ldd	r25, Y+34	; 0x22
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	69 f7       	brne	.-38     	; 0x1898 <LCD_voidInit+0xa8>
    18be:	14 c0       	rjmp	.+40     	; 0x18e8 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18c0:	6b a1       	ldd	r22, Y+35	; 0x23
    18c2:	7c a1       	ldd	r23, Y+36	; 0x24
    18c4:	8d a1       	ldd	r24, Y+37	; 0x25
    18c6:	9e a1       	ldd	r25, Y+38	; 0x26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	9a a3       	std	Y+34, r25	; 0x22
    18d2:	89 a3       	std	Y+33, r24	; 0x21
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	9e 8f       	std	Y+30, r25	; 0x1e
    18da:	8d 8f       	std	Y+29, r24	; 0x1d
    18dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e0:	01 97       	sbiw	r24, 0x01	; 1
    18e2:	f1 f7       	brne	.-4      	; 0x18e0 <LCD_voidInit+0xf0>
    18e4:	9e 8f       	std	Y+30, r25	; 0x1e
    18e6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	LCD_voidSendCommand(FUNCTION_SET);
    18e8:	88 e3       	ldi	r24, 0x38	; 56
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    18f0:	80 e0       	ldi	r24, 0x00	; 0
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e8       	ldi	r26, 0x80	; 128
    18f6:	bf e3       	ldi	r27, 0x3F	; 63
    18f8:	89 8f       	std	Y+25, r24	; 0x19
    18fa:	9a 8f       	std	Y+26, r25	; 0x1a
    18fc:	ab 8f       	std	Y+27, r26	; 0x1b
    18fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1900:	69 8d       	ldd	r22, Y+25	; 0x19
    1902:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1904:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1906:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4a ef       	ldi	r20, 0xFA	; 250
    190e:	54 e4       	ldi	r21, 0x44	; 68
    1910:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	8d 8b       	std	Y+21, r24	; 0x15
    191a:	9e 8b       	std	Y+22, r25	; 0x16
    191c:	af 8b       	std	Y+23, r26	; 0x17
    191e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1920:	6d 89       	ldd	r22, Y+21	; 0x15
    1922:	7e 89       	ldd	r23, Y+22	; 0x16
    1924:	8f 89       	ldd	r24, Y+23	; 0x17
    1926:	98 8d       	ldd	r25, Y+24	; 0x18
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <LCD_voidInit+0x152>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9c 8b       	std	Y+20, r25	; 0x14
    193e:	8b 8b       	std	Y+19, r24	; 0x13
    1940:	3f c0       	rjmp	.+126    	; 0x19c0 <LCD_voidInit+0x1d0>
	else if (__tmp > 65535)
    1942:	6d 89       	ldd	r22, Y+21	; 0x15
    1944:	7e 89       	ldd	r23, Y+22	; 0x16
    1946:	8f 89       	ldd	r24, Y+23	; 0x17
    1948:	98 8d       	ldd	r25, Y+24	; 0x18
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	4c f5       	brge	.+82     	; 0x19ac <LCD_voidInit+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195a:	69 8d       	ldd	r22, Y+25	; 0x19
    195c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    195e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1960:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e2       	ldi	r20, 0x20	; 32
    1968:	51 e4       	ldi	r21, 0x41	; 65
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	bc 01       	movw	r22, r24
    1974:	cd 01       	movw	r24, r26
    1976:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	9c 8b       	std	Y+20, r25	; 0x14
    1980:	8b 8b       	std	Y+19, r24	; 0x13
    1982:	0f c0       	rjmp	.+30     	; 0x19a2 <LCD_voidInit+0x1b2>
    1984:	88 ec       	ldi	r24, 0xC8	; 200
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9a 8b       	std	Y+18, r25	; 0x12
    198a:	89 8b       	std	Y+17, r24	; 0x11
    198c:	89 89       	ldd	r24, Y+17	; 0x11
    198e:	9a 89       	ldd	r25, Y+18	; 0x12
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <LCD_voidInit+0x1a0>
    1994:	9a 8b       	std	Y+18, r25	; 0x12
    1996:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1998:	8b 89       	ldd	r24, Y+19	; 0x13
    199a:	9c 89       	ldd	r25, Y+20	; 0x14
    199c:	01 97       	sbiw	r24, 0x01	; 1
    199e:	9c 8b       	std	Y+20, r25	; 0x14
    19a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a2:	8b 89       	ldd	r24, Y+19	; 0x13
    19a4:	9c 89       	ldd	r25, Y+20	; 0x14
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	69 f7       	brne	.-38     	; 0x1984 <LCD_voidInit+0x194>
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <LCD_voidInit+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ac:	6d 89       	ldd	r22, Y+21	; 0x15
    19ae:	7e 89       	ldd	r23, Y+22	; 0x16
    19b0:	8f 89       	ldd	r24, Y+23	; 0x17
    19b2:	98 8d       	ldd	r25, Y+24	; 0x18
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b8:	dc 01       	movw	r26, r24
    19ba:	cb 01       	movw	r24, r22
    19bc:	9c 8b       	std	Y+20, r25	; 0x14
    19be:	8b 8b       	std	Y+19, r24	; 0x13
    19c0:	8b 89       	ldd	r24, Y+19	; 0x13
    19c2:	9c 89       	ldd	r25, Y+20	; 0x14
    19c4:	98 8b       	std	Y+16, r25	; 0x10
    19c6:	8f 87       	std	Y+15, r24	; 0x0f
    19c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ca:	98 89       	ldd	r25, Y+16	; 0x10
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	f1 f7       	brne	.-4      	; 0x19cc <LCD_voidInit+0x1dc>
    19d0:	98 8b       	std	Y+16, r25	; 0x10
    19d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    19d4:	8c e0       	ldi	r24, 0x0C	; 12
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	a0 e8       	ldi	r26, 0x80	; 128
    19e2:	bf e3       	ldi	r27, 0x3F	; 63
    19e4:	8b 87       	std	Y+11, r24	; 0x0b
    19e6:	9c 87       	std	Y+12, r25	; 0x0c
    19e8:	ad 87       	std	Y+13, r26	; 0x0d
    19ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    19f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	4a ef       	ldi	r20, 0xFA	; 250
    19fa:	54 e4       	ldi	r21, 0x44	; 68
    19fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	8f 83       	std	Y+7, r24	; 0x07
    1a06:	98 87       	std	Y+8, r25	; 0x08
    1a08:	a9 87       	std	Y+9, r26	; 0x09
    1a0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e8       	ldi	r20, 0x80	; 128
    1a1a:	5f e3       	ldi	r21, 0x3F	; 63
    1a1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a20:	88 23       	and	r24, r24
    1a22:	2c f4       	brge	.+10     	; 0x1a2e <LCD_voidInit+0x23e>
		__ticks = 1;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	9e 83       	std	Y+6, r25	; 0x06
    1a2a:	8d 83       	std	Y+5, r24	; 0x05
    1a2c:	3f c0       	rjmp	.+126    	; 0x1aac <LCD_voidInit+0x2bc>
	else if (__tmp > 65535)
    1a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a30:	78 85       	ldd	r23, Y+8	; 0x08
    1a32:	89 85       	ldd	r24, Y+9	; 0x09
    1a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	3f ef       	ldi	r19, 0xFF	; 255
    1a3a:	4f e7       	ldi	r20, 0x7F	; 127
    1a3c:	57 e4       	ldi	r21, 0x47	; 71
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a42:	18 16       	cp	r1, r24
    1a44:	4c f5       	brge	.+82     	; 0x1a98 <LCD_voidInit+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a46:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a48:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e2       	ldi	r20, 0x20	; 32
    1a54:	51 e4       	ldi	r21, 0x41	; 65
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	bc 01       	movw	r22, r24
    1a60:	cd 01       	movw	r24, r26
    1a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a66:	dc 01       	movw	r26, r24
    1a68:	cb 01       	movw	r24, r22
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <LCD_voidInit+0x29e>
    1a70:	88 ec       	ldi	r24, 0xC8	; 200
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	9c 83       	std	Y+4, r25	; 0x04
    1a76:	8b 83       	std	Y+3, r24	; 0x03
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	01 97       	sbiw	r24, 0x01	; 1
    1a7e:	f1 f7       	brne	.-4      	; 0x1a7c <LCD_voidInit+0x28c>
    1a80:	9c 83       	std	Y+4, r25	; 0x04
    1a82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a84:	8d 81       	ldd	r24, Y+5	; 0x05
    1a86:	9e 81       	ldd	r25, Y+6	; 0x06
    1a88:	01 97       	sbiw	r24, 0x01	; 1
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a90:	9e 81       	ldd	r25, Y+6	; 0x06
    1a92:	00 97       	sbiw	r24, 0x00	; 0
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <LCD_voidInit+0x280>
    1a96:	14 c0       	rjmp	.+40     	; 0x1ac0 <LCD_voidInit+0x2d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a98:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9a:	78 85       	ldd	r23, Y+8	; 0x08
    1a9c:	89 85       	ldd	r24, Y+9	; 0x09
    1a9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa4:	dc 01       	movw	r26, r24
    1aa6:	cb 01       	movw	r24, r22
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	9a 83       	std	Y+2, r25	; 0x02
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	f1 f7       	brne	.-4      	; 0x1ab8 <LCD_voidInit+0x2c8>
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_voidSendCommand(DISPLAY_CLEAR);
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
}
    1ac8:	aa 96       	adiw	r28, 0x2a	; 42
    1aca:	0f b6       	in	r0, 0x3f	; 63
    1acc:	f8 94       	cli
    1ace:	de bf       	out	0x3e, r29	; 62
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	cd bf       	out	0x3d, r28	; 61
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	cd b7       	in	r28, 0x3d	; 61
    1ae0:	de b7       	in	r29, 0x3e	; 62
    1ae2:	6d 97       	sbiw	r28, 0x1d	; 29
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	8d 8f       	std	Y+29, r24	; 0x1d
	//Reset RS
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8LOW);
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	65 e0       	ldi	r22, 0x05	; 5
    1af4:	40 e0       	ldi	r20, 0x00	; 0
    1af6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>

	//Send Command
	DIO_enuSetPortValue(LCD_PORT_DATA , command);
    1afa:	82 e0       	ldi	r24, 0x02	; 2
    1afc:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1afe:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_enuSetPortValue>

	//Latch
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	67 e0       	ldi	r22, 0x07	; 7
    1b06:	40 e0       	ldi	r20, 0x00	; 0
    1b08:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    1b0c:	80 e0       	ldi	r24, 0x00	; 0
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	a0 e0       	ldi	r26, 0x00	; 0
    1b12:	b0 e4       	ldi	r27, 0x40	; 64
    1b14:	89 8f       	std	Y+25, r24	; 0x19
    1b16:	9a 8f       	std	Y+26, r25	; 0x1a
    1b18:	ab 8f       	std	Y+27, r26	; 0x1b
    1b1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	4a ef       	ldi	r20, 0xFA	; 250
    1b2a:	54 e4       	ldi	r21, 0x44	; 68
    1b2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	8d 8b       	std	Y+21, r24	; 0x15
    1b36:	9e 8b       	std	Y+22, r25	; 0x16
    1b38:	af 8b       	std	Y+23, r26	; 0x17
    1b3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b40:	8f 89       	ldd	r24, Y+23	; 0x17
    1b42:	98 8d       	ldd	r25, Y+24	; 0x18
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e8       	ldi	r20, 0x80	; 128
    1b4a:	5f e3       	ldi	r21, 0x3F	; 63
    1b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b50:	88 23       	and	r24, r24
    1b52:	2c f4       	brge	.+10     	; 0x1b5e <LCD_voidSendCommand+0x84>
		__ticks = 1;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9c 8b       	std	Y+20, r25	; 0x14
    1b5a:	8b 8b       	std	Y+19, r24	; 0x13
    1b5c:	3f c0       	rjmp	.+126    	; 0x1bdc <LCD_voidSendCommand+0x102>
	else if (__tmp > 65535)
    1b5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b60:	7e 89       	ldd	r23, Y+22	; 0x16
    1b62:	8f 89       	ldd	r24, Y+23	; 0x17
    1b64:	98 8d       	ldd	r25, Y+24	; 0x18
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	3f ef       	ldi	r19, 0xFF	; 255
    1b6a:	4f e7       	ldi	r20, 0x7F	; 127
    1b6c:	57 e4       	ldi	r21, 0x47	; 71
    1b6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b72:	18 16       	cp	r1, r24
    1b74:	4c f5       	brge	.+82     	; 0x1bc8 <LCD_voidSendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b76:	69 8d       	ldd	r22, Y+25	; 0x19
    1b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e2       	ldi	r20, 0x20	; 32
    1b84:	51 e4       	ldi	r21, 0x41	; 65
    1b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	bc 01       	movw	r22, r24
    1b90:	cd 01       	movw	r24, r26
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	8b 8b       	std	Y+19, r24	; 0x13
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LCD_voidSendCommand+0xe4>
    1ba0:	88 ec       	ldi	r24, 0xC8	; 200
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9a 8b       	std	Y+18, r25	; 0x12
    1ba6:	89 8b       	std	Y+17, r24	; 0x11
    1ba8:	89 89       	ldd	r24, Y+17	; 0x11
    1baa:	9a 89       	ldd	r25, Y+18	; 0x12
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_voidSendCommand+0xd2>
    1bb0:	9a 8b       	std	Y+18, r25	; 0x12
    1bb2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	01 97       	sbiw	r24, 0x01	; 1
    1bba:	9c 8b       	std	Y+20, r25	; 0x14
    1bbc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	00 97       	sbiw	r24, 0x00	; 0
    1bc4:	69 f7       	brne	.-38     	; 0x1ba0 <LCD_voidSendCommand+0xc6>
    1bc6:	14 c0       	rjmp	.+40     	; 0x1bf0 <LCD_voidSendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bca:	7e 89       	ldd	r23, Y+22	; 0x16
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd4:	dc 01       	movw	r26, r24
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	9c 8b       	std	Y+20, r25	; 0x14
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
    1bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    1bde:	9c 89       	ldd	r25, Y+20	; 0x14
    1be0:	98 8b       	std	Y+16, r25	; 0x10
    1be2:	8f 87       	std	Y+15, r24	; 0x0f
    1be4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1be6:	98 89       	ldd	r25, Y+16	; 0x10
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_voidSendCommand+0x10e>
    1bec:	98 8b       	std	Y+16, r25	; 0x10
    1bee:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8HIGH);
    1bf0:	80 e0       	ldi	r24, 0x00	; 0
    1bf2:	67 e0       	ldi	r22, 0x07	; 7
    1bf4:	41 e0       	ldi	r20, 0x01	; 1
    1bf6:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	a0 e0       	ldi	r26, 0x00	; 0
    1c00:	b0 e4       	ldi	r27, 0x40	; 64
    1c02:	8b 87       	std	Y+11, r24	; 0x0b
    1c04:	9c 87       	std	Y+12, r25	; 0x0c
    1c06:	ad 87       	std	Y+13, r26	; 0x0d
    1c08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c10:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	4a ef       	ldi	r20, 0xFA	; 250
    1c18:	54 e4       	ldi	r21, 0x44	; 68
    1c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1e:	dc 01       	movw	r26, r24
    1c20:	cb 01       	movw	r24, r22
    1c22:	8f 83       	std	Y+7, r24	; 0x07
    1c24:	98 87       	std	Y+8, r25	; 0x08
    1c26:	a9 87       	std	Y+9, r26	; 0x09
    1c28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2c:	78 85       	ldd	r23, Y+8	; 0x08
    1c2e:	89 85       	ldd	r24, Y+9	; 0x09
    1c30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3e:	88 23       	and	r24, r24
    1c40:	2c f4       	brge	.+10     	; 0x1c4c <LCD_voidSendCommand+0x172>
		__ticks = 1;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	3f c0       	rjmp	.+126    	; 0x1cca <LCD_voidSendCommand+0x1f0>
	else if (__tmp > 65535)
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	3f ef       	ldi	r19, 0xFF	; 255
    1c58:	4f e7       	ldi	r20, 0x7F	; 127
    1c5a:	57 e4       	ldi	r21, 0x47	; 71
    1c5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c60:	18 16       	cp	r1, r24
    1c62:	4c f5       	brge	.+82     	; 0x1cb6 <LCD_voidSendCommand+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	40 e2       	ldi	r20, 0x20	; 32
    1c72:	51 e4       	ldi	r21, 0x41	; 65
    1c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	bc 01       	movw	r22, r24
    1c7e:	cd 01       	movw	r24, r26
    1c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c84:	dc 01       	movw	r26, r24
    1c86:	cb 01       	movw	r24, r22
    1c88:	9e 83       	std	Y+6, r25	; 0x06
    1c8a:	8d 83       	std	Y+5, r24	; 0x05
    1c8c:	0f c0       	rjmp	.+30     	; 0x1cac <LCD_voidSendCommand+0x1d2>
    1c8e:	88 ec       	ldi	r24, 0xC8	; 200
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 83       	std	Y+4, r25	; 0x04
    1c94:	8b 83       	std	Y+3, r24	; 0x03
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	f1 f7       	brne	.-4      	; 0x1c9a <LCD_voidSendCommand+0x1c0>
    1c9e:	9c 83       	std	Y+4, r25	; 0x04
    1ca0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca6:	01 97       	sbiw	r24, 0x01	; 1
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cac:	8d 81       	ldd	r24, Y+5	; 0x05
    1cae:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	69 f7       	brne	.-38     	; 0x1c8e <LCD_voidSendCommand+0x1b4>
    1cb4:	14 c0       	rjmp	.+40     	; 0x1cde <LCD_voidSendCommand+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	9e 83       	std	Y+6, r25	; 0x06
    1cc8:	8d 83       	std	Y+5, r24	; 0x05
    1cca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ccc:	9e 81       	ldd	r25, Y+6	; 0x06
    1cce:	9a 83       	std	Y+2, r25	; 0x02
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	89 81       	ldd	r24, Y+1	; 0x01
    1cd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd6:	01 97       	sbiw	r24, 0x01	; 1
    1cd8:	f1 f7       	brne	.-4      	; 0x1cd6 <LCD_voidSendCommand+0x1fc>
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	67 e0       	ldi	r22, 0x07	; 7
    1ce2:	40 e0       	ldi	r20, 0x00	; 0
    1ce4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
}
    1ce8:	6d 96       	adiw	r28, 0x1d	; 29
    1cea:	0f b6       	in	r0, 0x3f	; 63
    1cec:	f8 94       	cli
    1cee:	de bf       	out	0x3e, r29	; 62
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	cd bf       	out	0x3d, r28	; 61
    1cf4:	cf 91       	pop	r28
    1cf6:	df 91       	pop	r29
    1cf8:	08 95       	ret

00001cfa <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    1cfa:	df 93       	push	r29
    1cfc:	cf 93       	push	r28
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	6d 97       	sbiw	r28, 0x1d	; 29
    1d04:	0f b6       	in	r0, 0x3f	; 63
    1d06:	f8 94       	cli
    1d08:	de bf       	out	0x3e, r29	; 62
    1d0a:	0f be       	out	0x3f, r0	; 63
    1d0c:	cd bf       	out	0x3d, r28	; 61
    1d0e:	8d 8f       	std	Y+29, r24	; 0x1d
	//Reset RS
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8HIGH);
    1d10:	80 e0       	ldi	r24, 0x00	; 0
    1d12:	65 e0       	ldi	r22, 0x05	; 5
    1d14:	41 e0       	ldi	r20, 0x01	; 1
    1d16:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>

	//Send Data
	DIO_enuSetPortValue(LCD_PORT_DATA , data);
    1d1a:	82 e0       	ldi	r24, 0x02	; 2
    1d1c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d1e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <DIO_enuSetPortValue>

	//Latch
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	67 e0       	ldi	r22, 0x07	; 7
    1d26:	40 e0       	ldi	r20, 0x00	; 0
    1d28:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	a0 e0       	ldi	r26, 0x00	; 0
    1d32:	b0 e4       	ldi	r27, 0x40	; 64
    1d34:	89 8f       	std	Y+25, r24	; 0x19
    1d36:	9a 8f       	std	Y+26, r25	; 0x1a
    1d38:	ab 8f       	std	Y+27, r26	; 0x1b
    1d3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8d 8b       	std	Y+21, r24	; 0x15
    1d56:	9e 8b       	std	Y+22, r25	; 0x16
    1d58:	af 8b       	std	Y+23, r26	; 0x17
    1d5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d5c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d5e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d60:	8f 89       	ldd	r24, Y+23	; 0x17
    1d62:	98 8d       	ldd	r25, Y+24	; 0x18
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <LCD_voidSendData+0x84>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <LCD_voidSendData+0x102>
	else if (__tmp > 65535)
    1d7e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d80:	7e 89       	ldd	r23, Y+22	; 0x16
    1d82:	8f 89       	ldd	r24, Y+23	; 0x17
    1d84:	98 8d       	ldd	r25, Y+24	; 0x18
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <LCD_voidSendData+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	69 8d       	ldd	r22, Y+25	; 0x19
    1d98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9c 8b       	std	Y+20, r25	; 0x14
    1dbc:	8b 8b       	std	Y+19, r24	; 0x13
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <LCD_voidSendData+0xe4>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9a 8b       	std	Y+18, r25	; 0x12
    1dc6:	89 8b       	std	Y+17, r24	; 0x11
    1dc8:	89 89       	ldd	r24, Y+17	; 0x11
    1dca:	9a 89       	ldd	r25, Y+18	; 0x12
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_voidSendData+0xd2>
    1dd0:	9a 8b       	std	Y+18, r25	; 0x12
    1dd2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1dd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9c 8b       	std	Y+20, r25	; 0x14
    1ddc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8b 89       	ldd	r24, Y+19	; 0x13
    1de0:	9c 89       	ldd	r25, Y+20	; 0x14
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <LCD_voidSendData+0xc6>
    1de6:	14 c0       	rjmp	.+40     	; 0x1e10 <LCD_voidSendData+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dea:	7e 89       	ldd	r23, Y+22	; 0x16
    1dec:	8f 89       	ldd	r24, Y+23	; 0x17
    1dee:	98 8d       	ldd	r25, Y+24	; 0x18
    1df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	98 8b       	std	Y+16, r25	; 0x10
    1e02:	8f 87       	std	Y+15, r24	; 0x0f
    1e04:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e06:	98 89       	ldd	r25, Y+16	; 0x10
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_voidSendData+0x10e>
    1e0c:	98 8b       	std	Y+16, r25	; 0x10
    1e0e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8HIGH);
    1e10:	80 e0       	ldi	r24, 0x00	; 0
    1e12:	67 e0       	ldi	r22, 0x07	; 7
    1e14:	41 e0       	ldi	r20, 0x01	; 1
    1e16:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a0 e0       	ldi	r26, 0x00	; 0
    1e20:	b0 e4       	ldi	r27, 0x40	; 64
    1e22:	8b 87       	std	Y+11, r24	; 0x0b
    1e24:	9c 87       	std	Y+12, r25	; 0x0c
    1e26:	ad 87       	std	Y+13, r26	; 0x0d
    1e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	30 e0       	ldi	r19, 0x00	; 0
    1e36:	4a ef       	ldi	r20, 0xFA	; 250
    1e38:	54 e4       	ldi	r21, 0x44	; 68
    1e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	8f 83       	std	Y+7, r24	; 0x07
    1e44:	98 87       	std	Y+8, r25	; 0x08
    1e46:	a9 87       	std	Y+9, r26	; 0x09
    1e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4c:	78 85       	ldd	r23, Y+8	; 0x08
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	2c f4       	brge	.+10     	; 0x1e6c <LCD_voidSendData+0x172>
		__ticks = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	90 e0       	ldi	r25, 0x00	; 0
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	3f c0       	rjmp	.+126    	; 0x1eea <LCD_voidSendData+0x1f0>
	else if (__tmp > 65535)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	3f ef       	ldi	r19, 0xFF	; 255
    1e78:	4f e7       	ldi	r20, 0x7F	; 127
    1e7a:	57 e4       	ldi	r21, 0x47	; 71
    1e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e80:	18 16       	cp	r1, r24
    1e82:	4c f5       	brge	.+82     	; 0x1ed6 <LCD_voidSendData+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e2       	ldi	r20, 0x20	; 32
    1e92:	51 e4       	ldi	r21, 0x41	; 65
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	bc 01       	movw	r22, r24
    1e9e:	cd 01       	movw	r24, r26
    1ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	9e 83       	std	Y+6, r25	; 0x06
    1eaa:	8d 83       	std	Y+5, r24	; 0x05
    1eac:	0f c0       	rjmp	.+30     	; 0x1ecc <LCD_voidSendData+0x1d2>
    1eae:	88 ec       	ldi	r24, 0xC8	; 200
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	9c 83       	std	Y+4, r25	; 0x04
    1eb4:	8b 83       	std	Y+3, r24	; 0x03
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eba:	01 97       	sbiw	r24, 0x01	; 1
    1ebc:	f1 f7       	brne	.-4      	; 0x1eba <LCD_voidSendData+0x1c0>
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	9e 83       	std	Y+6, r25	; 0x06
    1eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ece:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	69 f7       	brne	.-38     	; 0x1eae <LCD_voidSendData+0x1b4>
    1ed4:	14 c0       	rjmp	.+40     	; 0x1efe <LCD_voidSendData+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_voidSendData+0x1fc>
    1efa:	9a 83       	std	Y+2, r25	; 0x02
    1efc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8LOW);
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	67 e0       	ldi	r22, 0x07	; 7
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
}
    1f08:	6d 96       	adiw	r28, 0x1d	; 29
    1f0a:	0f b6       	in	r0, 0x3f	; 63
    1f0c:	f8 94       	cli
    1f0e:	de bf       	out	0x3e, r29	; 62
    1f10:	0f be       	out	0x3f, r0	; 63
    1f12:	cd bf       	out	0x3d, r28	; 61
    1f14:	cf 91       	pop	r28
    1f16:	df 91       	pop	r29
    1f18:	08 95       	ret

00001f1a <LCD_voidInitPortValues>:

void LCD_voidInitPortValues(void)
{
    1f1a:	df 93       	push	r29
    1f1c:	cf 93       	push	r28
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
	// Pins -> Output
	DIO_enuSetPortDirection(LCD_PORT_DATA , DIO_u8PORTOUTPUT);
    1f22:	82 e0       	ldi	r24, 0x02	; 2
    1f24:	6f ef       	ldi	r22, 0xFF	; 255
    1f26:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_enuSetPortDirection>
	// RS -> Output
	DIO_enuSetPinDirection(LCD_PORT_INSTRUCTION , LCD_RS , DIO_u8OUTPUT);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	65 e0       	ldi	r22, 0x05	; 5
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	// EN -> Output
	DIO_enuSetPinDirection(LCD_PORT_INSTRUCTION , LCD_EN , DIO_u8OUTPUT);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	67 e0       	ldi	r22, 0x07	; 7
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
}
    1f3e:	cf 91       	pop	r28
    1f40:	df 91       	pop	r29
    1f42:	08 95       	ret

00001f44 <LCD_voidSendString>:

void LCD_voidSendString(const u8 *str)
{
    1f44:	df 93       	push	r29
    1f46:	cf 93       	push	r28
    1f48:	00 d0       	rcall	.+0      	; 0x1f4a <LCD_voidSendString+0x6>
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	9b 83       	std	Y+3, r25	; 0x03
    1f52:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1f54:	19 82       	std	Y+1, r1	; 0x01
    1f56:	0e c0       	rjmp	.+28     	; 0x1f74 <LCD_voidSendString+0x30>
	while(str[i] != '\0')
	{
		LCD_voidSendData(str[i]);
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	fc 01       	movw	r30, r24
    1f64:	e2 0f       	add	r30, r18
    1f66:	f3 1f       	adc	r31, r19
    1f68:	80 81       	ld	r24, Z
    1f6a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendData>
		i++;
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	8f 5f       	subi	r24, 0xFF	; 255
    1f72:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(const u8 *str)
{
	u8 i = 0;
	while(str[i] != '\0')
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	fc 01       	movw	r30, r24
    1f80:	e2 0f       	add	r30, r18
    1f82:	f3 1f       	adc	r31, r19
    1f84:	80 81       	ld	r24, Z
    1f86:	88 23       	and	r24, r24
    1f88:	39 f7       	brne	.-50     	; 0x1f58 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[i]);
		i++;
	}
}
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <LCD_voidSendNumber>:

void LCD_voidSendNumber(u32 value)
{
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	cb 56       	subi	r28, 0x6B	; 107
    1fa4:	d0 40       	sbci	r29, 0x00	; 0
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e8 59       	subi	r30, 0x98	; 152
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 83       	st	Z, r22
    1fb8:	71 83       	std	Z+1, r23	; 0x01
    1fba:	82 83       	std	Z+2, r24	; 0x02
    1fbc:	93 83       	std	Z+3, r25	; 0x03
	u8 counter = 0;
    1fbe:	1b 82       	std	Y+3, r1	; 0x03
    1fc0:	38 c0       	rjmp	.+112    	; 0x2032 <LCD_voidSendNumber+0x9c>
	u8 arr[100];
	while(value != 0)
	{
		arr[counter] = ((value % 10) + '0');
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	08 2f       	mov	r16, r24
    1fc6:	10 e0       	ldi	r17, 0x00	; 0
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e8 59       	subi	r30, 0x98	; 152
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	a2 81       	ldd	r26, Z+2	; 0x02
    1fd4:	b3 81       	ldd	r27, Z+3	; 0x03
    1fd6:	2a e0       	ldi	r18, 0x0A	; 10
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__udivmodsi4>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	28 2f       	mov	r18, r24
    1fec:	20 5d       	subi	r18, 0xD0	; 208
    1fee:	ce 01       	movw	r24, r28
    1ff0:	04 96       	adiw	r24, 0x04	; 4
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	e0 0f       	add	r30, r16
    1ff6:	f1 1f       	adc	r31, r17
    1ff8:	20 83       	st	Z, r18
		value /= 10;
    1ffa:	8e 01       	movw	r16, r28
    1ffc:	08 59       	subi	r16, 0x98	; 152
    1ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    2000:	fe 01       	movw	r30, r28
    2002:	e8 59       	subi	r30, 0x98	; 152
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	91 81       	ldd	r25, Z+1	; 0x01
    200a:	a2 81       	ldd	r26, Z+2	; 0x02
    200c:	b3 81       	ldd	r27, Z+3	; 0x03
    200e:	2a e0       	ldi	r18, 0x0A	; 10
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	40 e0       	ldi	r20, 0x00	; 0
    2014:	50 e0       	ldi	r21, 0x00	; 0
    2016:	bc 01       	movw	r22, r24
    2018:	cd 01       	movw	r24, r26
    201a:	0e 94 03 16 	call	0x2c06	; 0x2c06 <__udivmodsi4>
    201e:	da 01       	movw	r26, r20
    2020:	c9 01       	movw	r24, r18
    2022:	f8 01       	movw	r30, r16
    2024:	80 83       	st	Z, r24
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	a2 83       	std	Z+2, r26	; 0x02
    202a:	b3 83       	std	Z+3, r27	; 0x03
		counter++;
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	8b 83       	std	Y+3, r24	; 0x03

void LCD_voidSendNumber(u32 value)
{
	u8 counter = 0;
	u8 arr[100];
	while(value != 0)
    2032:	fe 01       	movw	r30, r28
    2034:	e8 59       	subi	r30, 0x98	; 152
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	80 81       	ld	r24, Z
    203a:	91 81       	ldd	r25, Z+1	; 0x01
    203c:	a2 81       	ldd	r26, Z+2	; 0x02
    203e:	b3 81       	ldd	r27, Z+3	; 0x03
    2040:	00 97       	sbiw	r24, 0x00	; 0
    2042:	a1 05       	cpc	r26, r1
    2044:	b1 05       	cpc	r27, r1
    2046:	09 f0       	breq	.+2      	; 0x204a <LCD_voidSendNumber+0xb4>
    2048:	bc cf       	rjmp	.-136    	; 0x1fc2 <LCD_voidSendNumber+0x2c>
	{
		arr[counter] = ((value % 10) + '0');
		value /= 10;
		counter++;
	}
	for(int i = counter-1; i >= 0; i--)
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	88 2f       	mov	r24, r24
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <LCD_voidSendNumber+0xe0>
	{
		LCD_voidSendData(arr[i]);
    2058:	29 81       	ldd	r18, Y+1	; 0x01
    205a:	3a 81       	ldd	r19, Y+2	; 0x02
    205c:	ce 01       	movw	r24, r28
    205e:	04 96       	adiw	r24, 0x04	; 4
    2060:	fc 01       	movw	r30, r24
    2062:	e2 0f       	add	r30, r18
    2064:	f3 1f       	adc	r31, r19
    2066:	80 81       	ld	r24, Z
    2068:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendData>
	{
		arr[counter] = ((value % 10) + '0');
		value /= 10;
		counter++;
	}
	for(int i = counter-1; i >= 0; i--)
    206c:	89 81       	ldd	r24, Y+1	; 0x01
    206e:	9a 81       	ldd	r25, Y+2	; 0x02
    2070:	01 97       	sbiw	r24, 0x01	; 1
    2072:	9a 83       	std	Y+2, r25	; 0x02
    2074:	89 83       	std	Y+1, r24	; 0x01
    2076:	89 81       	ldd	r24, Y+1	; 0x01
    2078:	9a 81       	ldd	r25, Y+2	; 0x02
    207a:	99 23       	and	r25, r25
    207c:	6c f7       	brge	.-38     	; 0x2058 <LCD_voidSendNumber+0xc2>
	{
		LCD_voidSendData(arr[i]);
	}
}
    207e:	c5 59       	subi	r28, 0x95	; 149
    2080:	df 4f       	sbci	r29, 0xFF	; 255
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	1f 91       	pop	r17
    2092:	0f 91       	pop	r16
    2094:	08 95       	ret

00002096 <LCD_voidSendFloatingNumber>:

void LCD_voidSendFloatingNumber(f32 value)
{
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <LCD_voidSendFloatingNumber+0x6>
    209c:	00 d0       	rcall	.+0      	; 0x209e <LCD_voidSendFloatingNumber+0x8>
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	69 83       	std	Y+1, r22	; 0x01
    20a4:	7a 83       	std	Y+2, r23	; 0x02
    20a6:	8b 83       	std	Y+3, r24	; 0x03
    20a8:	9c 83       	std	Y+4, r25	; 0x04
	LCD_voidSendNumber((u32)value);
    20aa:	69 81       	ldd	r22, Y+1	; 0x01
    20ac:	7a 81       	ldd	r23, Y+2	; 0x02
    20ae:	8b 81       	ldd	r24, Y+3	; 0x03
    20b0:	9c 81       	ldd	r25, Y+4	; 0x04
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	bc 01       	movw	r22, r24
    20bc:	cd 01       	movw	r24, r26
    20be:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_voidSendNumber>
	LCD_voidSendData('.');
    20c2:	8e e2       	ldi	r24, 0x2E	; 46
    20c4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_voidSendData>
	LCD_voidSendNumber((u32)((value-((u32)value))*1000000));
    20c8:	69 81       	ldd	r22, Y+1	; 0x01
    20ca:	7a 81       	ldd	r23, Y+2	; 0x02
    20cc:	8b 81       	ldd	r24, Y+3	; 0x03
    20ce:	9c 81       	ldd	r25, Y+4	; 0x04
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	bc 01       	movw	r22, r24
    20da:	cd 01       	movw	r24, r26
    20dc:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    20e0:	9b 01       	movw	r18, r22
    20e2:	ac 01       	movw	r20, r24
    20e4:	69 81       	ldd	r22, Y+1	; 0x01
    20e6:	7a 81       	ldd	r23, Y+2	; 0x02
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    20f0:	dc 01       	movw	r26, r24
    20f2:	cb 01       	movw	r24, r22
    20f4:	bc 01       	movw	r22, r24
    20f6:	cd 01       	movw	r24, r26
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	34 e2       	ldi	r19, 0x24	; 36
    20fc:	44 e7       	ldi	r20, 0x74	; 116
    20fe:	59 e4       	ldi	r21, 0x49	; 73
    2100:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	bc 01       	movw	r22, r24
    210a:	cd 01       	movw	r24, r26
    210c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2110:	dc 01       	movw	r26, r24
    2112:	cb 01       	movw	r24, r22
    2114:	bc 01       	movw	r22, r24
    2116:	cd 01       	movw	r24, r26
    2118:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_voidSendNumber>
}
    211c:	0f 90       	pop	r0
    211e:	0f 90       	pop	r0
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	cf 91       	pop	r28
    2126:	df 91       	pop	r29
    2128:	08 95       	ret

0000212a <LCD_u8GoToXY>:

u8 LCD_u8GoToXY(u8 col , u8 row)
{
    212a:	df 93       	push	r29
    212c:	cf 93       	push	r28
    212e:	00 d0       	rcall	.+0      	; 0x2130 <LCD_u8GoToXY+0x6>
    2130:	0f 92       	push	r0
    2132:	cd b7       	in	r28, 0x3d	; 61
    2134:	de b7       	in	r29, 0x3e	; 62
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinState=0;
    213a:	19 82       	std	Y+1, r1	; 0x01
	if((row == 0) && (col < 16))
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	88 23       	and	r24, r24
    2140:	41 f4       	brne	.+16     	; 0x2152 <LCD_u8GoToXY+0x28>
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	80 31       	cpi	r24, 0x10	; 16
    2146:	28 f4       	brcc	.+10     	; 0x2152 <LCD_u8GoToXY+0x28>
	{
		LCD_voidSendCommand((0x00) + col + 128);
    2148:	8a 81       	ldd	r24, Y+2	; 0x02
    214a:	80 58       	subi	r24, 0x80	; 128
    214c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2150:	0d c0       	rjmp	.+26     	; 0x216c <LCD_u8GoToXY+0x42>
	}
	else if((row == 1) && (col < 16))
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	81 30       	cpi	r24, 0x01	; 1
    2156:	41 f4       	brne	.+16     	; 0x2168 <LCD_u8GoToXY+0x3e>
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	80 31       	cpi	r24, 0x10	; 16
    215c:	28 f4       	brcc	.+10     	; 0x2168 <LCD_u8GoToXY+0x3e>
	{
		LCD_voidSendCommand((0x40) + col + 128);
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	80 54       	subi	r24, 0x40	; 64
    2162:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2166:	02 c0       	rjmp	.+4      	; 0x216c <LCD_u8GoToXY+0x42>
	}
	else
	{
		Local_u8PinState = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8PinState;
    216c:	89 81       	ldd	r24, Y+1	; 0x01
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_voidClearDisplay>:

void LCD_voidClearDisplay()
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	2e 97       	sbiw	r28, 0x0e	; 14
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(1);
    218e:	81 e0       	ldi	r24, 0x01	; 1
    2190:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <LCD_voidSendCommand>
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	a0 e0       	ldi	r26, 0x00	; 0
    219a:	b0 e4       	ldi	r27, 0x40	; 64
    219c:	8b 87       	std	Y+11, r24	; 0x0b
    219e:	9c 87       	std	Y+12, r25	; 0x0c
    21a0:	ad 87       	std	Y+13, r26	; 0x0d
    21a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    21aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	4a ef       	ldi	r20, 0xFA	; 250
    21b2:	54 e4       	ldi	r21, 0x44	; 68
    21b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	8f 83       	std	Y+7, r24	; 0x07
    21be:	98 87       	std	Y+8, r25	; 0x08
    21c0:	a9 87       	std	Y+9, r26	; 0x09
    21c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21c4:	6f 81       	ldd	r22, Y+7	; 0x07
    21c6:	78 85       	ldd	r23, Y+8	; 0x08
    21c8:	89 85       	ldd	r24, Y+9	; 0x09
    21ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	40 e8       	ldi	r20, 0x80	; 128
    21d2:	5f e3       	ldi	r21, 0x3F	; 63
    21d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d8:	88 23       	and	r24, r24
    21da:	2c f4       	brge	.+10     	; 0x21e6 <LCD_voidClearDisplay+0x6c>
		__ticks = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	9e 83       	std	Y+6, r25	; 0x06
    21e2:	8d 83       	std	Y+5, r24	; 0x05
    21e4:	3f c0       	rjmp	.+126    	; 0x2264 <LCD_voidClearDisplay+0xea>
	else if (__tmp > 65535)
    21e6:	6f 81       	ldd	r22, Y+7	; 0x07
    21e8:	78 85       	ldd	r23, Y+8	; 0x08
    21ea:	89 85       	ldd	r24, Y+9	; 0x09
    21ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	3f ef       	ldi	r19, 0xFF	; 255
    21f2:	4f e7       	ldi	r20, 0x7F	; 127
    21f4:	57 e4       	ldi	r21, 0x47	; 71
    21f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	4c f5       	brge	.+82     	; 0x2250 <LCD_voidClearDisplay+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2200:	7c 85       	ldd	r23, Y+12	; 0x0c
    2202:	8d 85       	ldd	r24, Y+13	; 0x0d
    2204:	9e 85       	ldd	r25, Y+14	; 0x0e
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	8d 83       	std	Y+5, r24	; 0x05
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <LCD_voidClearDisplay+0xcc>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	8b 83       	std	Y+3, r24	; 0x03
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <LCD_voidClearDisplay+0xba>
    2238:	9c 83       	std	Y+4, r25	; 0x04
    223a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	9e 81       	ldd	r25, Y+6	; 0x06
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e 83       	std	Y+6, r25	; 0x06
    2244:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d 81       	ldd	r24, Y+5	; 0x05
    2248:	9e 81       	ldd	r25, Y+6	; 0x06
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <LCD_voidClearDisplay+0xae>
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <LCD_voidClearDisplay+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	9e 83       	std	Y+6, r25	; 0x06
    2262:	8d 83       	std	Y+5, r24	; 0x05
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	9a 81       	ldd	r25, Y+2	; 0x02
    2270:	01 97       	sbiw	r24, 0x01	; 1
    2272:	f1 f7       	brne	.-4      	; 0x2270 <LCD_voidClearDisplay+0xf6>
    2274:	9a 83       	std	Y+2, r25	; 0x02
    2276:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2278:	2e 96       	adiw	r28, 0x0e	; 14
    227a:	0f b6       	in	r0, 0x3f	; 63
    227c:	f8 94       	cli
    227e:	de bf       	out	0x3e, r29	; 62
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	cd bf       	out	0x3d, r28	; 61
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <SPI_voidInit>:
#include "SPI_Private.h"
#include "SPI_Interface.h"
#include "SPI_Configuration.h"

void SPI_voidInit(u8 Copy_u8SPIMode)
{
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	0f 92       	push	r0
    2290:	cd b7       	in	r28, 0x3d	; 61
    2292:	de b7       	in	r29, 0x3e	; 62
    2294:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8SPIMode == SPI_MASTER_MODE)
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	88 23       	and	r24, r24
    229a:	91 f5       	brne	.+100    	; 0x2300 <SPI_voidInit+0x76>
	{
		//Set in master mode
		SET_BIT(SPCR , SPCR_MSTR);
    229c:	ad e2       	ldi	r26, 0x2D	; 45
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ed e2       	ldi	r30, 0x2D	; 45
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	80 61       	ori	r24, 0x10	; 16
    22a8:	8c 93       	st	X, r24

		//Clock polarity -> rising
		CLR_BIT(SPCR , SPCR_CPOL);
    22aa:	ad e2       	ldi	r26, 0x2D	; 45
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	ed e2       	ldi	r30, 0x2D	; 45
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	87 7f       	andi	r24, 0xF7	; 247
    22b6:	8c 93       	st	X, r24

		//Clock phase -> sample
		CLR_BIT(SPCR , SPCR_CPHA);
    22b8:	ad e2       	ldi	r26, 0x2D	; 45
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	ed e2       	ldi	r30, 0x2D	; 45
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8b 7f       	andi	r24, 0xFB	; 251
    22c4:	8c 93       	st	X, r24

		//Set clock prescaler -> 64
		CLR_BIT(SPCR , SPCR_SPR0);
    22c6:	ad e2       	ldi	r26, 0x2D	; 45
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	ed e2       	ldi	r30, 0x2D	; 45
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	80 81       	ld	r24, Z
    22d0:	8e 7f       	andi	r24, 0xFE	; 254
    22d2:	8c 93       	st	X, r24
		SET_BIT(SPCR , SPCR_SPR1);
    22d4:	ad e2       	ldi	r26, 0x2D	; 45
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	ed e2       	ldi	r30, 0x2D	; 45
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	82 60       	ori	r24, 0x02	; 2
    22e0:	8c 93       	st	X, r24
		CLR_BIT(SPSR , SPSR_SPI2X);
    22e2:	ae e2       	ldi	r26, 0x2E	; 46
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	ee e2       	ldi	r30, 0x2E	; 46
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	8e 7f       	andi	r24, 0xFE	; 254
    22ee:	8c 93       	st	X, r24

		//SPI -> enable
		SET_BIT(SPCR , SPCR_SPE);
    22f0:	ad e2       	ldi	r26, 0x2D	; 45
    22f2:	b0 e0       	ldi	r27, 0x00	; 0
    22f4:	ed e2       	ldi	r30, 0x2D	; 45
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 81       	ld	r24, Z
    22fa:	80 64       	ori	r24, 0x40	; 64
    22fc:	8c 93       	st	X, r24
    22fe:	11 c0       	rjmp	.+34     	; 0x2322 <SPI_voidInit+0x98>

	}
	else if(Copy_u8SPIMode == SPI_SLAVE_MODE)
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	71 f4       	brne	.+28     	; 0x2322 <SPI_voidInit+0x98>
	{
		//Set in slave mode
		CLR_BIT(SPCR , SPCR_MSTR);
    2306:	ad e2       	ldi	r26, 0x2D	; 45
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	ed e2       	ldi	r30, 0x2D	; 45
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8f 7e       	andi	r24, 0xEF	; 239
    2312:	8c 93       	st	X, r24

		//SPI -> enable
		SET_BIT(SPCR , SPCR_SPE);
    2314:	ad e2       	ldi	r26, 0x2D	; 45
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	ed e2       	ldi	r30, 0x2D	; 45
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	80 64       	ori	r24, 0x40	; 64
    2320:	8c 93       	st	X, r24
	}
}
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <SPI_u8DataSendReceive>:

u8 SPI_u8DataSendReceive(u8 Copy_u8Data)
{
    232a:	df 93       	push	r29
    232c:	cf 93       	push	r28
    232e:	0f 92       	push	r0
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_u8Data;
    2336:	ef e2       	ldi	r30, 0x2F	; 47
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	80 83       	st	Z, r24
	while(GET_BIT(SPSR , SPSR_SPIF) == 0);
    233e:	ee e2       	ldi	r30, 0x2E	; 46
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 1f       	adc	r24, r24
    2346:	88 27       	eor	r24, r24
    2348:	88 1f       	adc	r24, r24
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	90 70       	andi	r25, 0x00	; 0
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	a9 f3       	breq	.-22     	; 0x233e <SPI_u8DataSendReceive+0x14>
	return SPDR;
    2354:	ef e2       	ldi	r30, 0x2F	; 47
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
}
    235a:	0f 90       	pop	r0
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret

00002362 <USART_voidInit>:
static void (* USART_pvNotificationFunc)(void)= NULL;
static u8 USART_u8State= IDLE ;


void USART_voidInit (void)
{
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	00 d0       	rcall	.+0      	; 0x2368 <USART_voidInit+0x6>
    2368:	0f 92       	push	r0
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8UCSRC = 0 ;
    236e:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16UBRR = (u16)((SYSTEM_FREQUENCY / (16 * USART_BAUD_RATE)) - 1) ;
    2370:	83 e3       	ldi	r24, 0x33	; 51
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
	UBRRH = (u8)(Local_u16UBRR >> 8) ;
    2378:	e0 e4       	ldi	r30, 0x40	; 64
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	89 2f       	mov	r24, r25
    2382:	99 27       	eor	r25, r25
    2384:	80 83       	st	Z, r24
	UBRRL = (u8)Local_u16UBRR ;
    2386:	e9 e2       	ldi	r30, 0x29	; 41
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	80 83       	st	Z, r24

	#if (USART_MODE == ASYNCHRONOUS) && (USART_SYSTEM_SPEED == USART_X1)

		CLR_BIT(UCSRA , UCSRA_U2X) ;
    238e:	ab e2       	ldi	r26, 0x2B	; 43
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	eb e2       	ldi	r30, 0x2B	; 43
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	8d 7f       	andi	r24, 0xFD	; 253
    239a:	8c 93       	st	X, r24
		#error "Wrong USART_MODE or USART_SYSTEM_SPEED config"
	#endif


	#if USART_MPCM == DISABLE
		CLR_BIT(UCSRA , UCSRA_MPCM) ;
    239c:	ab e2       	ldi	r26, 0x2B	; 43
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	eb e2       	ldi	r30, 0x2B	; 43
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	8e 7f       	andi	r24, 0xFE	; 254
    23a8:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_MPCM config"
	#endif

	#if USART_MODE == ASYNCHRONOUS
		CLR_BIT(Local_u8UCSRC , UCSRC_UMSEL) ;
    23aa:	8b 81       	ldd	r24, Y+3	; 0x03
    23ac:	8f 7b       	andi	r24, 0xBF	; 191
    23ae:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_MODE config"
	#endif

	#if USART_PARITY_MODE == DISABLE
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM0) ;
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	8f 7e       	andi	r24, 0xEF	; 239
    23b4:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(Local_u8UCSRC , UCSRC_UPM1) ;
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	8f 7d       	andi	r24, 0xDF	; 223
    23ba:	8b 83       	std	Y+3, r24	; 0x03
	#else
		#error "Wrong USART_PARITY_MODE config"
	#endif

	#if USART_STOP_BIT == STOP_BIT_1
		CLR_BIT(Local_u8UCSRC , UCSRC_USBS) ;
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	87 7f       	andi	r24, 0xF7	; 247
    23c0:	8b 83       	std	Y+3, r24	; 0x03
	#elif USART_DATA_SIZE == DATA_SIZE_7_BIT
		CLR_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
	#elif USART_DATA_SIZE == DATA_SIZE_8_BIT
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ0) ;
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	82 60       	ori	r24, 0x02	; 2
    23c6:	8b 83       	std	Y+3, r24	; 0x03
		SET_BIT(Local_u8UCSRC , UCSRC_UCSZ1) ;
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	84 60       	ori	r24, 0x04	; 4
    23cc:	8b 83       	std	Y+3, r24	; 0x03
		CLR_BIT(UCSRB , UCSRB_UCSZ2) ;
    23ce:	aa e2       	ldi	r26, 0x2A	; 42
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	ea e2       	ldi	r30, 0x2A	; 42
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	8b 7f       	andi	r24, 0xFB	; 251
    23da:	8c 93       	st	X, r24
		#else
			#error "Wrong USART_STOP_BIT config"
		#endif
	#endif

	SET_BIT(Local_u8UCSRC , UCSRC_URSEL) ;
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	80 68       	ori	r24, 0x80	; 128
    23e0:	8b 83       	std	Y+3, r24	; 0x03

	UCSRC = Local_u8UCSRC ;
    23e2:	e0 e4       	ldi	r30, 0x40	; 64
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	80 83       	st	Z, r24

	#if USART_RX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    23ea:	aa e2       	ldi	r26, 0x2A	; 42
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	ea e2       	ldi	r30, 0x2A	; 42
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	8f 77       	andi	r24, 0x7F	; 127
    23f6:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_RX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_TX_COMPLETE_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    23f8:	aa e2       	ldi	r26, 0x2A	; 42
    23fa:	b0 e0       	ldi	r27, 0x00	; 0
    23fc:	ea e2       	ldi	r30, 0x2A	; 42
    23fe:	f0 e0       	ldi	r31, 0x00	; 0
    2400:	80 81       	ld	r24, Z
    2402:	8f 7b       	andi	r24, 0xBF	; 191
    2404:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TX_COMPLETE_INTERRUPT config"
	#endif

	#if USART_UDR_EMPTY_INTERRUPT == DISABLE
		CLR_BIT(UCSRB , UCSRB_UDRIE) ;
    2406:	aa e2       	ldi	r26, 0x2A	; 42
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	ea e2       	ldi	r30, 0x2A	; 42
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	80 81       	ld	r24, Z
    2410:	8f 7d       	andi	r24, 0xDF	; 223
    2412:	8c 93       	st	X, r24
	#endif

	#if USART_RECEIVER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_RXEN) ;
	#elif USART_RECEIVER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_RXEN) ;
    2414:	aa e2       	ldi	r26, 0x2A	; 42
    2416:	b0 e0       	ldi	r27, 0x00	; 0
    2418:	ea e2       	ldi	r30, 0x2A	; 42
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	80 81       	ld	r24, Z
    241e:	80 61       	ori	r24, 0x10	; 16
    2420:	8c 93       	st	X, r24
	#endif

	#if USART_TRANSMITTER_ENABLE == DISABLE
		CLR_BIT(UCSRB , UCSRB_TXEN) ;
	#elif USART_TRANSMITTER_ENABLE == ENABLE
		SET_BIT(UCSRB , UCSRB_TXEN) ;
    2422:	aa e2       	ldi	r26, 0x2A	; 42
    2424:	b0 e0       	ldi	r27, 0x00	; 0
    2426:	ea e2       	ldi	r30, 0x2A	; 42
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	88 60       	ori	r24, 0x08	; 8
    242e:	8c 93       	st	X, r24
	#else
		#error "Wrong USART_TRANSMITTER_ENABLE config"
	#endif
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	cf 91       	pop	r28
    2438:	df 91       	pop	r29
    243a:	08 95       	ret

0000243c <USART_u8SendData>:

u8 USART_u8SendData (u8 Copy_u8Data)
{
    243c:	df 93       	push	r29
    243e:	cf 93       	push	r28
    2440:	00 d0       	rcall	.+0      	; 0x2442 <USART_u8SendData+0x6>
    2442:	00 d0       	rcall	.+0      	; 0x2444 <USART_u8SendData+0x8>
    2444:	00 d0       	rcall	.+0      	; 0x2446 <USART_u8SendData+0xa>
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0 ;
    2450:	19 82       	std	Y+1, r1	; 0x01
    2452:	1a 82       	std	Y+2, r1	; 0x02
    2454:	1b 82       	std	Y+3, r1	; 0x03
    2456:	1c 82       	std	Y+4, r1	; 0x04
	if (USART_u8State == IDLE)
    2458:	80 91 7c 01 	lds	r24, 0x017C
    245c:	88 23       	and	r24, r24
    245e:	09 f0       	breq	.+2      	; 0x2462 <USART_u8SendData+0x26>
    2460:	44 c0       	rjmp	.+136    	; 0x24ea <USART_u8SendData+0xae>
	{
		USART_u8State = BUSY ;
    2462:	82 e0       	ldi	r24, 0x02	; 2
    2464:	80 93 7c 01 	sts	0x017C, r24
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <USART_u8SendData+0x44>
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
		{
			Local_u32TimeoutCounter++ ;
    246a:	89 81       	ldd	r24, Y+1	; 0x01
    246c:	9a 81       	ldd	r25, Y+2	; 0x02
    246e:	ab 81       	ldd	r26, Y+3	; 0x03
    2470:	bc 81       	ldd	r27, Y+4	; 0x04
    2472:	01 96       	adiw	r24, 0x01	; 1
    2474:	a1 1d       	adc	r26, r1
    2476:	b1 1d       	adc	r27, r1
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	ab 83       	std	Y+3, r26	; 0x03
    247e:	bc 83       	std	Y+4, r27	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
	u32 Local_u32TimeoutCounter = 0 ;
	if (USART_u8State == IDLE)
	{
		USART_u8State = BUSY ;
		while (((GET_BIT(UCSRA , UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    2480:	eb e2       	ldi	r30, 0x2B	; 43
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	88 2f       	mov	r24, r24
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	80 72       	andi	r24, 0x20	; 32
    248c:	90 70       	andi	r25, 0x00	; 0
    248e:	95 95       	asr	r25
    2490:	87 95       	ror	r24
    2492:	95 95       	asr	r25
    2494:	87 95       	ror	r24
    2496:	95 95       	asr	r25
    2498:	87 95       	ror	r24
    249a:	95 95       	asr	r25
    249c:	87 95       	ror	r24
    249e:	95 95       	asr	r25
    24a0:	87 95       	ror	r24
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	61 f4       	brne	.+24     	; 0x24be <USART_u8SendData+0x82>
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	ab 81       	ldd	r26, Y+3	; 0x03
    24ac:	bc 81       	ldd	r27, Y+4	; 0x04
    24ae:	80 31       	cpi	r24, 0x10	; 16
    24b0:	27 e2       	ldi	r18, 0x27	; 39
    24b2:	92 07       	cpc	r25, r18
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	a2 07       	cpc	r26, r18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	b2 07       	cpc	r27, r18
    24bc:	b1 f6       	brne	.-84     	; 0x246a <USART_u8SendData+0x2e>
		{
			Local_u32TimeoutCounter++ ;
		}

		if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	ab 81       	ldd	r26, Y+3	; 0x03
    24c4:	bc 81       	ldd	r27, Y+4	; 0x04
    24c6:	80 31       	cpi	r24, 0x10	; 16
    24c8:	27 e2       	ldi	r18, 0x27	; 39
    24ca:	92 07       	cpc	r25, r18
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	a2 07       	cpc	r26, r18
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	b2 07       	cpc	r27, r18
    24d4:	19 f4       	brne	.+6      	; 0x24dc <USART_u8SendData+0xa0>
			Local_u8ErrorState = ES_OUT_OF_RANGE ;
    24d6:	83 e0       	ldi	r24, 0x03	; 3
    24d8:	8d 83       	std	Y+5, r24	; 0x05
    24da:	04 c0       	rjmp	.+8      	; 0x24e4 <USART_u8SendData+0xa8>
		else
			UDR = Copy_u8Data ;
    24dc:	ec e2       	ldi	r30, 0x2C	; 44
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	8e 81       	ldd	r24, Y+6	; 0x06
    24e2:	80 83       	st	Z, r24

		USART_u8State = IDLE ;
    24e4:	10 92 7c 01 	sts	0x017C, r1
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <USART_u8SendData+0xb0>
	}
	else
	{
		Local_u8ErrorState = ES_NOK ;
    24ea:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState ;
    24ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24ee:	26 96       	adiw	r28, 0x06	; 6
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	08 95       	ret

00002500 <USART_u8RecevieData>:

u8 USART_u8RecevieData (u8 *Copy_u8ReceviedData)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	27 97       	sbiw	r28, 0x07	; 7
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	9f 83       	std	Y+7, r25	; 0x07
    2516:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState ;
	u32 Local_u32TimeoutCounter = 0 ;
    2518:	19 82       	std	Y+1, r1	; 0x01
    251a:	1a 82       	std	Y+2, r1	; 0x02
    251c:	1b 82       	std	Y+3, r1	; 0x03
    251e:	1c 82       	std	Y+4, r1	; 0x04
	if (Copy_u8ReceviedData != NULL)
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	00 97       	sbiw	r24, 0x00	; 0
    2526:	09 f4       	brne	.+2      	; 0x252a <USART_u8RecevieData+0x2a>
    2528:	45 c0       	rjmp	.+138    	; 0x25b4 <USART_u8RecevieData+0xb4>
	{
		if (USART_u8State == IDLE)
    252a:	80 91 7c 01 	lds	r24, 0x017C
    252e:	88 23       	and	r24, r24
    2530:	09 f0       	breq	.+2      	; 0x2534 <USART_u8RecevieData+0x34>
    2532:	3e c0       	rjmp	.+124    	; 0x25b0 <USART_u8RecevieData+0xb0>
		{
			USART_u8State = BUSY ;
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	80 93 7c 01 	sts	0x017C, r24
    253a:	0b c0       	rjmp	.+22     	; 0x2552 <USART_u8RecevieData+0x52>

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
				Local_u32TimeoutCounter++ ;
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	ab 81       	ldd	r26, Y+3	; 0x03
    2542:	bc 81       	ldd	r27, Y+4	; 0x04
    2544:	01 96       	adiw	r24, 0x01	; 1
    2546:	a1 1d       	adc	r26, r1
    2548:	b1 1d       	adc	r27, r1
    254a:	89 83       	std	Y+1, r24	; 0x01
    254c:	9a 83       	std	Y+2, r25	; 0x02
    254e:	ab 83       	std	Y+3, r26	; 0x03
    2550:	bc 83       	std	Y+4, r27	; 0x04
	{
		if (USART_u8State == IDLE)
		{
			USART_u8State = BUSY ;

			while (((GET_BIT(UCSRA , UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter != USART_u32TIMEOUT))
    2552:	eb e2       	ldi	r30, 0x2B	; 43
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	88 1f       	adc	r24, r24
    255a:	88 27       	eor	r24, r24
    255c:	88 1f       	adc	r24, r24
    255e:	88 2f       	mov	r24, r24
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	90 70       	andi	r25, 0x00	; 0
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	61 f4       	brne	.+24     	; 0x2580 <USART_u8RecevieData+0x80>
    2568:	89 81       	ldd	r24, Y+1	; 0x01
    256a:	9a 81       	ldd	r25, Y+2	; 0x02
    256c:	ab 81       	ldd	r26, Y+3	; 0x03
    256e:	bc 81       	ldd	r27, Y+4	; 0x04
    2570:	80 31       	cpi	r24, 0x10	; 16
    2572:	27 e2       	ldi	r18, 0x27	; 39
    2574:	92 07       	cpc	r25, r18
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	a2 07       	cpc	r26, r18
    257a:	20 e0       	ldi	r18, 0x00	; 0
    257c:	b2 07       	cpc	r27, r18
    257e:	f1 f6       	brne	.-68     	; 0x253c <USART_u8RecevieData+0x3c>
				Local_u32TimeoutCounter++ ;

			if (Local_u32TimeoutCounter == USART_u32TIMEOUT)
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	ab 81       	ldd	r26, Y+3	; 0x03
    2586:	bc 81       	ldd	r27, Y+4	; 0x04
    2588:	80 31       	cpi	r24, 0x10	; 16
    258a:	27 e2       	ldi	r18, 0x27	; 39
    258c:	92 07       	cpc	r25, r18
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	a2 07       	cpc	r26, r18
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	b2 07       	cpc	r27, r18
    2596:	19 f4       	brne	.+6      	; 0x259e <USART_u8RecevieData+0x9e>
				Local_u8ErrorState = ES_OUT_OF_RANGE ;
    2598:	83 e0       	ldi	r24, 0x03	; 3
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	06 c0       	rjmp	.+12     	; 0x25aa <USART_u8RecevieData+0xaa>
			else
				*Copy_u8ReceviedData = UDR ;
    259e:	ec e2       	ldi	r30, 0x2C	; 44
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	ee 81       	ldd	r30, Y+6	; 0x06
    25a6:	ff 81       	ldd	r31, Y+7	; 0x07
    25a8:	80 83       	st	Z, r24

			USART_u8State = IDLE ;
    25aa:	10 92 7c 01 	sts	0x017C, r1
    25ae:	04 c0       	rjmp	.+8      	; 0x25b8 <USART_u8RecevieData+0xb8>
		}
		else
			Local_u8ErrorState = ES_NOK ;
    25b0:	1d 82       	std	Y+5, r1	; 0x05
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <USART_u8RecevieData+0xb8>
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    25b4:	82 e0       	ldi	r24, 0x02	; 2
    25b6:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    25b8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25ba:	27 96       	adiw	r28, 0x07	; 7
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <USART_u8SendStringSynch>:

u8 USART_u8SendStringSynch (const u8 * Copy_pchString)
{
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	28 97       	sbiw	r28, 0x08	; 8
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	9f 83       	std	Y+7, r25	; 0x07
    25e2:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = ES_OK ;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    25e8:	19 82       	std	Y+1, r1	; 0x01
    25ea:	1a 82       	std	Y+2, r1	; 0x02
    25ec:	1b 82       	std	Y+3, r1	; 0x03
    25ee:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    25f0:	8e 81       	ldd	r24, Y+6	; 0x06
    25f2:	9f 81       	ldd	r25, Y+7	; 0x07
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	41 f1       	breq	.+80     	; 0x2648 <USART_u8SendStringSynch+0x7c>
    25f8:	1c c0       	rjmp	.+56     	; 0x2632 <USART_u8SendStringSynch+0x66>
	{
		while (Copy_pchString[Local_u32Index] != '\0')
		{
			Local_u8ErrorState = USART_u8SendData(Copy_pchString[Local_u32Index]) ;
    25fa:	29 81       	ldd	r18, Y+1	; 0x01
    25fc:	3a 81       	ldd	r19, Y+2	; 0x02
    25fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2600:	9f 81       	ldd	r25, Y+7	; 0x07
    2602:	fc 01       	movw	r30, r24
    2604:	e2 0f       	add	r30, r18
    2606:	f3 1f       	adc	r31, r19
    2608:	80 81       	ld	r24, Z
    260a:	0e 94 1e 12 	call	0x243c	; 0x243c <USART_u8SendData>
    260e:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	ab 81       	ldd	r26, Y+3	; 0x03
    2616:	bc 81       	ldd	r27, Y+4	; 0x04
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	a1 1d       	adc	r26, r1
    261c:	b1 1d       	adc	r27, r1
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	9a 83       	std	Y+2, r25	; 0x02
    2622:	ab 83       	std	Y+3, r26	; 0x03
    2624:	bc 83       	std	Y+4, r27	; 0x04
			if (Local_u8ErrorState != ES_OK)
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	81 30       	cpi	r24, 0x01	; 1
    262a:	19 f0       	breq	.+6      	; 0x2632 <USART_u8SendStringSynch+0x66>
				return Local_u8ErrorState ;
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	88 87       	std	Y+8, r24	; 0x08
    2630:	0f c0       	rjmp	.+30     	; 0x2650 <USART_u8SendStringSynch+0x84>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Copy_pchString[Local_u32Index] != '\0')
    2632:	29 81       	ldd	r18, Y+1	; 0x01
    2634:	3a 81       	ldd	r19, Y+2	; 0x02
    2636:	8e 81       	ldd	r24, Y+6	; 0x06
    2638:	9f 81       	ldd	r25, Y+7	; 0x07
    263a:	fc 01       	movw	r30, r24
    263c:	e2 0f       	add	r30, r18
    263e:	f3 1f       	adc	r31, r19
    2640:	80 81       	ld	r24, Z
    2642:	88 23       	and	r24, r24
    2644:	d1 f6       	brne	.-76     	; 0x25fa <USART_u8SendStringSynch+0x2e>
    2646:	02 c0       	rjmp	.+4      	; 0x264c <USART_u8SendStringSynch+0x80>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    2648:	82 e0       	ldi	r24, 0x02	; 2
    264a:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    264c:	8d 81       	ldd	r24, Y+5	; 0x05
    264e:	88 87       	std	Y+8, r24	; 0x08
    2650:	88 85       	ldd	r24, Y+8	; 0x08
}
    2652:	28 96       	adiw	r28, 0x08	; 8
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <USART_u8SendStringAsynch>:

u8   USART_u8SendStringAsynch (const u8 * Copy_pchString , void (* NotificationFunc)(void))
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <USART_u8SendStringAsynch+0x6>
    266a:	00 d0       	rcall	.+0      	; 0x266c <USART_u8SendStringAsynch+0x8>
    266c:	0f 92       	push	r0
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
    2672:	9b 83       	std	Y+3, r25	; 0x03
    2674:	8a 83       	std	Y+2, r24	; 0x02
    2676:	7d 83       	std	Y+5, r23	; 0x05
    2678:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = ES_OK ;
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    267e:	80 91 7c 01 	lds	r24, 0x017C
    2682:	88 23       	and	r24, r24
    2684:	99 f5       	brne	.+102    	; 0x26ec <USART_u8SendStringAsynch+0x88>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	61 f1       	breq	.+88     	; 0x26e6 <USART_u8SendStringAsynch+0x82>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	41 f1       	breq	.+80     	; 0x26e6 <USART_u8SendStringAsynch+0x82>
		{
			USART_u8State = BUSY ;
    2696:	82 e0       	ldi	r24, 0x02	; 2
    2698:	80 93 7c 01 	sts	0x017C, r24

			USART_pu8SendData = Copy_pchString ;
    269c:	8a 81       	ldd	r24, Y+2	; 0x02
    269e:	9b 81       	ldd	r25, Y+3	; 0x03
    26a0:	90 93 77 01 	sts	0x0177, r25
    26a4:	80 93 76 01 	sts	0x0176, r24
			USART_pvNotificationFunc = NotificationFunc ;
    26a8:	8c 81       	ldd	r24, Y+4	; 0x04
    26aa:	9d 81       	ldd	r25, Y+5	; 0x05
    26ac:	90 93 7b 01 	sts	0x017B, r25
    26b0:	80 93 7a 01 	sts	0x017A, r24
			USART_u8Index = 0 ;
    26b4:	10 92 7e 01 	sts	0x017E, r1
			UDR = USART_pu8SendData[USART_u8Index] ;
    26b8:	ac e2       	ldi	r26, 0x2C	; 44
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	20 91 76 01 	lds	r18, 0x0176
    26c0:	30 91 77 01 	lds	r19, 0x0177
    26c4:	80 91 7e 01 	lds	r24, 0x017E
    26c8:	88 2f       	mov	r24, r24
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	f9 01       	movw	r30, r18
    26ce:	e8 0f       	add	r30, r24
    26d0:	f9 1f       	adc	r31, r25
    26d2:	80 81       	ld	r24, Z
    26d4:	8c 93       	st	X, r24
			SET_BIT(UCSRB , UCSRB_TXCIE) ;
    26d6:	aa e2       	ldi	r26, 0x2A	; 42
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ea e2       	ldi	r30, 0x2A	; 42
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	80 64       	ori	r24, 0x40	; 64
    26e2:	8c 93       	st	X, r24
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <USART_u8SendStringAsynch+0x8a>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    26e6:	82 e0       	ldi	r24, 0x02	; 2
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <USART_u8SendStringAsynch+0x8a>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    26ec:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	0f 90       	pop	r0
    26f6:	0f 90       	pop	r0
    26f8:	0f 90       	pop	r0
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	08 95       	ret

00002700 <USART_u8ReceiveBufferSynch>:

u8 USART_u8ReceiveBufferSynch (u8 *Copy_pchString , u32 Copy_u32BufferSize)
{
    2700:	df 93       	push	r29
    2702:	cf 93       	push	r28
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	2c 97       	sbiw	r28, 0x0c	; 12
    270a:	0f b6       	in	r0, 0x3f	; 63
    270c:	f8 94       	cli
    270e:	de bf       	out	0x3e, r29	; 62
    2710:	0f be       	out	0x3f, r0	; 63
    2712:	cd bf       	out	0x3d, r28	; 61
    2714:	9f 83       	std	Y+7, r25	; 0x07
    2716:	8e 83       	std	Y+6, r24	; 0x06
    2718:	48 87       	std	Y+8, r20	; 0x08
    271a:	59 87       	std	Y+9, r21	; 0x09
    271c:	6a 87       	std	Y+10, r22	; 0x0a
    271e:	7b 87       	std	Y+11, r23	; 0x0b
	u8 Local_u8ErrorState = ES_OK ;
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	8d 83       	std	Y+5, r24	; 0x05

	u32 Local_u32Index = 0 ;
    2724:	19 82       	std	Y+1, r1	; 0x01
    2726:	1a 82       	std	Y+2, r1	; 0x02
    2728:	1b 82       	std	Y+3, r1	; 0x03
    272a:	1c 82       	std	Y+4, r1	; 0x04

	if (Copy_pchString != NULL)
    272c:	8e 81       	ldd	r24, Y+6	; 0x06
    272e:	9f 81       	ldd	r25, Y+7	; 0x07
    2730:	00 97       	sbiw	r24, 0x00	; 0
    2732:	49 f1       	breq	.+82     	; 0x2786 <USART_u8ReceiveBufferSynch+0x86>
    2734:	1a c0       	rjmp	.+52     	; 0x276a <USART_u8ReceiveBufferSynch+0x6a>
	{
		while (Local_u32Index < Copy_u32BufferSize)
		{
			Local_u8ErrorState = USART_u8RecevieData(&Copy_pchString[Local_u32Index]) ;
    2736:	29 81       	ldd	r18, Y+1	; 0x01
    2738:	3a 81       	ldd	r19, Y+2	; 0x02
    273a:	8e 81       	ldd	r24, Y+6	; 0x06
    273c:	9f 81       	ldd	r25, Y+7	; 0x07
    273e:	82 0f       	add	r24, r18
    2740:	93 1f       	adc	r25, r19
    2742:	0e 94 80 12 	call	0x2500	; 0x2500 <USART_u8RecevieData>
    2746:	8d 83       	std	Y+5, r24	; 0x05
			Local_u32Index++ ;
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	ab 81       	ldd	r26, Y+3	; 0x03
    274e:	bc 81       	ldd	r27, Y+4	; 0x04
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	a1 1d       	adc	r26, r1
    2754:	b1 1d       	adc	r27, r1
    2756:	89 83       	std	Y+1, r24	; 0x01
    2758:	9a 83       	std	Y+2, r25	; 0x02
    275a:	ab 83       	std	Y+3, r26	; 0x03
    275c:	bc 83       	std	Y+4, r27	; 0x04

			if (Local_u8ErrorState != ES_OK)
    275e:	8d 81       	ldd	r24, Y+5	; 0x05
    2760:	81 30       	cpi	r24, 0x01	; 1
    2762:	19 f0       	breq	.+6      	; 0x276a <USART_u8ReceiveBufferSynch+0x6a>
				return Local_u8ErrorState ;
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	8c 87       	std	Y+12, r24	; 0x0c
    2768:	12 c0       	rjmp	.+36     	; 0x278e <USART_u8ReceiveBufferSynch+0x8e>

	u32 Local_u32Index = 0 ;

	if (Copy_pchString != NULL)
	{
		while (Local_u32Index < Copy_u32BufferSize)
    276a:	29 81       	ldd	r18, Y+1	; 0x01
    276c:	3a 81       	ldd	r19, Y+2	; 0x02
    276e:	4b 81       	ldd	r20, Y+3	; 0x03
    2770:	5c 81       	ldd	r21, Y+4	; 0x04
    2772:	88 85       	ldd	r24, Y+8	; 0x08
    2774:	99 85       	ldd	r25, Y+9	; 0x09
    2776:	aa 85       	ldd	r26, Y+10	; 0x0a
    2778:	bb 85       	ldd	r27, Y+11	; 0x0b
    277a:	28 17       	cp	r18, r24
    277c:	39 07       	cpc	r19, r25
    277e:	4a 07       	cpc	r20, r26
    2780:	5b 07       	cpc	r21, r27
    2782:	c8 f2       	brcs	.-78     	; 0x2736 <USART_u8ReceiveBufferSynch+0x36>
    2784:	02 c0       	rjmp	.+4      	; 0x278a <USART_u8ReceiveBufferSynch+0x8a>
			if (Local_u8ErrorState != ES_OK)
				return Local_u8ErrorState ;
		}
	}
	else
		Local_u8ErrorState = ES_NULL_POINTER ;
    2786:	82 e0       	ldi	r24, 0x02	; 2
    2788:	8d 83       	std	Y+5, r24	; 0x05

	return Local_u8ErrorState ;
    278a:	8d 81       	ldd	r24, Y+5	; 0x05
    278c:	8c 87       	std	Y+12, r24	; 0x0c
    278e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    2790:	2c 96       	adiw	r28, 0x0c	; 12
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	cf 91       	pop	r28
    279e:	df 91       	pop	r29
    27a0:	08 95       	ret

000027a2 <USART_u8ReceiveBufferAsynch>:

u8 USART_u8ReceiveBufferAsynch (u8 *Copy_pchString , u32 Copy_u32BufferSize , void (* NotificationFunc)(void))
{
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	29 97       	sbiw	r28, 0x09	; 9
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	9b 83       	std	Y+3, r25	; 0x03
    27b8:	8a 83       	std	Y+2, r24	; 0x02
    27ba:	4c 83       	std	Y+4, r20	; 0x04
    27bc:	5d 83       	std	Y+5, r21	; 0x05
    27be:	6e 83       	std	Y+6, r22	; 0x06
    27c0:	7f 83       	std	Y+7, r23	; 0x07
    27c2:	39 87       	std	Y+9, r19	; 0x09
    27c4:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = ES_OK ;
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	89 83       	std	Y+1, r24	; 0x01

	if (USART_u8State == IDLE)
    27ca:	80 91 7c 01 	lds	r24, 0x017C
    27ce:	88 23       	and	r24, r24
    27d0:	39 f5       	brne	.+78     	; 0x2820 <USART_u8ReceiveBufferAsynch+0x7e>
	{
		if ((Copy_pchString != NULL) && (NotificationFunc != NULL))
    27d2:	8a 81       	ldd	r24, Y+2	; 0x02
    27d4:	9b 81       	ldd	r25, Y+3	; 0x03
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	01 f1       	breq	.+64     	; 0x281a <USART_u8ReceiveBufferAsynch+0x78>
    27da:	88 85       	ldd	r24, Y+8	; 0x08
    27dc:	99 85       	ldd	r25, Y+9	; 0x09
    27de:	00 97       	sbiw	r24, 0x00	; 0
    27e0:	e1 f0       	breq	.+56     	; 0x281a <USART_u8ReceiveBufferAsynch+0x78>
		{
			USART_u8State = BUSY ;
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	80 93 7c 01 	sts	0x017C, r24

			USART_pu8ReceiveData = Copy_pchString ;
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	90 93 79 01 	sts	0x0179, r25
    27f0:	80 93 78 01 	sts	0x0178, r24
			USART_pvNotificationFunc = NotificationFunc ;
    27f4:	88 85       	ldd	r24, Y+8	; 0x08
    27f6:	99 85       	ldd	r25, Y+9	; 0x09
    27f8:	90 93 7b 01 	sts	0x017B, r25
    27fc:	80 93 7a 01 	sts	0x017A, r24
			USART_u8BufferSize = Copy_u32BufferSize;
    2800:	8c 81       	ldd	r24, Y+4	; 0x04
    2802:	80 93 7d 01 	sts	0x017D, r24

			USART_u8Index = 0 ;
    2806:	10 92 7e 01 	sts	0x017E, r1

			SET_BIT(UCSRB , UCSRB_RXCIE) ;
    280a:	aa e2       	ldi	r26, 0x2A	; 42
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	ea e2       	ldi	r30, 0x2A	; 42
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	80 81       	ld	r24, Z
    2814:	80 68       	ori	r24, 0x80	; 128
    2816:	8c 93       	st	X, r24
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <USART_u8ReceiveBufferAsynch+0x80>
		}
		else
			Local_u8ErrorState = ES_NULL_POINTER ;
    281a:	82 e0       	ldi	r24, 0x02	; 2
    281c:	89 83       	std	Y+1, r24	; 0x01
    281e:	01 c0       	rjmp	.+2      	; 0x2822 <USART_u8ReceiveBufferAsynch+0x80>
	}
	else
		Local_u8ErrorState = ES_NOK ;
    2820:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState ;
    2822:	89 81       	ldd	r24, Y+1	; 0x01
}
    2824:	29 96       	adiw	r28, 0x09	; 9
    2826:	0f b6       	in	r0, 0x3f	; 63
    2828:	f8 94       	cli
    282a:	de bf       	out	0x3e, r29	; 62
    282c:	0f be       	out	0x3f, r0	; 63
    282e:	cd bf       	out	0x3d, r28	; 61
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <__vector_13>:


void __vector_13 (void)		__attribute__ ((signal)) ;
void __vector_13 (void)
{
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	2f 93       	push	r18
    2842:	3f 93       	push	r19
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	af 93       	push	r26
    2852:	bf 93       	push	r27
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	USART_pu8ReceiveData[USART_u8Index] = UDR ;
    2860:	20 91 78 01 	lds	r18, 0x0178
    2864:	30 91 79 01 	lds	r19, 0x0179
    2868:	80 91 7e 01 	lds	r24, 0x017E
    286c:	88 2f       	mov	r24, r24
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	d9 01       	movw	r26, r18
    2872:	a8 0f       	add	r26, r24
    2874:	b9 1f       	adc	r27, r25
    2876:	ec e2       	ldi	r30, 0x2C	; 44
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	8c 93       	st	X, r24
	USART_u8Index++ ;
    287e:	80 91 7e 01 	lds	r24, 0x017E
    2882:	8f 5f       	subi	r24, 0xFF	; 255
    2884:	80 93 7e 01 	sts	0x017E, r24

	if (USART_u8Index == USART_u8BufferSize)
    2888:	90 91 7e 01 	lds	r25, 0x017E
    288c:	80 91 7d 01 	lds	r24, 0x017D
    2890:	98 17       	cp	r25, r24
    2892:	81 f4       	brne	.+32     	; 0x28b4 <__vector_13+0x7e>
	{
		USART_u8Index=0;
    2894:	10 92 7e 01 	sts	0x017E, r1
		USART_u8State = IDLE ;
    2898:	10 92 7c 01 	sts	0x017C, r1
		USART_pvNotificationFunc() ;
    289c:	e0 91 7a 01 	lds	r30, 0x017A
    28a0:	f0 91 7b 01 	lds	r31, 0x017B
    28a4:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_RXCIE) ;
    28a6:	aa e2       	ldi	r26, 0x2A	; 42
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	ea e2       	ldi	r30, 0x2A	; 42
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	8f 77       	andi	r24, 0x7F	; 127
    28b2:	8c 93       	st	X, r24
	}
	else
	{
		/*Do Noting*/
	}
}
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	ff 91       	pop	r31
    28ba:	ef 91       	pop	r30
    28bc:	bf 91       	pop	r27
    28be:	af 91       	pop	r26
    28c0:	9f 91       	pop	r25
    28c2:	8f 91       	pop	r24
    28c4:	7f 91       	pop	r23
    28c6:	6f 91       	pop	r22
    28c8:	5f 91       	pop	r21
    28ca:	4f 91       	pop	r20
    28cc:	3f 91       	pop	r19
    28ce:	2f 91       	pop	r18
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <__vector_15>:

void __vector_15 (void)		__attribute__ ((signal)) ;
void __vector_15 (void)
{
    28da:	1f 92       	push	r1
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	2f 93       	push	r18
    28e6:	3f 93       	push	r19
    28e8:	4f 93       	push	r20
    28ea:	5f 93       	push	r21
    28ec:	6f 93       	push	r22
    28ee:	7f 93       	push	r23
    28f0:	8f 93       	push	r24
    28f2:	9f 93       	push	r25
    28f4:	af 93       	push	r26
    28f6:	bf 93       	push	r27
    28f8:	ef 93       	push	r30
    28fa:	ff 93       	push	r31
    28fc:	df 93       	push	r29
    28fe:	cf 93       	push	r28
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
	USART_u8Index++ ;
    2904:	80 91 7e 01 	lds	r24, 0x017E
    2908:	8f 5f       	subi	r24, 0xFF	; 255
    290a:	80 93 7e 01 	sts	0x017E, r24

	if (USART_pu8SendData[USART_u8Index] == '\0')
    290e:	20 91 76 01 	lds	r18, 0x0176
    2912:	30 91 77 01 	lds	r19, 0x0177
    2916:	80 91 7e 01 	lds	r24, 0x017E
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	f9 01       	movw	r30, r18
    2920:	e8 0f       	add	r30, r24
    2922:	f9 1f       	adc	r31, r25
    2924:	80 81       	ld	r24, Z
    2926:	88 23       	and	r24, r24
    2928:	89 f4       	brne	.+34     	; 0x294c <__vector_15+0x72>
	{
		USART_u8Index=0;
    292a:	10 92 7e 01 	sts	0x017E, r1
		USART_u8State = IDLE ;
    292e:	10 92 7c 01 	sts	0x017C, r1
		USART_pvNotificationFunc() ;
    2932:	e0 91 7a 01 	lds	r30, 0x017A
    2936:	f0 91 7b 01 	lds	r31, 0x017B
    293a:	09 95       	icall
		CLR_BIT(UCSRB , UCSRB_TXCIE) ;
    293c:	aa e2       	ldi	r26, 0x2A	; 42
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	ea e2       	ldi	r30, 0x2A	; 42
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	8f 7b       	andi	r24, 0xBF	; 191
    2948:	8c 93       	st	X, r24
    294a:	0f c0       	rjmp	.+30     	; 0x296a <__vector_15+0x90>
	}
	else
	{
		UDR = USART_pu8SendData[USART_u8Index] ;
    294c:	ac e2       	ldi	r26, 0x2C	; 44
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	20 91 76 01 	lds	r18, 0x0176
    2954:	30 91 77 01 	lds	r19, 0x0177
    2958:	80 91 7e 01 	lds	r24, 0x017E
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	f9 01       	movw	r30, r18
    2962:	e8 0f       	add	r30, r24
    2964:	f9 1f       	adc	r31, r25
    2966:	80 81       	ld	r24, Z
    2968:	8c 93       	st	X, r24
	}
}
    296a:	cf 91       	pop	r28
    296c:	df 91       	pop	r29
    296e:	ff 91       	pop	r31
    2970:	ef 91       	pop	r30
    2972:	bf 91       	pop	r27
    2974:	af 91       	pop	r26
    2976:	9f 91       	pop	r25
    2978:	8f 91       	pop	r24
    297a:	7f 91       	pop	r23
    297c:	6f 91       	pop	r22
    297e:	5f 91       	pop	r21
    2980:	4f 91       	pop	r20
    2982:	3f 91       	pop	r19
    2984:	2f 91       	pop	r18
    2986:	0f 90       	pop	r0
    2988:	0f be       	out	0x3f, r0	; 63
    298a:	0f 90       	pop	r0
    298c:	1f 90       	pop	r1
    298e:	18 95       	reti

00002990 <main>:
#include "SPI_Interface.h"

#include <util/delay.h>

int main(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	65 97       	sbiw	r28, 0x15	; 21
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
	u16 LDR_Read = 0 ;
    29a4:	19 8a       	std	Y+17, r1	; 0x11
    29a6:	18 8a       	std	Y+16, r1	; 0x10
	u8 LM_Read = 0;
    29a8:	1a 8a       	std	Y+18, r1	; 0x12
	u8 SM_Read = 0;
    29aa:	1f 86       	std	Y+15, r1	; 0x0f
	u8 LDR_Button = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	8b 8b       	std	Y+19, r24	; 0x13
	u8 LM_Button = 1;
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	8c 8b       	std	Y+20, r24	; 0x14
	u8 SM_Button = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	8d 8b       	std	Y+21, r24	; 0x15
	DIO_enuSetPinDirection(DIO_u8PORTB , DIO_u8PIN0 , DIO_u8OUTPUT); //Fan PIN
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	41 e0       	ldi	r20, 0x01	; 1
    29be:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	//Set ACD Pin
	DIO_enuSetPinDirection(DIO_u8PORTA , DIO_u8PIN0 , DIO_u8INPUT);
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	ADC_voidInit();
    29cc:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <ADC_voidInit>

	//Set pins Port
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN0 , DIO_u8OUTPUT);
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	41 e0       	ldi	r20, 0x01	; 1
    29d6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	DIO_enuInit();
    29da:	0e 94 7b 07 	call	0xef6	; 0xef6 <DIO_enuInit>
	LCD_voidInitPortValues();
    29de:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <LCD_voidInitPortValues>
	LCD_voidInit();
    29e2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_voidInit>
	USART_voidInit();
    29e6:	0e 94 b1 11 	call	0x2362	; 0x2362 <USART_voidInit>

	//DC pin for Opening water
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN1 , DIO_u8OUTPUT);
    29ea:	83 e0       	ldi	r24, 0x03	; 3
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>

	//Buttons PINs Internal pull up
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8INPUT);
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	62 e0       	ldi	r22, 0x02	; 2
    29f8:	40 e0       	ldi	r20, 0x00	; 0
    29fa:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8INPUT);
    29fe:	83 e0       	ldi	r24, 0x03	; 3
    2a00:	63 e0       	ldi	r22, 0x03	; 3
    2a02:	40 e0       	ldi	r20, 0x00	; 0
    2a04:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8PORTD , DIO_u8PIN4 , DIO_u8INPUT);
    2a08:	83 e0       	ldi	r24, 0x03	; 3
    2a0a:	64 e0       	ldi	r22, 0x04	; 4
    2a0c:	40 e0       	ldi	r20, 0x00	; 0
    2a0e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN2 , DIO_u8HIGH);
    2a12:	83 e0       	ldi	r24, 0x03	; 3
    2a14:	62 e0       	ldi	r22, 0x02	; 2
    2a16:	41 e0       	ldi	r20, 0x01	; 1
    2a18:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN3 , DIO_u8HIGH);
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	63 e0       	ldi	r22, 0x03	; 3
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN4 , DIO_u8HIGH);
    2a26:	83 e0       	ldi	r24, 0x03	; 3
    2a28:	64 e0       	ldi	r22, 0x04	; 4
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>

	SPI_voidInit(SPI_MASTER_MODE);
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	0e 94 45 11 	call	0x228a	; 0x228a <SPI_voidInit>
	while(1)
	{
		USART_u8RecevieData(&LM_Read);
    2a36:	ce 01       	movw	r24, r28
    2a38:	42 96       	adiw	r24, 0x12	; 18
    2a3a:	0e 94 80 12 	call	0x2500	; 0x2500 <USART_u8RecevieData>
		if(LM_Read > 30)
    2a3e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a40:	8f 31       	cpi	r24, 0x1F	; 31
    2a42:	30 f0       	brcs	.+12     	; 0x2a50 <main+0xc0>
		{
			DIO_enuSetPinValue(DIO_u8PORTB , DIO_u8PIN0 ,DIO_u8HIGH);
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	60 e0       	ldi	r22, 0x00	; 0
    2a48:	41 e0       	ldi	r20, 0x01	; 1
    2a4a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    2a4e:	05 c0       	rjmp	.+10     	; 0x2a5a <main+0xca>
		}
		else
		{
			DIO_enuSetPinValue(DIO_u8PORTB , DIO_u8PIN0 ,DIO_u8LOW);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	60 e0       	ldi	r22, 0x00	; 0
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
		}
		LDR_Read = ADC_u16ADCStartConvertPolling(0b00000);
    2a5a:	80 e0       	ldi	r24, 0x00	; 0
    2a5c:	0e 94 a3 06 	call	0xd46	; 0xd46 <ADC_u16ADCStartConvertPolling>
    2a60:	99 8b       	std	Y+17, r25	; 0x11
    2a62:	88 8b       	std	Y+16, r24	; 0x10
		if(LDR_Read < 200)
    2a64:	88 89       	ldd	r24, Y+16	; 0x10
    2a66:	99 89       	ldd	r25, Y+17	; 0x11
    2a68:	88 3c       	cpi	r24, 0xC8	; 200
    2a6a:	91 05       	cpc	r25, r1
    2a6c:	30 f4       	brcc	.+12     	; 0x2a7a <main+0xea>
		{
			DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN0 , DIO_u8HIGH);
    2a6e:	83 e0       	ldi	r24, 0x03	; 3
    2a70:	60 e0       	ldi	r22, 0x00	; 0
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    2a78:	05 c0       	rjmp	.+10     	; 0x2a84 <main+0xf4>
		}
		else
		{
			DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN0 , DIO_u8LOW);
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	60 e0       	ldi	r22, 0x00	; 0
    2a7e:	40 e0       	ldi	r20, 0x00	; 0
    2a80:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
		}
		SM_Read = SPI_u8DataSendReceive(0);
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	0e 94 95 11 	call	0x232a	; 0x232a <SPI_u8DataSendReceive>
    2a8a:	8f 87       	std	Y+15, r24	; 0x0f
		if(SM_Read < 150)
    2a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8e:	86 39       	cpi	r24, 0x96	; 150
    2a90:	30 f4       	brcc	.+12     	; 0x2a9e <main+0x10e>
		{
			DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN1 , DIO_u8LOW);
    2a92:	83 e0       	ldi	r24, 0x03	; 3
    2a94:	61 e0       	ldi	r22, 0x01	; 1
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
    2a9c:	05 c0       	rjmp	.+10     	; 0x2aa8 <main+0x118>
		}
		else
		{
			DIO_enuSetPinValue(DIO_u8PORTD , DIO_u8PIN1 , DIO_u8HIGH);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <DIO_enuSetPinValue>
		}
		DIO_enuGetPinValue(DIO_u8PORTD , DIO_u8PIN2 , &LDR_Button);
    2aa8:	9e 01       	movw	r18, r28
    2aaa:	2d 5e       	subi	r18, 0xED	; 237
    2aac:	3f 4f       	sbci	r19, 0xFF	; 255
    2aae:	83 e0       	ldi	r24, 0x03	; 3
    2ab0:	62 e0       	ldi	r22, 0x02	; 2
    2ab2:	a9 01       	movw	r20, r18
    2ab4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_enuGetPinValue>
		if(LDR_Button == 0)
    2ab8:	8b 89       	ldd	r24, Y+19	; 0x13
    2aba:	88 23       	and	r24, r24
    2abc:	21 f4       	brne	.+8      	; 0x2ac6 <main+0x136>
		{
			DIO_enuTogPin(DIO_u8PORTD , DIO_u8PIN0);
    2abe:	83 e0       	ldi	r24, 0x03	; 3
    2ac0:	60 e0       	ldi	r22, 0x00	; 0
    2ac2:	0e 94 cc 0a 	call	0x1598	; 0x1598 <DIO_enuTogPin>
		}
		DIO_enuGetPinValue(DIO_u8PORTD , DIO_u8PIN3 , &LM_Button);
    2ac6:	9e 01       	movw	r18, r28
    2ac8:	2c 5e       	subi	r18, 0xEC	; 236
    2aca:	3f 4f       	sbci	r19, 0xFF	; 255
    2acc:	83 e0       	ldi	r24, 0x03	; 3
    2ace:	63 e0       	ldi	r22, 0x03	; 3
    2ad0:	a9 01       	movw	r20, r18
    2ad2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_enuGetPinValue>
		if(LM_Button == 0)
    2ad6:	8c 89       	ldd	r24, Y+20	; 0x14
    2ad8:	88 23       	and	r24, r24
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <main+0x154>
		{
			DIO_enuTogPin(DIO_u8PORTB , DIO_u8PIN0);
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <DIO_enuTogPin>
		}
		DIO_enuGetPinValue(DIO_u8PORTD , DIO_u8PIN4 , &SM_Button);
    2ae4:	9e 01       	movw	r18, r28
    2ae6:	2b 5e       	subi	r18, 0xEB	; 235
    2ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    2aea:	83 e0       	ldi	r24, 0x03	; 3
    2aec:	64 e0       	ldi	r22, 0x04	; 4
    2aee:	a9 01       	movw	r20, r18
    2af0:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <DIO_enuGetPinValue>
		if(SM_Button == 0)
    2af4:	8d 89       	ldd	r24, Y+21	; 0x15
    2af6:	88 23       	and	r24, r24
    2af8:	21 f4       	brne	.+8      	; 0x2b02 <main+0x172>
		{
			DIO_enuTogPin(DIO_u8PORTD , DIO_u8PIN1);
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	0e 94 cc 0a 	call	0x1598	; 0x1598 <DIO_enuTogPin>
		}
		LCD_voidSendString("Temp = ");
    2b02:	80 e6       	ldi	r24, 0x60	; 96
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <LCD_voidSendString>
		LCD_voidSendNumber(LM_Read);
    2b0a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	a0 e0       	ldi	r26, 0x00	; 0
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	bc 01       	movw	r22, r24
    2b16:	cd 01       	movw	r24, r26
    2b18:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_voidSendNumber>
		LCD_voidClearDisplay();
    2b1c:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_voidClearDisplay>
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	aa ef       	ldi	r26, 0xFA	; 250
    2b26:	b3 e4       	ldi	r27, 0x43	; 67
    2b28:	8b 87       	std	Y+11, r24	; 0x0b
    2b2a:	9c 87       	std	Y+12, r25	; 0x0c
    2b2c:	ad 87       	std	Y+13, r26	; 0x0d
    2b2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	4a ef       	ldi	r20, 0xFA	; 250
    2b3e:	54 e4       	ldi	r21, 0x44	; 68
    2b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8f 83       	std	Y+7, r24	; 0x07
    2b4a:	98 87       	std	Y+8, r25	; 0x08
    2b4c:	a9 87       	std	Y+9, r26	; 0x09
    2b4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b50:	6f 81       	ldd	r22, Y+7	; 0x07
    2b52:	78 85       	ldd	r23, Y+8	; 0x08
    2b54:	89 85       	ldd	r24, Y+9	; 0x09
    2b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e8       	ldi	r20, 0x80	; 128
    2b5e:	5f e3       	ldi	r21, 0x3F	; 63
    2b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b64:	88 23       	and	r24, r24
    2b66:	2c f4       	brge	.+10     	; 0x2b72 <main+0x1e2>
		__ticks = 1;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9e 83       	std	Y+6, r25	; 0x06
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	3f c0       	rjmp	.+126    	; 0x2bf0 <main+0x260>
	else if (__tmp > 65535)
    2b72:	6f 81       	ldd	r22, Y+7	; 0x07
    2b74:	78 85       	ldd	r23, Y+8	; 0x08
    2b76:	89 85       	ldd	r24, Y+9	; 0x09
    2b78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b7a:	20 e0       	ldi	r18, 0x00	; 0
    2b7c:	3f ef       	ldi	r19, 0xFF	; 255
    2b7e:	4f e7       	ldi	r20, 0x7F	; 127
    2b80:	57 e4       	ldi	r21, 0x47	; 71
    2b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b86:	18 16       	cp	r1, r24
    2b88:	4c f5       	brge	.+82     	; 0x2bdc <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	bc 01       	movw	r22, r24
    2ba4:	cd 01       	movw	r24, r26
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9e 83       	std	Y+6, r25	; 0x06
    2bb0:	8d 83       	std	Y+5, r24	; 0x05
    2bb2:	0f c0       	rjmp	.+30     	; 0x2bd2 <main+0x242>
    2bb4:	88 ec       	ldi	r24, 0xC8	; 200
    2bb6:	90 e0       	ldi	r25, 0x00	; 0
    2bb8:	9c 83       	std	Y+4, r25	; 0x04
    2bba:	8b 83       	std	Y+3, r24	; 0x03
    2bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	f1 f7       	brne	.-4      	; 0x2bc0 <main+0x230>
    2bc4:	9c 83       	std	Y+4, r25	; 0x04
    2bc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	9e 83       	std	Y+6, r25	; 0x06
    2bd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	69 f7       	brne	.-38     	; 0x2bb4 <main+0x224>
    2bda:	2d cf       	rjmp	.-422    	; 0x2a36 <main+0xa6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bde:	78 85       	ldd	r23, Y+8	; 0x08
    2be0:	89 85       	ldd	r24, Y+9	; 0x09
    2be2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	9e 83       	std	Y+6, r25	; 0x06
    2bee:	8d 83       	std	Y+5, r24	; 0x05
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	9a 83       	std	Y+2, r25	; 0x02
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	01 97       	sbiw	r24, 0x01	; 1
    2bfe:	f1 f7       	brne	.-4      	; 0x2bfc <main+0x26c>
    2c00:	9a 83       	std	Y+2, r25	; 0x02
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	18 cf       	rjmp	.-464    	; 0x2a36 <main+0xa6>

00002c06 <__udivmodsi4>:
    2c06:	a1 e2       	ldi	r26, 0x21	; 33
    2c08:	1a 2e       	mov	r1, r26
    2c0a:	aa 1b       	sub	r26, r26
    2c0c:	bb 1b       	sub	r27, r27
    2c0e:	fd 01       	movw	r30, r26
    2c10:	0d c0       	rjmp	.+26     	; 0x2c2c <__udivmodsi4_ep>

00002c12 <__udivmodsi4_loop>:
    2c12:	aa 1f       	adc	r26, r26
    2c14:	bb 1f       	adc	r27, r27
    2c16:	ee 1f       	adc	r30, r30
    2c18:	ff 1f       	adc	r31, r31
    2c1a:	a2 17       	cp	r26, r18
    2c1c:	b3 07       	cpc	r27, r19
    2c1e:	e4 07       	cpc	r30, r20
    2c20:	f5 07       	cpc	r31, r21
    2c22:	20 f0       	brcs	.+8      	; 0x2c2c <__udivmodsi4_ep>
    2c24:	a2 1b       	sub	r26, r18
    2c26:	b3 0b       	sbc	r27, r19
    2c28:	e4 0b       	sbc	r30, r20
    2c2a:	f5 0b       	sbc	r31, r21

00002c2c <__udivmodsi4_ep>:
    2c2c:	66 1f       	adc	r22, r22
    2c2e:	77 1f       	adc	r23, r23
    2c30:	88 1f       	adc	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	1a 94       	dec	r1
    2c36:	69 f7       	brne	.-38     	; 0x2c12 <__udivmodsi4_loop>
    2c38:	60 95       	com	r22
    2c3a:	70 95       	com	r23
    2c3c:	80 95       	com	r24
    2c3e:	90 95       	com	r25
    2c40:	9b 01       	movw	r18, r22
    2c42:	ac 01       	movw	r20, r24
    2c44:	bd 01       	movw	r22, r26
    2c46:	cf 01       	movw	r24, r30
    2c48:	08 95       	ret

00002c4a <__prologue_saves__>:
    2c4a:	2f 92       	push	r2
    2c4c:	3f 92       	push	r3
    2c4e:	4f 92       	push	r4
    2c50:	5f 92       	push	r5
    2c52:	6f 92       	push	r6
    2c54:	7f 92       	push	r7
    2c56:	8f 92       	push	r8
    2c58:	9f 92       	push	r9
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	ca 1b       	sub	r28, r26
    2c74:	db 0b       	sbc	r29, r27
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	09 94       	ijmp

00002c82 <__epilogue_restores__>:
    2c82:	2a 88       	ldd	r2, Y+18	; 0x12
    2c84:	39 88       	ldd	r3, Y+17	; 0x11
    2c86:	48 88       	ldd	r4, Y+16	; 0x10
    2c88:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c90:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c92:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c94:	b9 84       	ldd	r11, Y+9	; 0x09
    2c96:	c8 84       	ldd	r12, Y+8	; 0x08
    2c98:	df 80       	ldd	r13, Y+7	; 0x07
    2c9a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c9e:	0c 81       	ldd	r16, Y+4	; 0x04
    2ca0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca6:	ce 0f       	add	r28, r30
    2ca8:	d1 1d       	adc	r29, r1
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	ed 01       	movw	r28, r26
    2cb6:	08 95       	ret

00002cb8 <_exit>:
    2cb8:	f8 94       	cli

00002cba <__stop_program>:
    2cba:	ff cf       	rjmp	.-2      	; 0x2cba <__stop_program>
